{"version":3,"sources":["../../../../src/icons/general/IconOpenWith.tsx","../../../../src/elements/content-open-with/IntegrationPortal.js","../../../../src/elements/content-open-with/IntegrationPortalContainer.js","../../../../src/icons/google-docs/IconGoogleDocs.tsx","../../../../src/icons/google-docs/IconGoogleSheets.tsx","../../../../src/icons/google-docs/IconGoogleSlides.tsx","../../../../src/elements/content-open-with/IconFileMap.js","../../../../src/elements/content-open-with/BoxToolsInstallMessage.js","../../../../src/elements/content-open-with/openWithUtils.js","../../../../src/elements/content-open-with/OpenWithDropdownMenuItem.js","../../../../src/elements/content-open-with/OpenWithButtonContents.js","../../../../src/elements/content-open-with/MultipleIntegrationsOpenWithButton.js","../../../../src/elements/content-open-with/OpenWithDropdownMenu.js","../../../../src/elements/content-open-with/OpenWithButton.js","../../../../src/elements/content-open-with/OpenWithFallbackButton.js","../../../../src/elements/content-open-with/ExecuteForm.js","../../../../src/elements/content-open-with/ContentOpenWith.js"],"names":["IconOpenWith","className","color","bdlGray80","height","title","width","viewBox","fill","fillRule","d","IntegrationPortal","integrationWindow","children","containerElement","document","createElement","documentElement","Array","from","styleSheets","forEach","styleSheet","href","copiedStyleSheet","rel","head","appendChild","body","style","margin","padding","copyStyles","createPortal","IntegrationPortalContainer","hasError","ErrorMask","errorHeader","messages","executeIntegrationOpenWithErrorHeader","errorSubHeader","executeIntegrationOpenWithErrorSubHeader","LoadingIndicator","size","ICON_CLASS","IconGoogleDocs","uniqueId","this","props","gradientTransform","gradientUnits","id","idPrefix","x1","x2","y1","y2","offset","stopColor","stopOpacity","fillOpacity","React","IconGoogleSheets","IconGoogleSlides","ICON_FILE_MAP","getIcon","iconName","FileIcon","BoxToolsInstallMessage","boxToolsName","boxToolsInstallUrl","boxToolsInstallMessage","values","boxTools","onClick","window","open","integration","getProp","OpenWithDropdownMenuItem","displayName","displayDescription","isDisabled","extension","disabledReasons","Icon","description","message","code","defaultErrorMessage","errorOpenWithDescription","boxEditErrorBlockedByPolicy","getErrorMessage","classNames","utils","MenuItem","dimension","OPEN_WITH_MENU_ITEM_ICON_SIZE","OpenWithButtonContents","MultipleIntegrationsOpenWithButton","buttonProps","Tooltip","position","text","defaultOpenWithDescription","Button","MenuToggle","CLASS_INTEGRATION_ICON","OPEN_WITH_BUTTON_ICON_SIZE","RIGHT_ALIGNMENT","OpenWithDropdownMenu","dropdownAlignment","integrations","DropdownMenu","isRightAligned","Menu","map","key","appIntegrationId","getTooltip","isLoading","error","emptyOpenWithDescription","length","OpenWithButton","noop","displayIntegration","isDisplayIntegrationDisabled","tooltipDisplayProps","isShown","showCloseButton","OpenWithFallbackButton","ExecuteForm","ref","createRef","onSubmit","current","submit","executePostData","url","params","windowName","action","method","HTTP_POST","target","value","name","type","PureComponent","BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY","GENERIC_EXECUTE_MESSAGE_KEY","ContentOpenWith","isDropdownOpen","fetchError","shouldRenderErrorIntegrationPortal","shouldRenderLoadingIntegrationPortal","boxEditIntegration","find","isBoxEditIntegration","getIntegrationFileExtension","isBoxEditAvailable","canOpenExtensionWithBoxEdit","errorMessageObject","formattedErrorMessage","push","setState","fileId","Promise","resolve","reject","api","getFileAPI","getFileExtension","Error","getBoxEditAPI","checkBoxEditAvailability","catch","getAppForExtension","onError","getAppIntegrationsAPI","execute","executeIntegrationSuccessHandler","bind","executeBoxEditErrorHandler","executeIntegrationErrorHandler","windowFeatures","screenX","screenY","outerHeight","innerWidth","uniqueid","onunload","cleanupIntegrationWindow","integrationId","executeData","executeBoxEditSuccessHandler","executeOnlineIntegrationSuccessHandler","onExecute","HTTP_GET","location","opener","ERROR_CODE_EXECUTE_INTEGRATION","token","authCode","queryString","parse","isFileScoped","isBoxEditSFCIntegration","openFile","data","auth_code","token_scope","TYPE_FILE","TYPE_FOLDER","console","apiHost","clientName","language","requestInterceptor","responseInterceptor","API","state","initialState","destroy","fetchOpenWithData","prevProps","currentFileId","previousFileId","BOX_EDIT_INTEGRATION_ID","BOX_EDIT_SFC_INTEGRATION_ID","getOpenWithAPI","getOpenWithIntegrations","fetchOpenWithSuccessHandler","fetchErrorHandler","integrationID","isArray","intlMessages","getDisplayIntegration","numIntegrations","Internationalize","onIntegrationClick","onExecuteFormSubmit","DEFAULT_HOSTNAME_API","CLIENT_NAME_OPEN_WITH","withErrorBoundary","ORIGIN_OPEN_WITH"],"mappings":"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","file":"static/js/13.5ca7ba4c.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\nimport { bdlGray80 } from '../../styles/variables';\n\nimport { Icon } from '../iconTypes';\n\nconst IconOpenWith = ({ className = '', color = bdlGray80, height = 16, title, width = 16 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-open-with ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 16 16\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            fill={color}\n            fillRule=\"evenodd\"\n            d=\"M12 2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2zm0 1H4a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zm-1 2v6h-1V6.71l-4.65 4.64-.7-.7L9.29 6H5V5h6z\"\n        />\n    </AccessibleSVG>\n);\n\nexport default IconOpenWith;\n","/**\n * @flow\n * @file Allows react to render a component in an arbitrary DOM node, in this case in a new window.\n * @author Box\n */\n\nimport { createPortal } from 'react-dom';\n\ntype Props = {\n    children: any,\n    integrationWindow: any,\n};\n\n/**\n * Copies stylesheets to the new window.\n *\n * @private\n * @param {HTMLDocument} documentElement - an HTML document\n * @param {Window} integrationWindow - a browser window\n * @return {void}\n */\nexport function copyStyles(documentElement: Document, integrationWindow: any) {\n    // The new window will have no CSS, so we copy all style sheets as a safe way\n    // of ensuring required styles are present\n    Array.from(documentElement.styleSheets).forEach(styleSheet => {\n        if (!styleSheet.href) {\n            return;\n        }\n\n        const copiedStyleSheet = integrationWindow.document.createElement('link');\n        copiedStyleSheet.rel = 'stylesheet';\n        copiedStyleSheet.href = styleSheet.href;\n        integrationWindow.document.head.appendChild(copiedStyleSheet);\n    });\n\n    // Reset margin and padding in our new window\n    integrationWindow.document.body.style.margin = 0;\n    integrationWindow.document.body.style.padding = 0;\n}\n\nconst IntegrationPortal = ({ integrationWindow, children }: Props) => {\n    const containerElement = integrationWindow.document.createElement('div');\n    copyStyles(document, integrationWindow);\n    integrationWindow.document.body.appendChild(containerElement);\n    return createPortal(children, containerElement);\n};\n\nexport default IntegrationPortal;\n","/**\n * @flow\n * @file integration portal container\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport ErrorMask from '../../components/error-mask/ErrorMask';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport messages from '../common/messages';\nimport IntegrationPortal from './IntegrationPortal';\n\ntype Props = {\n    hasError: boolean,\n    integrationWindow: any,\n};\n\nconst IntegrationPortalContainer = ({ hasError, integrationWindow }: Props) => (\n    <IntegrationPortal integrationWindow={integrationWindow}>\n        <div className=\"be bcow bcow-portal-container\">\n            {hasError ? (\n                <ErrorMask\n                    errorHeader={<FormattedMessage {...messages.executeIntegrationOpenWithErrorHeader} />}\n                    errorSubHeader={<FormattedMessage {...messages.executeIntegrationOpenWithErrorSubHeader} />}\n                />\n            ) : (\n                <LoadingIndicator className=\"bcow-portal-loading-indicator\" size=\"large\" />\n            )}\n        </div>\n    </IntegrationPortal>\n);\n\nexport default IntegrationPortalContainer;\n","import * as React from 'react';\nimport uniqueId from 'lodash/uniqueId';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { TwoTonedIcon } from '../iconTypes';\n\nconst ICON_CLASS = 'icon-google-docs';\n\nclass IconGoogleDocs extends React.Component<TwoTonedIcon> {\n    static defaultProps = {\n        className: '',\n        height: 30,\n        width: 30,\n    };\n\n    idPrefix = `${uniqueId(ICON_CLASS)}-`;\n\n    render() {\n        const { className, height, title, width } = this.props;\n        return (\n            <AccessibleSVG\n                className={`${ICON_CLASS} ${className}`}\n                height={height}\n                title={title}\n                viewBox=\"0 0 30 30\"\n                width={width}\n            >\n                <defs>\n                    <linearGradient\n                        gradientTransform=\"matrix(2.67 0 0 -2.67 596.67 1357)\"\n                        gradientUnits=\"userSpaceOnUse\"\n                        id={`${this.idPrefix}a`}\n                        x1=\"-215.49\"\n                        x2=\"-215.49\"\n                        y1=\"505.79\"\n                        y2=\"503.19\"\n                    >\n                        <stop offset=\"0\" stopColor=\"#1a237e\" stopOpacity=\".2\" />\n                        <stop offset=\"1\" stopColor=\"#1a237e\" stopOpacity=\".02\" />\n                    </linearGradient>\n                </defs>\n                <path\n                    d=\"M17.64 0H6.05A2.05 2.05 0 0 0 4 2.05V28a2.05 2.05 0 0 0 2.05 2h17.72a2.05 2.05 0 0 0 2.05-2V8.18l-4.77-3.41z\"\n                    fill=\"#4285f4\"\n                />\n                <path d=\"M18.23 7.58l7.59 7.58V8.18l-7.59-.6z\" fill={`url(#${this.idPrefix}a)`} />\n                <path\n                    d=\"M9.45 21.82h10.91v-1.37H9.45zm0 2.73h8.19v-1.37H9.45zm0-9.55v1.36h10.91V15zm0 4.09h10.91v-1.36H9.45z\"\n                    fill=\"#f1f1f1\"\n                />\n                <path d=\"M17.64 0v6.14a2 2 0 0 0 2 2h6.14z\" fill=\"#a1c2fa\" />\n                <path\n                    d=\"M6.05 0A2.05 2.05 0 0 0 4 2.05v.17A2.05 2.05 0 0 1 6.05.17h11.59V0z\"\n                    fill=\"#fff\"\n                    fillOpacity=\".2\"\n                />\n                <path d=\"M19.68 8.18a2 2 0 0 1-2-2v.17a2 2 0 0 0 2 2h6.14v-.17z\" fill=\"#1a237e\" fillOpacity=\".1\" />\n            </AccessibleSVG>\n        );\n    }\n}\n\nexport default IconGoogleDocs;\n","import * as React from 'react';\nimport uniqueId from 'lodash/uniqueId';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { TwoTonedIcon } from '../iconTypes';\n\nconst ICON_CLASS = 'icon-google-sheets';\n\nclass IconGoogleSheets extends React.Component<TwoTonedIcon> {\n    static defaultProps = {\n        className: '',\n        height: 30,\n        width: 30,\n    };\n\n    idPrefix = `${uniqueId(ICON_CLASS)}-`;\n\n    render() {\n        const { className, height, title, width } = this.props;\n        return (\n            <AccessibleSVG\n                className={`${ICON_CLASS} ${className}`}\n                height={height}\n                title={title}\n                viewBox=\"0 0 30 30\"\n                width={width}\n            >\n                <defs>\n                    <linearGradient\n                        gradientTransform=\"matrix(2.67 0 0 -2.67 596.67 1357)\"\n                        gradientUnits=\"userSpaceOnUse\"\n                        id={`${this.idPrefix}a`}\n                        x1=\"-215.49\"\n                        x2=\"-215.49\"\n                        y1=\"505.79\"\n                        y2=\"503.19\"\n                    >\n                        <stop offset=\"0\" stopColor=\"#208256\" />\n                        <stop offset=\".55\" stopColor=\"#19955a\" stopOpacity=\".2\" />\n                    </linearGradient>\n                </defs>\n                <path\n                    d=\"M17.64 0H6.05A2.05 2.05 0 0 0 4 2.05V28a2.05 2.05 0 0 0 2.05 2h17.72a2.05 2.05 0 0 0 2.05-2V8.18l-4.77-3.41z\"\n                    fill=\"#22a565\"\n                />\n                <path d=\"M18.23 7.58l7.59 7.58V8.18l-7.59-.6z\" fill={`url(#${this.idPrefix}a)`} />\n                <path d=\"M17.64 0v6.14a2 2 0 0 0 2 2h6.14z\" fill=\"#8ed1b1\" />\n                <path\n                    d=\"M6.05 0A2.05 2.05 0 0 0 4 2.05v.17A2.05 2.05 0 0 1 6.05.17h11.59V0z\"\n                    fill=\"#fff\"\n                    fillOpacity=\".2\"\n                />\n                <path d=\"M19.68 8.18a2 2 0 0 1-2-2v.17a2 2 0 0 0 2 2h6.14v-.17z\" fill=\"#1a237e\" fillOpacity=\".1\" />\n                <path\n                    d=\"M10 14v10h10V14zm1 1h3.5v2H11zm0 3h3.5v2H11zm0 5v-2h3.5v2zm8 0h-3.5v-2H19zm0-3h-3.5v-2H19zm0-3h-3.5v-2H19z\"\n                    fill=\"#f1f1f1\"\n                />\n            </AccessibleSVG>\n        );\n    }\n}\n\nexport default IconGoogleSheets;\n","import * as React from 'react';\nimport uniqueId from 'lodash/uniqueId';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { TwoTonedIcon } from '../iconTypes';\n\nconst ICON_CLASS = 'icon-google-slides';\n\nclass IconGoogleSlides extends React.Component<TwoTonedIcon> {\n    static defaultProps = {\n        className: '',\n        height: 30,\n        width: 30,\n    };\n\n    idPrefix = `${uniqueId(ICON_CLASS)}-`;\n\n    render() {\n        const { className, height, title, width } = this.props;\n        return (\n            <AccessibleSVG\n                className={`${ICON_CLASS} ${className}`}\n                height={height}\n                title={title}\n                viewBox=\"0 0 30 30\"\n                width={width}\n            >\n                <defs>\n                    <linearGradient\n                        gradientTransform=\"matrix(2.67 0 0 -2.67 596.67 1357)\"\n                        gradientUnits=\"userSpaceOnUse\"\n                        id={`${this.idPrefix}a`}\n                        x1=\"-215.49\"\n                        x2=\"-215.49\"\n                        y1=\"505.79\"\n                        y2=\"503.19\"\n                    >\n                        <stop offset=\"0\" stopColor=\"#d08714\" stopOpacity=\".88\" />\n                        <stop offset=\".55\" stopColor=\"#cf8714\" stopOpacity=\".2\" />\n                    </linearGradient>\n                </defs>\n                <path\n                    d=\"M17.64 0H6.05A2.05 2.05 0 0 0 4 2.05V28a2.05 2.05 0 0 0 2.05 2h17.72a2.05 2.05 0 0 0 2.05-2V8.18l-4.77-3.41z\"\n                    fill=\"#f4b912\"\n                />\n                <path d=\"M18.23 7.58l7.59 7.58V8.18l-7.59-.6z\" fill={`url(#${this.idPrefix}a)`} />\n                <path d=\"M17.64 0v6.14a2 2 0 0 0 2 2h6.14z\" fill=\"#fadc87\" />\n                <path\n                    d=\"M6.05 0A2.05 2.05 0 0 0 4 2.05v.17A2.05 2.05 0 0 1 6.05.17h11.59V0z\"\n                    fill=\"#fff\"\n                    fillOpacity=\".2\"\n                />\n                <path d=\"M19.68 8.18a2 2 0 0 1-2-2v.17a2 2 0 0 0 2 2h6.14v-.17z\" fill=\"#1a237e\" fillOpacity=\".1\" />\n                <path\n                    d=\"M10 15v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1h-8a1 1 0 0 0-1 1zm9 6h-8v-4h8z\"\n                    fill=\"#f1f1f1\"\n                />\n            </AccessibleSVG>\n        );\n    }\n}\n\nexport default IconGoogleSlides;\n","/**\n * @flow\n * @file Maintains a mapping of integration names to icons.\n * @author Box\n */\nimport * as React from 'react';\nimport IconGoogleDocs from '../../icons/google-docs/IconGoogleDocs';\nimport IconGoogleSheets from '../../icons/google-docs/IconGoogleSheets';\nimport IconGoogleSlides from '../../icons/google-docs/IconGoogleSlides';\nimport FileIcon from '../../icons/file-icon/FileIcon';\n\nconst ICON_FILE_MAP = {\n    'Google Docs': IconGoogleDocs,\n    'Google Docs (beta)': IconGoogleDocs,\n    'Google Sheets': IconGoogleSheets,\n    'Google Sheets (beta)': IconGoogleSheets,\n    'Google Slides': IconGoogleSlides,\n    'Google Slides (beta)': IconGoogleSlides,\n};\n\nfunction getIcon(iconName: string): React.ComponentType<any> {\n    return ICON_FILE_MAP[iconName] || FileIcon;\n}\n\nexport default getIcon;\n","/**\n * @flow\n * @file Custom message to install Box Tools inside of Open With.\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../common/messages';\nimport './BoxToolsInstallMessage.scss';\n\nconst DEFAULT_BOX_TOOLS_INSTALLATION_URL = 'https://cloud.box.com/v/installboxtools';\nconst DEFAULT_BOX_TOOLS_NAME = 'Box Tools';\n\ntype Props = {\n    boxToolsInstallUrl?: string,\n    boxToolsName?: string,\n};\n\nconst BoxToolsInstallMessage = ({\n    boxToolsName = DEFAULT_BOX_TOOLS_NAME,\n    boxToolsInstallUrl = DEFAULT_BOX_TOOLS_INSTALLATION_URL,\n}: Props) => {\n    const onLinkClick = () => {\n        // Manually open the URL since disabled menu items are blocked from clickable actions by default\n        window.open(boxToolsInstallUrl);\n    };\n\n    return (\n        <FormattedMessage\n            {...messages.boxToolsInstallMessage}\n            values={{\n                boxTools: (\n                    // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                    <a href=\"#\" onClick={onLinkClick} rel=\"noopener noreferrer\">\n                        {boxToolsName}\n                    </a>\n                ),\n            }}\n        />\n    );\n};\n\nexport default BoxToolsInstallMessage;\n","/**\n * @flow\n * @file Open With utils\n * @author Box\n */\n\nimport getProp from 'lodash/get';\nimport BoxToolsInstallMessage from './BoxToolsInstallMessage';\nimport type { Integration } from '../../common/types/integrations';\n\nconst isDisabledBecauseBoxToolsIsNotInstalled = (integration: ?Integration): boolean => {\n    const disabledReasonType = getProp(integration, 'disabledReasons.0.type');\n    return disabledReasonType === BoxToolsInstallMessage;\n};\n\nexport default { isDisabledBecauseBoxToolsIsNotInstalled };\n","/**\n * @flow\n * @file Open With dropdown menu item\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport MenuItem from '../../components/menu/MenuItem';\nimport messages from '../common/messages';\nimport { OPEN_WITH_MENU_ITEM_ICON_SIZE } from '../../constants';\nimport getIcon from './IconFileMap';\nimport utils from './openWithUtils';\nimport type { Integration, DisabledReason } from '../../common/types/integrations';\nimport './OpenWithDropdownMenuItem.scss';\n\ntype Props = {\n    integration: Integration,\n    onClick: Function,\n};\n\nfunction getErrorMessage(disabledReasons: Array<DisabledReason> = []): React.Node {\n    let message;\n    // Use the first disabled reason as the description if the integration is disabled.\n    const code = disabledReasons[0];\n    const defaultErrorMessage = <FormattedMessage {...messages.errorOpenWithDescription} />;\n\n    switch (code) {\n        case 'blocked_by_shield_access_policy':\n            message = <FormattedMessage {...messages.boxEditErrorBlockedByPolicy} />;\n            break;\n        case 'collaborators_hidden':\n            message = defaultErrorMessage;\n            break;\n        default:\n            message = disabledReasons[0] || defaultErrorMessage;\n    }\n    return message;\n}\n\nconst OpenWithDropdownMenuItem = ({ integration, onClick }: Props) => {\n    const { displayName, displayDescription, isDisabled, extension, disabledReasons } = integration;\n    const Icon = getIcon(displayName);\n    const description = isDisabled ? getErrorMessage(disabledReasons) : displayDescription;\n    const className = classNames({\n        'bcow-box-tools-uninstalled': utils.isDisabledBecauseBoxToolsIsNotInstalled(integration),\n    });\n\n    return (\n        <MenuItem className={className} isDisabled={isDisabled} onClick={() => onClick(integration)}>\n            <Icon\n                dimension={OPEN_WITH_MENU_ITEM_ICON_SIZE}\n                extension={extension}\n                height={OPEN_WITH_MENU_ITEM_ICON_SIZE}\n                width={OPEN_WITH_MENU_ITEM_ICON_SIZE}\n            />\n            <span>\n                <p className=\"bcow-menu-item-title\">{displayName}</p>\n                <p className=\"bcow-menu-item-description\">{description}</p>\n            </span>\n        </MenuItem>\n    );\n};\n\nexport default OpenWithDropdownMenuItem;\n","/**\n * @flow\n * @file Open With button contents\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../common/messages';\n\ntype Props = {\n    children: any,\n};\n\nconst OpenWithButtonContents = ({ children }: Props) => (\n    <>\n        {children}\n        <span className=\"bcow-btn-header-text\">\n            <FormattedMessage {...messages.open} />\n        </span>\n    </>\n);\n\nexport default OpenWithButtonContents;\n","/**\n * @flow\n * @file Open With button when multiple integrations are present\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport MenuToggle from '../../components/dropdown-menu/MenuToggle';\nimport IconOpenWith from '../../icons/general/IconOpenWith';\nimport Button from '../../components/button/Button';\nimport Tooltip from '../common/Tooltip';\nimport messages from '../common/messages';\nimport OpenWithButtonContents from './OpenWithButtonContents';\nimport { CLASS_INTEGRATION_ICON, OPEN_WITH_BUTTON_ICON_SIZE } from '../../constants';\n\ntype Props = {\n    buttonProps?: ?Object,\n};\n\nconst MultipleIntegrationsOpenWithButton = (buttonProps: Props) => (\n    <Tooltip position=\"middle-left\" text={<FormattedMessage {...messages.defaultOpenWithDescription} />}>\n        <Button data-testid=\"multipleintegrationsbutton\" {...buttonProps}>\n            <MenuToggle>\n                <OpenWithButtonContents>\n                    <IconOpenWith\n                        className={CLASS_INTEGRATION_ICON}\n                        dimension={OPEN_WITH_BUTTON_ICON_SIZE}\n                        height={OPEN_WITH_BUTTON_ICON_SIZE}\n                        width={OPEN_WITH_BUTTON_ICON_SIZE}\n                    />\n                </OpenWithButtonContents>\n            </MenuToggle>\n        </Button>\n    </Tooltip>\n);\n\nexport default MultipleIntegrationsOpenWithButton;\n","/**\n * @flow\n * @file Open With dropdown menu\n * @author Box\n */\n\nimport * as React from 'react';\nimport DropdownMenu from '../../components/dropdown-menu/DropdownMenu';\nimport Menu from '../../components/menu/Menu';\nimport OpenWithDropdownMenuItem from './OpenWithDropdownMenuItem';\nimport MultipleIntegrationsOpenWithButton from './MultipleIntegrationsOpenWithButton';\nimport type { Alignment } from '../common/flowTypes';\nimport type { Integration } from '../../common/types/integrations';\n\ntype Props = {\n    dropdownAlignment: Alignment,\n    integrations: Array<Integration>,\n    onClick: Function,\n};\n\nconst RIGHT_ALIGNMENT = 'right';\n\nconst OpenWithDropdownMenu = ({ dropdownAlignment = RIGHT_ALIGNMENT, integrations, onClick }: Props) => (\n    <DropdownMenu isRightAligned={dropdownAlignment === RIGHT_ALIGNMENT}>\n        <MultipleIntegrationsOpenWithButton />\n        <Menu className=\"bcow-menu\">\n            {integrations.map(integration => (\n                <OpenWithDropdownMenuItem\n                    key={integration.appIntegrationId}\n                    integration={integration}\n                    onClick={onClick}\n                />\n            ))}\n        </Menu>\n    </DropdownMenu>\n);\n\nexport default OpenWithDropdownMenu;\n","/**\n * @flow\n * @file Open With button\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport noop from 'lodash/noop';\nimport Button from '../../components/button/Button';\nimport IconOpenWith from '../../icons/general/IconOpenWith';\nimport Tooltip from '../common/Tooltip';\nimport messages from '../common/messages';\nimport OpenWithButtonContents from './OpenWithButtonContents';\nimport utils from './openWithUtils';\nimport { CLASS_INTEGRATION_ICON, OPEN_WITH_BUTTON_ICON_SIZE } from '../../constants';\nimport getIcon from './IconFileMap';\nimport type { DisabledReason, Integration } from '../../common/types/integrations';\n\ntype Props = {\n    displayIntegration?: ?Integration,\n    error: ?any,\n    icon?: string,\n    isLoading: boolean,\n    onClick?: Integration => void,\n    tooltipText?: string | Object,\n};\n\n/**\n * Gets the tooltip text for the ContentOpenWith button\n *\n * @private\n * @return {?(string | Element)} the tooltip message\n */\nexport const getTooltip = (\n    displayDescription: string,\n    isLoading: boolean,\n    error: ?Error,\n    disabledReasons: Array<DisabledReason> = [],\n): ?DisabledReason => {\n    if (isLoading) {\n        return null;\n    }\n\n    let message = <FormattedMessage {...messages.emptyOpenWithDescription} />;\n    if (disabledReasons.length > 0) {\n        [message] = disabledReasons;\n    } else if (error) {\n        message = <FormattedMessage {...messages.errorOpenWithDescription} />;\n    } else if (displayDescription) {\n        message = displayDescription;\n    }\n\n    return message;\n};\n\nconst OpenWithButton = ({ error, onClick = noop, displayIntegration, isLoading }: Props) => {\n    const { displayName, isDisabled: isDisplayIntegrationDisabled, extension, disabledReasons, displayDescription } =\n        displayIntegration || {};\n\n    const isDisabled = !!isDisplayIntegrationDisabled || !displayName;\n    const Icon = displayName ? getIcon(displayName) : IconOpenWith;\n\n    const tooltipDisplayProps = utils.isDisabledBecauseBoxToolsIsNotInstalled(displayIntegration)\n        ? { isShown: true, showCloseButton: true }\n        : {};\n\n    return (\n        <Tooltip\n            className=\"bcow-tooltip\"\n            position=\"bottom-center\"\n            text={getTooltip(displayDescription, isLoading, error, disabledReasons)}\n            {...tooltipDisplayProps}\n        >\n            <Button\n                data-testid=\"singleintegrationbutton\"\n                isDisabled={isDisabled}\n                onClick={() => (displayIntegration ? onClick(displayIntegration) : noop)}\n            >\n                <OpenWithButtonContents>\n                    <Icon\n                        className={CLASS_INTEGRATION_ICON}\n                        dimension={OPEN_WITH_BUTTON_ICON_SIZE}\n                        extension={extension}\n                        height={OPEN_WITH_BUTTON_ICON_SIZE}\n                        width={OPEN_WITH_BUTTON_ICON_SIZE}\n                    />\n                </OpenWithButtonContents>\n            </Button>\n        </Tooltip>\n    );\n};\n\nexport default OpenWithButton;\n","/**\n * @flow\n * @file Open With fallback button\n * @author Box\n */\n\nimport * as React from 'react';\nimport OpenWithButton from './OpenWithButton';\nimport type { ElementsError } from '../../common/types/api';\n\ntype Props = {\n    error: ElementsError,\n};\n\nconst OpenWithFallbackButton = ({ error }: Props) => (\n    <div className=\"be bcow\">\n        <OpenWithButton error={error} isLoading={false} />\n    </div>\n);\n\nexport default OpenWithFallbackButton;\n","/**\n * @flow\n * @file Form to invoke an integration via POST\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport { HTTP_POST } from '../../constants';\nimport type { ExecuteAPI } from '../../common/types/integrations';\n\ntype Props = {\n    executePostData: ExecuteAPI,\n    id: string,\n    onSubmit: Function,\n    windowName: ?string,\n};\n\nclass ExecuteForm extends PureComponent<Props> {\n    ref: any;\n\n    constructor(props: Props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n\n    componentDidMount() {\n        const { onSubmit }: Props = this.props;\n        this.ref.current.submit();\n        onSubmit();\n    }\n\n    render() {\n        const {\n            executePostData: { url, params },\n            id,\n            windowName,\n        }: Props = this.props;\n        return (\n            <form\n                ref={this.ref}\n                action={url}\n                id={`bcow-execute-form-${id}`}\n                method={HTTP_POST}\n                rel=\"noreferrer noopener\"\n                target={windowName || '_blank'}\n            >\n                {params && params.map(({ key, value }) => <input key={key} name={key} type=\"hidden\" value={value} />)}\n            </form>\n        );\n    }\n}\n\nexport default ExecuteForm;\n","/**\n * @flow\n * @file Open With Component\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport uniqueid from 'lodash/uniqueId';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport queryString from 'query-string';\nimport Internationalize from '../common/Internationalize';\nimport messages from '../common/messages';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport API from '../../api';\nimport IntegrationPortalContainer from './IntegrationPortalContainer';\nimport OpenWithDropdownMenu from './OpenWithDropdownMenu';\nimport BoxToolsInstallMessage from './BoxToolsInstallMessage';\nimport OpenWithButton from './OpenWithButton';\nimport OpenWithFallbackButton from './OpenWithFallbackButton';\nimport ExecuteForm from './ExecuteForm';\nimport '../common/base.scss';\nimport './ContentOpenWith.scss';\nimport {\n    BOX_EDIT_INTEGRATION_ID,\n    BOX_EDIT_SFC_INTEGRATION_ID,\n    CLIENT_NAME_OPEN_WITH,\n    DEFAULT_HOSTNAME_API,\n    ERROR_CODE_EXECUTE_INTEGRATION,\n    HTTP_GET,\n    HTTP_POST,\n    ORIGIN_OPEN_WITH,\n    TYPE_FILE,\n    TYPE_FOLDER,\n} from '../../constants';\nimport type { Alignment } from '../common/flowTypes';\nimport type { ExecuteAPI, Integration } from '../../common/types/integrations';\nimport type { StringMap, Token, BoxItem } from '../../common/types/core';\n\nconst UNSUPPORTED_INVOCATION_METHOD_TYPE = 'Integration invocation using this HTTP method type is not supported';\nconst BLACKLISTED_ERROR_MESSAGE_KEY = 'boxToolsBlacklistedError';\nconst BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY = 'boxToolsInstallErrorMessage';\nconst GENERIC_EXECUTE_MESSAGE_KEY = 'executeIntegrationOpenWithErrorHeader';\nconst AUTH_CODE = 'auth_code';\n\ntype ExternalProps = {\n    show?: boolean,\n};\n\ntype Props = {\n    /** Box API url. */\n    apiHost: string,\n    /** Class name applied to base component. */\n    boxToolsInstallUrl?: string,\n    /** Application client name. */\n    boxToolsName?: string,\n    /** Custom name for Box Tools to display to users */\n    className: string,\n    /** Custom URL to direct users to install Box Tools */\n    clientName: string,\n    /** Determines positioning of menu dropdown */\n    dropdownAlignment: Alignment,\n    /** Box File ID. */\n    fileId: string,\n    /** Language to use for translations. */\n    language?: string,\n    /** Messages to be translated. */\n    messages?: StringMap,\n    /** Callback that executes when an integration attempts to open the given file */\n    onError: Function,\n    /** Callback that executes when an integration invocation fails. The two most common cases being API failures or blocking of a new window */\n    onExecute: Function,\n    /** Axios request interceptor that runs before a network request. */\n    requestInterceptor?: Function,\n    /** Axios response interceptor that runs before a network response is returned. */\n    responseInterceptor?: Function,\n    /** Access token. */\n    token: Token,\n};\n\ntype State = {\n    executePostData: ?Object,\n    fetchError: ?Error,\n    integrations: ?Array<Integration>,\n    isDropdownOpen: boolean,\n    isLoading: boolean,\n    shouldRenderErrorIntegrationPortal: boolean,\n    shouldRenderLoadingIntegrationPortal: boolean,\n};\n\nclass ContentOpenWith extends PureComponent<Props, State> {\n    api: API;\n\n    id: string;\n\n    props: Props;\n\n    state: State;\n\n    window: any;\n\n    integrationWindow: ?any;\n\n    static defaultProps = {\n        apiHost: DEFAULT_HOSTNAME_API,\n        className: '',\n        clientName: CLIENT_NAME_OPEN_WITH,\n        onExecute: noop,\n        onError: noop,\n    };\n\n    initialState: State = {\n        isDropdownOpen: false,\n        integrations: null,\n        isLoading: true,\n        fetchError: null,\n        executePostData: null,\n        shouldRenderErrorIntegrationPortal: false,\n        shouldRenderLoadingIntegrationPortal: false,\n    };\n\n    /**\n     * [constructor]\n     *\n     * @private\n     * @return {ContentOpenWith}\n     */\n    constructor(props: Props) {\n        super(props);\n\n        const { token, apiHost, clientName, language, requestInterceptor, responseInterceptor } = props;\n        this.id = uniqueid('bcow_');\n        this.api = new API({\n            apiHost,\n            clientName,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            token,\n        });\n\n        // Clone initial state to allow for state reset on new files\n        this.state = { ...this.initialState };\n    }\n\n    /**\n     * Destroys api instances with caches\n     *\n     * @private\n     * @return {void}\n     */\n    clearCache(): void {\n        this.api.destroy(true);\n    }\n\n    /**\n     * Cleanup\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentWillUnmount() {\n        // Don't destroy the cache while unmounting\n        this.api.destroy(false);\n    }\n\n    /**\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentDidMount() {\n        const { fileId }: Props = this.props;\n        if (!fileId) {\n            return;\n        }\n\n        this.window = window;\n\n        this.fetchOpenWithData();\n    }\n\n    /**\n     * After component updates, re-fetch Open With data if appropriate.\n     *\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props): void {\n        const { fileId: currentFileId }: Props = this.props;\n        const { fileId: previousFileId }: Props = prevProps;\n\n        if (!currentFileId) {\n            return;\n        }\n\n        if (currentFileId !== previousFileId) {\n            this.setState({ ...this.initialState });\n            this.fetchOpenWithData();\n        }\n    }\n\n    /**\n     * Checks if a given integration is a Box Edit integration.\n     *\n     * @param {string} [integrationId] - The integration ID\n     * @return {boolean}\n     */\n    isBoxEditIntegration(integrationId: ?string): boolean {\n        return integrationId === BOX_EDIT_INTEGRATION_ID || this.isBoxEditSFCIntegration(integrationId);\n    }\n\n    /**\n     * Checks if a given integration is a Box Edit integration.\n     *\n     * @param {string} [integrationId] - The integration ID\n     * @return {boolean}\n     */\n    isBoxEditSFCIntegration(integrationId: ?string): boolean {\n        return integrationId === BOX_EDIT_SFC_INTEGRATION_ID;\n    }\n\n    /**\n     * Fetches Open With data.\n     *\n     * @return {void}\n     */\n    fetchOpenWithData(): void {\n        const { fileId }: Props = this.props;\n        this.api\n            .getOpenWithAPI(false)\n            .getOpenWithIntegrations(fileId, this.fetchOpenWithSuccessHandler, this.fetchErrorHandler);\n    }\n\n    /**\n     * Fetch app integrations info needed to render.\n     *\n     * @param {OpenWithIntegrations} integrations - The available Open With integrations\n     * @return {void}\n     */\n    fetchOpenWithSuccessHandler = async (integrations: Array<Integration>): Promise<any> => {\n        const { boxToolsName, boxToolsInstallUrl } = this.props;\n        const boxEditIntegration = integrations.find(({ appIntegrationId }) =>\n            this.isBoxEditIntegration(appIntegrationId),\n        );\n\n        if (boxEditIntegration && !boxEditIntegration.isDisabled) {\n            try {\n                const { extension } = await this.getIntegrationFileExtension();\n                boxEditIntegration.extension = extension;\n                // If Box Edit is present and enabled, we need to set its ability to locally open the given file\n                // No-op if these checks are successful\n                await this.isBoxEditAvailable();\n                await this.canOpenExtensionWithBoxEdit(boxEditIntegration);\n            } catch (error) {\n                const errorMessageObject = messages[error.message] || messages[GENERIC_EXECUTE_MESSAGE_KEY];\n                let formattedErrorMessage = <FormattedMessage {...errorMessageObject} />;\n                if (error.message === BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY) {\n                    formattedErrorMessage = (\n                        <BoxToolsInstallMessage boxToolsInstallUrl={boxToolsInstallUrl} boxToolsName={boxToolsName} />\n                    );\n                }\n\n                boxEditIntegration.disabledReasons.push(formattedErrorMessage);\n                boxEditIntegration.isDisabled = true;\n            }\n        }\n\n        this.setState({ integrations, isLoading: false });\n    };\n\n    /**\n     * Fetches the file extension of the current file.\n     *\n     * @return {Promise}\n     */\n    getIntegrationFileExtension = (): Promise<BoxItem> => {\n        const { fileId }: Props = this.props;\n        return new Promise((resolve, reject) => {\n            this.api\n                .getFileAPI()\n                .getFileExtension(fileId, resolve, () => reject(new Error(GENERIC_EXECUTE_MESSAGE_KEY)));\n        });\n    };\n\n    /**\n     * Uses Box Edit to check if Box Tools is installed and reachable\n     *\n     * @return {Promise}\n     */\n    isBoxEditAvailable = (): Promise<any> => {\n        return this.api\n            .getBoxEditAPI()\n            .checkBoxEditAvailability()\n            .catch(() => {\n                throw new Error(BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY);\n            });\n    };\n\n    /**\n     * Uses Box Edit to check if Box Tools can open a given file type\n     *\n     * @param {String} extension - A file extension\n     * @return {Promise}\n     */\n    canOpenExtensionWithBoxEdit = ({ extension = '' }: Integration): Promise<any> => {\n        return this.api\n            .getBoxEditAPI()\n            .getAppForExtension(extension)\n            .catch(() => {\n                throw new Error(BLACKLISTED_ERROR_MESSAGE_KEY);\n            });\n    };\n\n    /**\n     * Handles a fetch error for the open_with_integrations and app_integrations endpoints\n     *\n     * @param {Error} error - An axios fetch error\n     * @return {void}\n     */\n    fetchErrorHandler = (error: any, code: string): void => {\n        this.props.onError(error, code, { error });\n        this.setState({ fetchError: error, isLoading: false });\n    };\n\n    /**\n     * Click handler when an integration is clicked\n     *\n     * @private\n     * @param {string} appIntegrationId - An app integration ID\n     * @param {string} displayName - The integration's display name\n     * @return {void}\n     */\n    onIntegrationClick = ({ appIntegrationId, displayName }: Integration): void => {\n        const { fileId }: Props = this.props;\n        const isBoxEditIntegration = this.isBoxEditIntegration(appIntegrationId);\n        this.api\n            .getAppIntegrationsAPI(false)\n            .execute(\n                appIntegrationId,\n                fileId,\n                this.executeIntegrationSuccessHandler.bind(this, appIntegrationId),\n                isBoxEditIntegration ? this.executeBoxEditErrorHandler : this.executeIntegrationErrorHandler,\n            );\n\n        if (isBoxEditIntegration) {\n            // No window management is required when using Box Edit.\n            return;\n        }\n\n        // These window features will open the new window directly on top of the current window at the same\n        const windowFeatures = `left=${window.screenX},top=${window.screenY},height=${window.outerHeight},width=${window.innerWidth},toolbar=0`;\n\n        // window.open() is immediately invoked to avoid popup-blockers\n        // The name is included to be the target of a form if the integration is a POST integration.\n        // A uniqueid is used to force the browser to open a new tab every time, while still allowing\n        // a form to reference a given tab.\n        this.integrationWindow = this.window.open('', `${uniqueid(appIntegrationId)}`, windowFeatures);\n        this.integrationWindow.document.title = displayName;\n        this.integrationWindow.onunload = this.cleanupIntegrationWindow;\n\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: true,\n            shouldRenderErrorIntegrationPortal: false,\n        });\n    };\n\n    /**\n     * cleans up the portal UI when a tab is closed so that we can remount the component later.\n     *\n     * @private\n     * @return {void}\n     */\n    cleanupIntegrationWindow = () => {\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n            shouldRenderErrorIntegrationPortal: false,\n        });\n    };\n\n    /**\n     * Opens the integration in a new tab based on the API data\n     *\n     * @private\n     * @param {string} integrationId - The integration that was executed\n     * @param {ExecuteAPI} executeData - API response on how to open an executed integration\n\n     * @return {void}\n     */\n    executeIntegrationSuccessHandler = (integrationId: string, executeData: ExecuteAPI): void => {\n        if (this.isBoxEditIntegration(integrationId)) {\n            this.executeBoxEditSuccessHandler(integrationId, executeData);\n        } else {\n            this.executeOnlineIntegrationSuccessHandler(executeData);\n        }\n        this.onExecute(integrationId);\n    };\n\n    /**\n     * Opens the file via a Partner Integration\n     *\n     * @private\n     * @param {ExecuteAPI} executeData - API response on how to open an executed integration\n\n     * @return {void}\n     */\n    executeOnlineIntegrationSuccessHandler = (executeData: ExecuteAPI): void => {\n        const { method, url } = executeData;\n        switch (method) {\n            case HTTP_POST:\n                this.setState({ executePostData: executeData });\n                break;\n            case HTTP_GET:\n                if (!this.integrationWindow) {\n                    return;\n                }\n\n                // Prevents abuse of window.opener\n                // see here for more details: https://mathiasbynens.github.io/rel-noopener/\n                this.integrationWindow.location = url;\n                this.integrationWindow.opener = null;\n                break;\n            default:\n                this.executeIntegrationErrorHandler(\n                    Error(UNSUPPORTED_INVOCATION_METHOD_TYPE),\n                    ERROR_CODE_EXECUTE_INTEGRATION,\n                );\n        }\n\n        this.integrationWindow = null;\n    };\n\n    /**\n     * Opens the file via Box Edit\n     *\n     * @private\n     * @param {string} url - Integration execution URL\n\n     * @return {void}\n     */\n    executeBoxEditSuccessHandler = (integrationId: string, { url }: ExecuteAPI): void => {\n        const { fileId, token, onError } = this.props;\n        const queryParams = queryString.parse(url);\n        const authCode = queryParams[AUTH_CODE];\n        const isFileScoped = this.isBoxEditSFCIntegration(integrationId);\n\n        this.api\n            .getBoxEditAPI()\n            .openFile(fileId, {\n                data: {\n                    auth_code: authCode,\n                    token,\n                    token_scope: isFileScoped ? TYPE_FILE : TYPE_FOLDER,\n                },\n            })\n            .catch(error => {\n                onError(error, ERROR_CODE_EXECUTE_INTEGRATION, { error });\n            });\n    };\n\n    /**\n     * Clears state after a form has been submitted\n     *\n     * @private\n     * @return {void}\n     */\n    onExecuteFormSubmit = (): void => {\n        this.setState({ executePostData: null });\n    };\n\n    /**\n     * Calls the onExecute prop\n     *\n     * @private\n     * @param {string} integrationID - The integration that was executed\n     * @return {void}\n     */\n    onExecute(integrationID: string) {\n        this.props.onExecute(integrationID);\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n        });\n    }\n\n    /**\n     * Handles execution related errors\n     *\n     * @private\n     * @param {Error} error - Error object\n     * @return {void}\n     */\n    executeIntegrationErrorHandler = (error: any, code: string): void => {\n        this.props.onError(error, code, { error });\n        // eslint-disable-next-line no-console\n        console.error(error);\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n            shouldRenderErrorIntegrationPortal: true,\n        });\n    };\n\n    /**\n     * Handles Box Edit execution related errors\n     *\n     * @private\n     * @param {Error} error - Error object\n     * @return {void}\n     */\n    executeBoxEditErrorHandler = (error: any): void => {\n        this.props.onError(error);\n        // eslint-disable-next-line no-console\n        console.error(error);\n    };\n\n    /**\n     * Gets a display integration, if available, for the Open With button\n     *\n     * @private\n     * @return {?Integration}\n     */\n    getDisplayIntegration(): ?Integration {\n        const { integrations }: State = this.state;\n        // We only consider an integration a display integration if is the only integration in our state\n        return Array.isArray(integrations) && integrations.length === 1 ? integrations[0] : null;\n    }\n\n    /**\n     * Render the Open With element\n     *\n     * @private\n     * @inheritdoc\n     * @return {Element}\n     */\n    render() {\n        const { language, messages: intlMessages, dropdownAlignment }: Props = this.props;\n        const {\n            fetchError,\n            isLoading,\n            integrations,\n            executePostData,\n            shouldRenderLoadingIntegrationPortal,\n            shouldRenderErrorIntegrationPortal,\n        }: State = this.state;\n\n        const className = classNames('be bcow', this.props.className);\n        const displayIntegration = this.getDisplayIntegration();\n        const numIntegrations = integrations ? integrations.length : 0;\n\n        return (\n            <Internationalize language={language} messages={intlMessages}>\n                <div className={className} data-testid=\"bcow-content\" id={this.id}>\n                    {numIntegrations <= 1 ? (\n                        <OpenWithButton\n                            displayIntegration={displayIntegration}\n                            error={fetchError}\n                            isLoading={isLoading}\n                            onClick={this.onIntegrationClick}\n                        />\n                    ) : (\n                        <OpenWithDropdownMenu\n                            dropdownAlignment={dropdownAlignment}\n                            integrations={((integrations: any): Array<Integration>)}\n                            onClick={this.onIntegrationClick}\n                        />\n                    )}\n                    {(shouldRenderLoadingIntegrationPortal || shouldRenderErrorIntegrationPortal) && (\n                        <IntegrationPortalContainer\n                            hasError={shouldRenderErrorIntegrationPortal}\n                            integrationWindow={this.integrationWindow}\n                        />\n                    )}\n                    {executePostData && (\n                        <ExecuteForm\n                            executePostData={executePostData}\n                            id={this.id}\n                            onSubmit={this.onExecuteFormSubmit}\n                            windowName={this.integrationWindow && this.integrationWindow.name}\n                        />\n                    )}\n                </div>\n            </Internationalize>\n        );\n    }\n}\n\nexport type ContentOpenWithProps = Props & ExternalProps;\nexport { ContentOpenWith as ContentOpenWithComponent };\nexport default withErrorBoundary(ORIGIN_OPEN_WITH, OpenWithFallbackButton)(ContentOpenWith);\n"],"sourceRoot":""}