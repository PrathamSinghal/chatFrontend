{"version":3,"sources":["../../../src/utils/datetime.js","../../../../src/components/inline-error/InlineError.js","../../../../src/components/primary-button/PrimaryButton.tsx","../../../../src/components/inline-notice/InlineNotice.js","../../../../src/components/inline-notice/index.js","../../../../src/icons/general/IconEdit.tsx","../node_modules/react-textarea-autosize/dist/react-textarea-autosize.esm.browser.js","../../../../../src/elements/content-sidebar/skills/status/Status.js","../../../../src/icons/general/IconCopy.tsx","../../../../src/icons/general/IconExpand.tsx","../../../../src/icons/general/IconCollapse.tsx","../../../../../src/elements/content-sidebar/skills/transcript/timeSliceUtils.js","../../../../../src/elements/content-sidebar/skills/transcript/ReadOnlyTranscriptRow.js","../../../../../src/elements/content-sidebar/skills/transcript/EditingTranscriptRow.js","../../../../../src/elements/content-sidebar/skills/transcript/TranscriptRow.js","../../../../../src/elements/content-sidebar/skills/transcript/Transcript.js","../../../src/utils/download.js","../../../../../src/elements/content-sidebar/skills/keywords/keywordUtils.js","../../../../../src/elements/content-sidebar/skills/keywords/EditableKeywords.js","../../../../src/components/pill-cloud/PillCloud.js","../../../../src/icons/general/IconTrackNext.tsx","../../../../src/icons/general/IconTrackPrevious.tsx","../../../../../src/elements/content-sidebar/skills/timeline/Timeslice.js","../../../../../src/elements/content-sidebar/skills/timeline/Timeline.js","../../../../../src/elements/content-sidebar/skills/keywords/ReadOnlyKeywords.js","../../../../../src/elements/content-sidebar/skills/keywords/Keywords.js","../../../../src/icons/general/IconMinus.tsx","../../../../../src/elements/content-sidebar/skills/faces/Face.js","../../../../../src/elements/content-sidebar/skills/faces/Faces.js","../../../../../src/elements/content-sidebar/skills/SidebarSkillsCard.js","../../../../../src/elements/content-sidebar/skills/SidebarSkills.js","../../../../src/elements/content-sidebar/SkillsSidebar.js"],"names":["MILLISECONDS_PER_DAY","MILLISECONDS_PER_MINUTE","RE_ISO8601_DATE","ISO8601_DATETIME","ISO8601_MILLISECONDS","ISO8601_TIMEZONE","ISO8601_Z_FMT","ISO8601_SHORT_FMT","ISO8601_MEDIUM_FMT","ISO8601_LONG_FMT","convertToDate","dateValue","Date","isToday","toDateString","isYesterday","getTime","isCurrentMonth","getMonth","isCurrentYear","getFullYear","formatTime","seconds","h","Math","floor","m","s","hour","toString","sec","min","addTime","timeToAdd","convertDateToUnixMidnightTime","date","getTimezoneOffset","isValidDate","isNaN","convertISOStringToUTCDate","isoString","utcDate","test","parseDate","split","dateTime","milliseconds","timeZone","substr","convertISOStringtoRFC3339String","utcTime","timezoneOffsetInMins","InlineError","props","type","PrimaryButton","children","className","rest","InlineNotice","title","classNames","IconEdit","color","bdlGray65","height","width","viewBox","d","fill","isIE","document","documentElement","currentStyle","HIDDEN_TEXTAREA_STYLE","visibility","overflow","position","top","right","SIZING_STYLE","computedStyleCache","hiddenTextarea","createElement","forceHiddenStyles","node","Object","keys","forEach","key","style","setProperty","calculateNodeHeight","uiTextNode","uid","useCache","minRows","maxRows","parentNode","body","appendChild","nodeStyling","window","getComputedStyle","sizingStyle","reduce","obj","name","getPropertyValue","boxSizing","parseFloat","paddingSize","borderSize","nodeInfo","calculateNodeStyling","value","placeholder","minHeight","Infinity","maxHeight","scrollHeight","singleRowHeight","valueRowCount","max","rowCount","setAttribute","noop","TextareaAutosize","_React$Component","_this","call","this","_onRef","_ref","inputRef","current","_onChange","event","_controlled","_resizeComponent","onChange","_assertThisInitialized","callback","nodeHeight","_uid","useCacheForDOMMeasurements","state","setState","undefined","_resizeLock","_inheritsLoose","_proto","prototype","render","_this$props","onHeightChange","_objectWithoutPropertiesLoose","_extends","ref","componentDidMount","_this2","_resizeListener","addEventListener","componentDidUpdate","prevProps","prevState","componentWillUnmount","removeEventListener","purgeCache","Component","defaultProps","Status","card","status","code","message","localizedMessage","messages","skillUnknownError","SKILLS_ERROR_INVALID_FILE_SIZE","skillInvalidFileSizeError","SKILLS_ERROR_INVALID_FILE_FORMAT","skillInvalidFileExtensionError","SKILLS_ERROR_EXTERNAL_AUTH","SKILLS_ERROR_BILLING","SKILLS_ERROR_INVOCATIONS","SKILLS_ERROR_UNKNOWN","SKILLS_ERROR_FILE_PROCESSING","skillFileProcessingError","SKILLS_STATUS_PENDING","skillPendingStatus","SKILLS_STATUS_INVOKED","skillInvokedStatus","IconCopy","IconExpand","IconCollapse","isValidStartTime","timeslice","start","isValidTimeSlice","timeslices","Array","isArray","ReadOnlyTranscriptRow","time","text","onClick","interactionTarget","PlainButton","EditingTranscriptRow","onSave","onCancel","Button","SKILLS_TARGETS","TRANSCRIPTS","EDIT_CANCEL","cancel","EDIT_SAVE","save","TranscriptRow","appears","isEditing","timeSlice","length","Transcript","isEditingIndex","newTranscriptText","isCollapsed","isLoading","accumulator","index","isEditingRow","transcriptText","EDIT_TEXT","TRANSCRIPT","entries","onSkillChange","entry","replacement","replaced","currentTarget","previewSegment","copiedClass","string","textarea","display","select","execCommand","removeChild","copy","transcriptReducer","copyBtn","classList","add","setTimeout","remove","btn","wasEditing","getViewer","viewer","isValid","play","isEditable","hasEntries","hasManyEntries","editBtnClassName","contentClassName","expandCollapseMessage","expand","collapse","LoadingIndicatorWrapper","Tooltip","COPY","getDOMRef","copyBtnRef","copyTranscript","bdlGray50","EXPAND","toggleExpandCollapse","editLabel","EDIT","toggleIsEditing","transcriptEdit","map","transcriptMapper","skillNoInfoFoundError","React","getPills","keyword","displayText","EditableKeywords","option","onDelete","keywords","isInCompositionMode","onBlur","onAdd","pills","prevKeywords","PillSelector","onCompositionEnd","onCompositionStart","onInput","onKeyDown","onPaste","onRemove","selectedOptions","KEYWORDS","PillCloud","options","onSelect","buttonProps","find","op","isEqual","IconTrackNext","IconTrackPrevious","Timeslice","end","duration","startLeft","round","minEnding","ending","left","Timeline","timeSliceIndex","playSegment","incr","newIndex","TIMELINE","PREVIOUS","previousSegment","NEXT","nextSegment","ReadOnlyselecteds","selectedIndex","pill","selected","pillCloudProps","INTERACTION_TARGET","SELECT","Keywords","transcript","adds","locations","regex","RegExp","push","slice","removes","addedIndex","findIndex","added","splice","resetState","hasError","hasKeywords","filter","face","includes","concat","editClassName","sidebarSkillsErrorTitle","sidebarSkillsErrorContent","PureComponent","IconMinus","fillRule","Face","isAnyFaceSelected","isCurrentFaceSelected","isFaceSelected","faceClassName","FACES","FACE","alt","src","image_url","COLOR_WHITE","DELETE","IconClose","COLOR_999","Faces","faces","hasFaces","SidebarSkillsCard","cards","skill_card_type","SKILLS_KEYWORD","SKILLS_TRANSCRIPT","SKILLS_TIMELINE","SKILLS_FACE","SKILLS_STATUS","SidebarSkills","file","errors","permissions","isSkillEditable","can_upload","error","cardId","id","uniqueId","isValidSkillsCard","CARD","getCardInteractionTarget","skill_card_title","defaultKey","defaultMessage","defaultSkill","faceSkill","transcriptSkill","topicsSkill","statusSkill","getCardTitle","SidebarSection","isOpen","args","MARK_NAME_JS_READY","ORIGIN_SKILLS_SIDEBAR","EVENT_JS_READY","mark","SkillsSidebar","updatePreviewTranscript","getPreview","preview","transcriptCard","loadAutoGeneratedCaptions","addListener","loadedViewer","updatedCards","clone","replaces","api","path","ops","getProp","FIELD_PERMISSIONS_CAN_UPLOAD","idx","deletes","removed","sort","a","b","getMetadataAPI","updateSkills","onSaveSuccessHandler","onSaveErrorHandler","logger","onReadyMetric","endMarkName","getSkills","fetchSkillsSuccessCallback","prevRefreshIdentity","refreshIdentity","elementId","SidebarContent","sidebarView","SIDEBAR_VIEW_SKILLS","sidebarSkillsTitle","LoadingIndicator","flow","withLogger","withErrorBoundary","withAPIContext"],"mappings":"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","file":"static/js/12.e61e8a27.chunk.js","sourcesContent":["/**\n * @flow\n * @file Date and time utilities\n * @author Box\n */\nimport isNaN from 'lodash/isNaN';\n\nconst MILLISECONDS_PER_SECOND = 1000;\n// 24 hours * 60 minutes * 60 seconds * 1000 milliseconds\nconst MILLISECONDS_PER_DAY = 24 * 60 * 60 * MILLISECONDS_PER_SECOND;\n// 60 sec * 1000\nconst MILLISECONDS_PER_MINUTE = 60 * MILLISECONDS_PER_SECOND;\n\n/**\n * RegExp matcher for acceptable ISO 8601 date formats w/ timezone (see below)\n * Capture groups structured as follows:\n * 1) the date/time portion (2018-06-13T00:00:00.000)\n * 2) the milliseconds (if matched)\n * 3) the timezone portion (e.g., Z, +03, -0400, +05:00)\n * 4) the Z format for timezone (if matched)\n * 5) the short format for timezone (if matched)\n * 6) the colon-less format for timezone (if matched)\n * 7) the colon long format for timezone (if matched)\n */\nconst RE_ISO8601_DATE = /^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{1,3})?)?((Z$)|(?:[+-](?:([0-2]\\d$)|([0-2]\\d(?:00|30)$)|([0-2]\\d:(?:00|30)$))))$/;\nconst ISO8601_DATETIME: 1 = 1;\nconst ISO8601_MILLISECONDS: 2 = 2;\nconst ISO8601_TIMEZONE: 3 = 3;\nconst ISO8601_Z_FMT: 4 = 4;\nconst ISO8601_SHORT_FMT: 5 = 5;\nconst ISO8601_MEDIUM_FMT: 6 = 6;\nconst ISO8601_LONG_FMT: 7 = 7;\n\n/**\n * Helper to normalize a date value to a date object\n * @param dateValue - Date number, string, or object\n * @returns {date} the normalized date object\n */\nfunction convertToDate(dateValue: number | string | Date): Date {\n    return dateValue instanceof Date ? dateValue : new Date(dateValue);\n}\n\n/**\n * Converts an integer value in seconds to milliseconds.\n * @param {number} seconds - The value in seconds\n * @returns {number} the value in milliseconds\n */\nfunction convertToMs(seconds: number): number {\n    return seconds * MILLISECONDS_PER_SECOND;\n}\n\n/**\n * Checks whether the given date value (in unix milliseconds) is today.\n * @param {number|string|Date} dateValue - Date object or integer representing the number of milliseconds since 1/1/1970 UTC\n * @returns {boolean} whether the given value is today\n */\nfunction isToday(dateValue: number | string | Date): boolean {\n    return new Date().toDateString() === convertToDate(dateValue).toDateString();\n}\n\n/**\n * Checks whether the given date value (in unix milliseconds) is yesterday.\n * @param {number|string|Date} dateValue - Date object or integer or representing the number of milliseconds since 1/1/1970 UTC\n * @returns {boolean} whether the given value is yesterday\n */\nfunction isYesterday(dateValue: number | string | Date): boolean {\n    return isToday(convertToDate(dateValue).getTime() + MILLISECONDS_PER_DAY);\n}\n\n/**\n * Checks whether the given date value (in unix milliseconds) is tomorrow.\n * @param {number|string|Date} dateValue - Date object or integer or representing the number of milliseconds since 1/1/1970 UTC\n * @returns {boolean} whether the given value is tomorrow\n */\nfunction isTomorrow(dateValue: number | string | Date): boolean {\n    return isToday(convertToDate(dateValue).getTime() - MILLISECONDS_PER_DAY);\n}\n\n/**\n * Checks whether the given date value (in unix milliseconds) is in the current month.\n * @param {number|string|Date} dateValue - Date object or integer representing the number of milliseconds since 1/1/1970 UTC\n * @returns {boolean} whether the given value is in the current month\n */\nfunction isCurrentMonth(dateValue: number | string | Date): boolean {\n    return new Date().getMonth() === convertToDate(dateValue).getMonth();\n}\n\n/**\n * Checks whether the given date value (in unix milliseconds) is in the current year.\n * @param {number|string|Date} dateValue - Date object or integer representing the number of milliseconds since 1/1/1970 UTC\n * @returns {boolean} whether the given value is in the current year\n */\nfunction isCurrentYear(dateValue: number | string | Date): boolean {\n    return new Date().getFullYear() === convertToDate(dateValue).getFullYear();\n}\n\n/**\n * Formats a number of seconds as a time string\n *\n * @param {number} seconds - seconds\n * @return {string} a string formatted like 3:57:35\n */\nfunction formatTime(seconds: number): string {\n    const h = Math.floor(seconds / 3600);\n    const m = Math.floor((seconds % 3600) / 60);\n    const s = Math.floor((seconds % 3600) % 60);\n    const hour = h > 0 ? `${h.toString()}:` : '';\n    const sec = s < 10 ? `0${s.toString()}` : s.toString();\n    let min = m.toString();\n    if (h > 0 && m < 10) {\n        min = `0${min}`;\n    }\n    return `${hour}${min}:${sec}`;\n}\n\n/**\n * Adds time to a given dateValue\n *\n * @param {number|Date} dateValue - date or integer value to add time to\n * @param {number} timeToAdd - amount of time to add in ms\n * @return {number|Date} the modified date or integer\n */\nfunction addTime(dateValue: number | Date, timeToAdd: number): number | Date {\n    if (dateValue instanceof Date) {\n        return new Date(dateValue.getTime() + timeToAdd);\n    }\n\n    return dateValue + timeToAdd;\n}\n\n/**\n * Will convert\n *      2018-06-13T07:00:00.000Z\n * to\n *      2018-06-13T00:00:00.000Z\n *\n * This is the opposite of convertISOStringToUTCDate\n *\n * @param {Date} date\n * @return {number}\n */\nfunction convertDateToUnixMidnightTime(date: Date) {\n    // date is localized to 00:00:00 at system/browser timezone\n    const utcUnixTimeInMs = date.getTime();\n\n    // timezone an integer offset; minutes behind GMT\n    // we use the browser timezone offset instead of the user's,\n    // because the datepicker uses the browser to get the \"midnight\"\n    // time in the user's timezone with getTime()\n    const timezoneOffsetInMins = date.getTimezoneOffset();\n    const timezoneOffsetInMs = timezoneOffsetInMins * MILLISECONDS_PER_MINUTE;\n\n    // we need the unix/epoch time for midnight on the date selected\n    const unixDayMidnightTime = utcUnixTimeInMs - timezoneOffsetInMs;\n    return unixDayMidnightTime;\n}\n\n/**\n * Will check to see if a date object is not valid, according to the browser\n * JS engine.\n *\n * @param {Date} date\n * @return {boolean} whether the date value passes validation\n */\nfunction isValidDate(date: Date): boolean {\n    return !isNaN(date.getTime());\n}\n\n/**\n * Will convert ISO8601-compatible dates (with zone designators)\n *      2018-06-13T00:00:00.000-0500\n *      or\n *      2018-06-13T00:00:00.000-05\n *\n * to\n *      2018-06-13T00:00:00.000-05:00\n *\n * Equivalent formats between the two (e.g., uzing 'Z') will remain unchanged.\n * If the date format cannot be converted, it will pass along the existing value\n * @param {string} isoString\n * @return {string} converted date format, if applicable\n */\nfunction convertISOStringtoRFC3339String(isoString: string): string {\n    // test that the date format inbound is ISO8601-compatible\n    if (RE_ISO8601_DATE.test(isoString)) {\n        // if it is, parse out the timezone part if it's in a longer format\n        // use the capture groups instead of the split result for the datetime and the time zone\n        const parseDate = isoString.split(RE_ISO8601_DATE);\n        let dateTime = parseDate[ISO8601_DATETIME];\n        const milliseconds = parseDate[ISO8601_MILLISECONDS];\n        const timeZone = parseDate[ISO8601_TIMEZONE];\n\n        // add milliseconds if missing, to standardize output\n        if (!milliseconds) {\n            dateTime += '.000';\n        }\n\n        if (parseDate[ISO8601_Z_FMT]) {\n            return isoString;\n        }\n\n        if (parseDate[ISO8601_SHORT_FMT]) {\n            return `${dateTime + timeZone}:00`;\n        }\n\n        if (parseDate[ISO8601_MEDIUM_FMT]) {\n            return `${dateTime + timeZone.substr(0, 3)}:${timeZone.substr(3)}`;\n        }\n\n        if (parseDate[ISO8601_LONG_FMT]) {\n            return isoString;\n        }\n    }\n    return isoString;\n}\n\n/**\n * Will convert\n *      2018-06-13T00:00:00.000Z\n * to\n *      2018-06-13T07:00:00.000Z\n *\n * This is the opposite of convertDateToUnixMidnightTime\n *\n * @param {string} isoString - ISO string in UTC time zone\n */\nfunction convertISOStringToUTCDate(isoString: string): Date {\n    // get date in UTC midnight time\n    const utcDate = new Date(convertISOStringtoRFC3339String(isoString));\n    const utcTime = utcDate.getTime();\n\n    // get browser's timezone\n    const timezoneOffsetInMins = utcDate.getTimezoneOffset();\n    const timezoneOffsetInMs = timezoneOffsetInMins * MILLISECONDS_PER_MINUTE;\n\n    // return date in utc timezone\n    const localizedUnixTimeInMs = utcTime + timezoneOffsetInMs;\n    return new Date(localizedUnixTimeInMs);\n}\n\nexport {\n    convertToDate,\n    convertToMs,\n    convertDateToUnixMidnightTime,\n    convertISOStringToUTCDate,\n    convertISOStringtoRFC3339String,\n    isToday,\n    isTomorrow,\n    isValidDate,\n    isYesterday,\n    isCurrentMonth,\n    isCurrentYear,\n    formatTime,\n    addTime,\n};\n","// @flow\nimport * as React from 'react';\nimport InlineNotice from '../inline-notice';\n\ntype Props = {\n    children: React.Node,\n    className?: string,\n    /** Title of the inline error. */\n    title: React.Node,\n};\n\nconst InlineError = (props: Props) => <InlineNotice {...props} type=\"error\" />;\n\nexport default InlineError;\n","import * as React from 'react';\nimport Button, { ButtonProps } from '../button/Button';\n\nconst PrimaryButton = ({ children, className = '', ...rest }: Partial<ButtonProps>) => (\n    <Button className={`btn-primary ${className}`} {...rest}>\n        {children}\n    </Button>\n);\n\nexport default PrimaryButton;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport type { InlineNoticeType } from '../../common/types/core';\n\ntype Props = {\n    children: React.Node,\n    className?: string,\n    title?: React.Node,\n    type?: InlineNoticeType,\n};\n\nconst InlineNotice = ({ children, className = '', title, type = 'warning', ...rest }: Props) => (\n    <div className={classNames(className, 'inline-alert', 'inline-alert-visible', `inline-alert-${type}`)} {...rest}>\n        {title ? <strong>{title}</strong> : null}\n        <div>{children}</div>\n    </div>\n);\n\nexport default InlineNotice;\n","// @flow\nexport { default } from './InlineNotice';\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\nimport { bdlGray65 } from '../../styles/variables';\n\nimport { Icon } from '../iconTypes';\n\nconst IconEdit = ({ className = '', color = bdlGray65, height = 14, title, width = 14 }: Icon) => (\n    <AccessibleSVG className={`icon-edit ${className}`} height={height} title={title} viewBox=\"0 0 14 14\" width={width}>\n        <path\n            className=\"fill-color\"\n            d=\"M3.21 7.89l6.47-6.48a2 2 0 0 1 2.88 2.78h-.05L6 10.72 3.21 7.89zM2.24 9l2.83 2.83L1.67 13c-.52.18-.79-.1-.62-.61z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconEdit;\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport { createElement, Component } from 'react';\nimport { oneOfType, func, shape, any, number, object, bool, string } from 'prop-types';\n\nvar isIE =  !!document.documentElement.currentStyle ;\nvar HIDDEN_TEXTAREA_STYLE = {\n  'min-height': '0',\n  'max-height': 'none',\n  height: '0',\n  visibility: 'hidden',\n  overflow: 'hidden',\n  position: 'absolute',\n  'z-index': '-1000',\n  top: '0',\n  right: '0'\n};\nvar SIZING_STYLE = ['letter-spacing', 'line-height', 'font-family', 'font-weight', 'font-size', 'font-style', 'tab-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-top', 'padding-right', 'padding-bottom', 'padding-left', 'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width', 'box-sizing'];\nvar computedStyleCache = {};\nvar hiddenTextarea =  document.createElement('textarea');\n\nvar forceHiddenStyles = function forceHiddenStyles(node) {\n  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function (key) {\n    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');\n  });\n};\n\n{\n  hiddenTextarea.setAttribute('tab-index', '-1');\n  hiddenTextarea.setAttribute('aria-hidden', 'true');\n  forceHiddenStyles(hiddenTextarea);\n}\n\nfunction calculateNodeHeight(uiTextNode, uid, useCache, minRows, maxRows) {\n  if (useCache === void 0) {\n    useCache = false;\n  }\n\n  if (minRows === void 0) {\n    minRows = null;\n  }\n\n  if (maxRows === void 0) {\n    maxRows = null;\n  }\n\n  if (hiddenTextarea.parentNode === null) {\n    document.body.appendChild(hiddenTextarea);\n  } // Copy all CSS properties that have an impact on the height of the content in\n  // the textbox\n\n\n  var nodeStyling = calculateNodeStyling(uiTextNode, uid, useCache);\n\n  if (nodeStyling === null) {\n    return null;\n  }\n\n  var paddingSize = nodeStyling.paddingSize,\n      borderSize = nodeStyling.borderSize,\n      boxSizing = nodeStyling.boxSizing,\n      sizingStyle = nodeStyling.sizingStyle; // Need to have the overflow attribute to hide the scrollbar otherwise\n  // text-lines will not calculated properly as the shadow will technically be\n  // narrower for content\n\n  Object.keys(sizingStyle).forEach(function (key) {\n    hiddenTextarea.style[key] = sizingStyle[key];\n  });\n  forceHiddenStyles(hiddenTextarea);\n  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || 'x';\n  var minHeight = -Infinity;\n  var maxHeight = Infinity;\n  var height = hiddenTextarea.scrollHeight;\n\n  if (boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    height = height + borderSize;\n  } else if (boxSizing === 'content-box') {\n    // remove padding, since height = content\n    height = height - paddingSize;\n  } // measure height of a textarea with a single row\n\n\n  hiddenTextarea.value = 'x';\n  var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize; // Stores the value's rows count rendered in `hiddenTextarea`,\n  // regardless if `maxRows` or `minRows` props are passed\n\n  var valueRowCount = Math.floor(height / singleRowHeight);\n\n  if (minRows !== null) {\n    minHeight = singleRowHeight * minRows;\n\n    if (boxSizing === 'border-box') {\n      minHeight = minHeight + paddingSize + borderSize;\n    }\n\n    height = Math.max(minHeight, height);\n  }\n\n  if (maxRows !== null) {\n    maxHeight = singleRowHeight * maxRows;\n\n    if (boxSizing === 'border-box') {\n      maxHeight = maxHeight + paddingSize + borderSize;\n    }\n\n    height = Math.min(maxHeight, height);\n  }\n\n  var rowCount = Math.floor(height / singleRowHeight);\n  return {\n    height: height,\n    minHeight: minHeight,\n    maxHeight: maxHeight,\n    rowCount: rowCount,\n    valueRowCount: valueRowCount\n  };\n}\n\nfunction calculateNodeStyling(node, uid, useCache) {\n  if (useCache === void 0) {\n    useCache = false;\n  }\n\n  if (useCache && computedStyleCache[uid]) {\n    return computedStyleCache[uid];\n  }\n\n  var style = window.getComputedStyle(node);\n\n  if (style === null) {\n    return null;\n  }\n\n  var sizingStyle = SIZING_STYLE.reduce(function (obj, name) {\n    obj[name] = style.getPropertyValue(name);\n    return obj;\n  }, {});\n  var boxSizing = sizingStyle['box-sizing']; // probably node is detached from DOM, can't read computed dimensions\n\n  if (boxSizing === '') {\n    return null;\n  } // IE (Edge has already correct behaviour) returns content width as computed width\n  // so we need to add manually padding and border widths\n\n\n  if (isIE && boxSizing === 'border-box') {\n    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(style['border-right-width']) + parseFloat(style['border-left-width']) + parseFloat(style['padding-right']) + parseFloat(style['padding-left']) + 'px';\n  }\n\n  var paddingSize = parseFloat(sizingStyle['padding-bottom']) + parseFloat(sizingStyle['padding-top']);\n  var borderSize = parseFloat(sizingStyle['border-bottom-width']) + parseFloat(sizingStyle['border-top-width']);\n  var nodeInfo = {\n    sizingStyle: sizingStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize,\n    boxSizing: boxSizing\n  };\n\n  if (useCache) {\n    computedStyleCache[uid] = nodeInfo;\n  }\n\n  return nodeInfo;\n}\n\nvar purgeCache = function purgeCache(uid) {\n  delete computedStyleCache[uid];\n};\n\nvar noop = function noop() {};\n\nvar uid = 0;\n\nvar TextareaAutosize =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TextareaAutosize, _React$Component);\n\n  function TextareaAutosize(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n\n    _this._onRef = function (node) {\n      _this._ref = node;\n      var inputRef = _this.props.inputRef;\n\n      if (typeof inputRef === 'function') {\n        inputRef(node);\n        return;\n      }\n\n      inputRef.current = node;\n    };\n\n    _this._onChange = function (event) {\n      if (!_this._controlled) {\n        _this._resizeComponent();\n      }\n\n      _this.props.onChange(event, _assertThisInitialized(_this));\n    };\n\n    _this._resizeComponent = function (callback) {\n      if (callback === void 0) {\n        callback = noop;\n      }\n\n      var nodeHeight = calculateNodeHeight(_this._ref, _this._uid, _this.props.useCacheForDOMMeasurements, _this.props.minRows, _this.props.maxRows);\n\n      if (nodeHeight === null) {\n        callback();\n        return;\n      }\n\n      var height = nodeHeight.height,\n          minHeight = nodeHeight.minHeight,\n          maxHeight = nodeHeight.maxHeight,\n          rowCount = nodeHeight.rowCount,\n          valueRowCount = nodeHeight.valueRowCount;\n      _this.rowCount = rowCount;\n      _this.valueRowCount = valueRowCount;\n\n      if (_this.state.height !== height || _this.state.minHeight !== minHeight || _this.state.maxHeight !== maxHeight) {\n        _this.setState({\n          height: height,\n          minHeight: minHeight,\n          maxHeight: maxHeight\n        }, callback);\n\n        return;\n      }\n\n      callback();\n    };\n\n    _this.state = {\n      height: props.style && props.style.height || 0,\n      minHeight: -Infinity,\n      maxHeight: Infinity\n    };\n    _this._uid = uid++;\n    _this._controlled = props.value !== undefined;\n    _this._resizeLock = false;\n    return _this;\n  }\n\n  var _proto = TextareaAutosize.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _inputRef = _this$props.inputRef,\n        _maxRows = _this$props.maxRows,\n        _minRows = _this$props.minRows,\n        _onHeightChange = _this$props.onHeightChange,\n        _useCacheForDOMMeasurements = _this$props.useCacheForDOMMeasurements,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"inputRef\", \"maxRows\", \"minRows\", \"onHeightChange\", \"useCacheForDOMMeasurements\"]);\n\n    props.style = _extends({}, props.style, {\n      height: this.state.height\n    });\n    var maxHeight = Math.max(props.style.maxHeight || Infinity, this.state.maxHeight);\n\n    if (maxHeight < this.state.height) {\n      props.style.overflow = 'hidden';\n    }\n\n    return createElement(\"textarea\", _extends({}, props, {\n      onChange: this._onChange,\n      ref: this._onRef\n    }));\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    this._resizeComponent(); // Working around Firefox bug which runs resize listeners even when other JS is running at the same moment\n    // causing competing rerenders (due to setState in the listener) in React.\n    // More can be found here - facebook/react#6324\n\n\n    this._resizeListener = function () {\n      if (_this2._resizeLock) {\n        return;\n      }\n\n      _this2._resizeLock = true;\n\n      _this2._resizeComponent(function () {\n        _this2._resizeLock = false;\n      });\n    };\n\n    window.addEventListener('resize', this._resizeListener);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (prevProps !== this.props) {\n      this._resizeComponent();\n    }\n\n    if (this.state.height !== prevState.height) {\n      this.props.onHeightChange(this.state.height, this);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('resize', this._resizeListener);\n    purgeCache(this._uid);\n  };\n\n  return TextareaAutosize;\n}(Component);\n\nTextareaAutosize.defaultProps = {\n  inputRef: noop,\n  onChange: noop,\n  onHeightChange: noop,\n  useCacheForDOMMeasurements: false\n};\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes = {\n  inputRef: oneOfType([func, shape({\n    current: any\n  })]),\n  maxRows: number,\n  minRows: number,\n  onChange: func,\n  onHeightChange: func,\n  style: object,\n  useCacheForDOMMeasurements: bool,\n  value: string\n} : void 0;\n\nexport default TextareaAutosize;\n","/**\n * @flow\n * @file Status Skill Card component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../common/messages';\nimport {\n    SKILLS_ERROR_EXTERNAL_AUTH,\n    SKILLS_ERROR_BILLING,\n    SKILLS_ERROR_UNKNOWN,\n    SKILLS_ERROR_INVOCATIONS,\n    SKILLS_ERROR_FILE_PROCESSING,\n    SKILLS_ERROR_INVALID_FILE_SIZE,\n    SKILLS_ERROR_INVALID_FILE_FORMAT,\n    SKILLS_STATUS_PENDING,\n    SKILLS_STATUS_INVOKED,\n} from '../../../../constants';\nimport type { SkillCard, SkillCardLocalizableType } from '../../../../common/types/skills';\n\ntype Props = {\n    card: SkillCard,\n};\n\nconst Status = ({ card }: Props) => {\n    const { status = {} }: SkillCard = card;\n    const { code, message }: SkillCardLocalizableType = status;\n    let localizedMessage = messages.skillUnknownError;\n\n    switch (code) {\n        case SKILLS_ERROR_INVALID_FILE_SIZE:\n            localizedMessage = messages.skillInvalidFileSizeError;\n            break;\n        case SKILLS_ERROR_INVALID_FILE_FORMAT:\n            localizedMessage = messages.skillInvalidFileExtensionError;\n            break;\n        case SKILLS_ERROR_EXTERNAL_AUTH:\n        case SKILLS_ERROR_BILLING:\n        case SKILLS_ERROR_INVOCATIONS:\n        case SKILLS_ERROR_UNKNOWN:\n            localizedMessage = messages.skillUnknownError;\n            break;\n        case SKILLS_ERROR_FILE_PROCESSING:\n            localizedMessage = messages.skillFileProcessingError;\n            break;\n        case SKILLS_STATUS_PENDING:\n            localizedMessage = messages.skillPendingStatus;\n            break;\n        case SKILLS_STATUS_INVOKED:\n            localizedMessage = messages.skillInvokedStatus;\n            break;\n        default:\n            if (message) {\n                return message;\n            }\n    }\n\n    return <FormattedMessage {...localizedMessage} />;\n};\n\nexport default Status;\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconCopy = ({ className = '', color = '#999', height = 14, title, width = 14 }: Icon) => (\n    <AccessibleSVG className={`icon-copy ${className}`} height={height} title={title} viewBox=\"0 0 14 14\" width={width}>\n        <path\n            className=\"fill-color\"\n            d=\"M1 11a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h9a1 1 0 0 1 0 2H2v8a1 1 0 0 1-1 1z\"\n            fill={color}\n        />\n        <path\n            className=\"fill-color\"\n            d=\"M13 3H3v10a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zm-3 8H7a1 1 0 0 1 0-2h3a1 1 0 0 1 0 2zm0-3H7a1 1 0 0 1 0-2h3a1 1 0 0 1 0 2z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconCopy;\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconExpand = ({ className = '', color = '#979797', height = 13, title, width = 13 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-expand ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 13 13\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            d=\"M12 0H6a1 1 0 0 0 0 2h5v5a1 1 0 0 0 2 0V1a1 1 0 0 0-1-1zM7 11H2V6a1 1 0 0 0-2 0v6a1 1 0 0 0 1 1h6a1 1 0 0 0 0-2z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconExpand;\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconCollapse = ({ className = '', color = '#979797', height = 13, title, width = 13 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-collapse ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 13 13\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            d=\"M8 6h4a1 1 0 0 0 0-2H9V1a1 1 0 0 0-2 0v4a1 1 0 0 0 1 1zM1 9h3v3a1 1 0 0 0 2 0V8a1 1 0 0 0-1-1H1a1 1 0 0 0 0 2z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconCollapse;\n","/**\n * @flow\n * @file Transcript utils\n * @author Box\n */\nimport type { SkillCardEntryTimeSlice } from '../../../../common/types/skills';\n\n/**\n * Returns true if there is a valid start time\n *\n * @param {SkillCardEntryTimeSlice} timeslices - skill entry time slice\n * @return {boolean} if there is a valid start time\n */\nconst isValidStartTime = (timeslice: SkillCardEntryTimeSlice): boolean =>\n    !!timeslice && typeof timeslice.start === 'number';\n\n/**\n * Returns true if there is a valid time slice with valid start time\n *\n * @param {SkillCardEntryTimeSlice[]} timeslices - skill entry time slice\n * @return {boolean} if it is a valid time slice\n */\nconst isValidTimeSlice = (timeslices?: SkillCardEntryTimeSlice[]): boolean =>\n    Array.isArray(timeslices) && isValidStartTime(timeslices[0]);\n\nexport { isValidTimeSlice, isValidStartTime };\n","/**\n * @flow\n * @file Read only transcript row component\n * @author Box\n */\n\nimport * as React from 'react';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\n\ntype Props = {\n    interactionTarget: string,\n    onClick: Function,\n    text?: string,\n    time?: string,\n};\n\nconst ReadOnlyTranscriptRow = ({ time, text = '', onClick, interactionTarget }: Props) => (\n    <PlainButton className=\"be-transcript-row\" data-resin-target={interactionTarget} onClick={onClick} type=\"button\">\n        {time && <div className=\"be-transcript-time\">{time}</div>}\n        <div className=\"be-transcript-text\">{text}</div>\n    </PlainButton>\n);\n\nexport default ReadOnlyTranscriptRow;\n","/**\n * @flow\n * @file Editable transcript row component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport Button from '../../../../components/button/Button';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport './EditingTranscriptRow.scss';\n\ntype Props = {\n    onCancel: Function,\n    onChange: Function,\n    onSave: Function,\n    text?: string,\n    time?: string,\n};\n\nconst EditingTranscriptRow = ({ time, text = '', onSave, onCancel, onChange }: Props) => (\n    <div className=\"be-transcript-row be-transcript-editing-row\">\n        {time && <div className=\"be-transcript-time\">{time}</div>}\n        <div className=\"be-transcript-text\">\n            <TextareaAutosize maxRows={10} onChange={onChange} value={text} />\n            <div className=\"be-transcript-buttons\">\n                <Button data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EDIT_CANCEL} onClick={onCancel} type=\"button\">\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n                <PrimaryButton data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EDIT_SAVE} onClick={onSave} type=\"button\">\n                    <FormattedMessage {...messages.save} />\n                </PrimaryButton>\n            </div>\n        </div>\n    </div>\n);\n\nexport default EditingTranscriptRow;\n","/**\n * @flow\n * @file Transcript row component\n * @author Box\n */\n\nimport React from 'react';\nimport { formatTime } from '../../../../utils/datetime';\nimport ReadOnlyTranscriptRow from './ReadOnlyTranscriptRow';\nimport EditingTranscriptRow from './EditingTranscriptRow';\nimport { isValidTimeSlice } from './timeSliceUtils';\nimport type { SkillCardEntryTimeSlice } from '../../../../common/types/skills';\n\nimport './TranscriptRow.scss';\n\ntype Props = {\n    appears?: Array<SkillCardEntryTimeSlice>,\n    interactionTarget: string,\n    isEditing: boolean,\n    onCancel: Function,\n    onChange: Function,\n    onClick: Function,\n    onSave: Function,\n    text?: string,\n};\n\nconst TranscriptRow = ({ appears, text, isEditing, onClick, onSave, onCancel, onChange, interactionTarget }: Props) => {\n    const isValid = isValidTimeSlice(appears) && Array.isArray(appears) && appears.length === 1;\n    const timeSlice = ((appears: any): Array<SkillCardEntryTimeSlice>);\n    const start = isValid ? formatTime(timeSlice[0].start) : undefined;\n\n    return isEditing ? (\n        <EditingTranscriptRow onCancel={onCancel} onChange={onChange} onSave={onSave} text={text} time={start} />\n    ) : (\n        <ReadOnlyTranscriptRow interactionTarget={interactionTarget} onClick={onClick} text={text} time={start} />\n    );\n};\n\nexport default TranscriptRow;\n","/**\n * @flow\n * @file Transcript component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { bdlGray50 } from '../../../../styles/variables';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconEdit from '../../../../icons/general/IconEdit';\nimport IconCopy from '../../../../icons/general/IconCopy';\nimport IconExpand from '../../../../icons/general/IconExpand';\nimport IconCollapse from '../../../../icons/general/IconCollapse';\nimport { formatTime } from '../../../../utils/datetime';\nimport LoadingIndicatorWrapper from '../../../../components/loading-indicator/LoadingIndicatorWrapper';\nimport Tooltip from '../../../../components/tooltip/Tooltip';\nimport { copy } from '../../../../utils/download';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport messages from '../../../common/messages';\nimport { isValidTimeSlice } from './timeSliceUtils';\nimport TranscriptRow from './TranscriptRow';\nimport type { SkillCardEntry, SkillCard, SkillCardEntryTimeSlice } from '../../../../common/types/skills';\nimport './Transcript.scss';\n\ntype Props = {\n    card: SkillCard,\n    getViewer?: Function,\n    isEditable: boolean,\n    onSkillChange: Function,\n};\n\ntype State = {\n    isCollapsed: boolean,\n    isEditingIndex?: number,\n    isLoading: boolean,\n    newTranscriptText: string,\n};\n\nclass Transcript extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State = {\n        isEditingIndex: undefined,\n        newTranscriptText: '',\n        isCollapsed: true,\n        isLoading: false,\n    };\n\n    copyBtn: HTMLButtonElement;\n\n    /**\n     * Called when transcripts gets new properties\n     *\n     * @private\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props): void {\n        if (prevProps === this.props) {\n            return;\n        }\n\n        const wasEditing = typeof this.state.isEditingIndex === 'number';\n        this.setState({\n            isEditingIndex: wasEditing ? -1 : undefined,\n            newTranscriptText: '',\n            isLoading: false,\n        });\n    }\n\n    /**\n     * Reducer to accumulate all transcript entries for copying\n     *\n     * @param {Object} accumulator - reducer accumulator\n     * @return {string} accumulated transcript entries\n     */\n    transcriptReducer = (accumulator: string, { appears, text }: SkillCardEntry): string => {\n        const start: string =\n            isValidTimeSlice(appears) && Array.isArray(appears) ? `${formatTime(appears[0].start)}:` : '';\n        return `${accumulator}${start} ${text || ''}\\r\\n`;\n    };\n\n    /**\n     * Mapper to accumulate all transcript entries for displaying\n     *\n     * @param {Object} accumulator - reducer accumulator\n     * @param {number} index - mapper index\n     * @return {string} accumulated transcript entries\n     */\n    transcriptMapper = ({ appears, text }: SkillCardEntry, index: number): React.Node => {\n        const { isEditingIndex, newTranscriptText }: State = this.state;\n        const isEditingRow = isEditingIndex === index;\n        const transcriptText = isEditingRow ? newTranscriptText : text;\n        const interactionTarget = isEditingRow\n            ? SKILLS_TARGETS.TRANSCRIPTS.EDIT_TEXT\n            : SKILLS_TARGETS.TRANSCRIPTS.TRANSCRIPT;\n        return (\n            <TranscriptRow\n                key={index}\n                appears={appears}\n                interactionTarget={interactionTarget}\n                isEditing={isEditingRow}\n                onCancel={this.onCancel}\n                onChange={this.onChange}\n                onClick={() => this.onClick(index)}\n                onSave={this.onSave}\n                text={transcriptText}\n            />\n        );\n    };\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditingIndex: typeof prevState.isEditingIndex === 'number' ? undefined : -1,\n        }));\n    };\n\n    /**\n     * Previews a transcript segment\n     *\n     * @private\n     * @param {number|void} [index] - row index to edit\n     * @return {void}\n     */\n    previewSegment(index: number) {\n        const {\n            card: { entries },\n            getViewer,\n        }: Props = this.props;\n        const { appears } = entries[index];\n        const viewer = getViewer ? getViewer() : null;\n        const isValid = isValidTimeSlice(appears) && Array.isArray(appears) && appears.length === 1;\n        const timeSlice = ((appears: any): Array<SkillCardEntryTimeSlice>);\n        const start = isValid ? timeSlice[0].start : 0;\n\n        if (isValid && viewer && typeof viewer.play === 'function') {\n            viewer.play(start);\n        }\n    }\n\n    /**\n     * Saves the new card data\n     *\n     * @private\n     * @return {void}\n     */\n    onSave = (): void => {\n        const {\n            card: { entries },\n            onSkillChange,\n        }: Props = this.props;\n        const { isEditingIndex, newTranscriptText }: State = this.state;\n\n        if (typeof isEditingIndex !== 'number') {\n            return;\n        }\n\n        const entry = entries[isEditingIndex];\n        if (entry.text === newTranscriptText) {\n            this.onCancel();\n        } else {\n            this.setState({ isLoading: true, isEditingIndex: -1 });\n            onSkillChange(null, null, [\n                {\n                    replacement: { ...entry, text: newTranscriptText },\n                    replaced: entry,\n                },\n            ]);\n        }\n    };\n\n    /**\n     * Cancels editing\n     *\n     * @private\n     * @return {void}\n     */\n    onCancel = (): void => {\n        this.setState({ isEditingIndex: -1, newTranscriptText: '' });\n    };\n\n    /**\n     * Reflects changes of editing\n     *\n     * @private\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onChange = (event: SyntheticKeyboardEvent<HTMLTextAreaElement>): void => {\n        const currentTarget = (event.currentTarget: HTMLTextAreaElement);\n        this.setState({\n            newTranscriptText: currentTarget.value,\n        });\n    };\n\n    /**\n     * Click handler for transcript\n     *\n     * @private\n     * @return {void}\n     */\n    onClick = (index: number): void => {\n        const {\n            card: { entries },\n        }: Props = this.props;\n        const { isEditingIndex }: State = this.state;\n        if (typeof isEditingIndex === 'number') {\n            this.setState({\n                isEditingIndex: index,\n                newTranscriptText: entries[index].text,\n            });\n        } else {\n            this.previewSegment(index);\n        }\n    };\n\n    /**\n     * Copies the transcript.\n     * Also animates the copy button.\n     *\n     * @private\n     * @return {void}\n     */\n    copyTranscript = () => {\n        const {\n            card: { entries },\n        }: Props = this.props;\n        const copiedClass = 'be-transcript-copied';\n        copy(entries.reduce(this.transcriptReducer, ''));\n\n        // Animate the button by adding a class\n        if (this.copyBtn) {\n            this.copyBtn.classList.add(copiedClass);\n        }\n\n        // Remove the animation class\n        setTimeout(() => {\n            if (this.copyBtn) {\n                this.copyBtn.classList.remove(copiedClass);\n            }\n        }, 1000);\n    };\n\n    /**\n     * Copy button reference\n     *\n     * @private\n     * @return {void}\n     */\n    copyBtnRef = (btn: HTMLButtonElement): void => {\n        this.copyBtn = btn;\n    };\n\n    /**\n     * Toggles transcript exapand and collapse\n     *\n     * @private\n     * @return {void}\n     */\n    toggleExpandCollapse = (): void => {\n        this.setState(prevState => ({\n            isCollapsed: !prevState.isCollapsed,\n        }));\n    };\n\n    /**\n     * Renders the transcript\n     *\n     * @private\n     * @return {Object}\n     */\n    render() {\n        const {\n            card: { entries },\n            isEditable,\n        }: Props = this.props;\n        const { isEditingIndex, isCollapsed, isLoading }: State = this.state;\n        const hasEntries = entries.length > 0;\n        const hasManyEntries = entries.length > 5;\n        const isEditing = typeof isEditingIndex === 'number';\n        const editBtnClassName = classNames('be-transcript-edit', {\n            'be-transcript-is-editing': isEditing,\n        });\n        const contentClassName = classNames({\n            'be-transcript-content-collapsed': isCollapsed,\n        });\n        const expandCollapseMessage = isCollapsed ? messages.expand : messages.collapse;\n\n        return (\n            <LoadingIndicatorWrapper className=\"be-transcript\" isLoading={isLoading}>\n                {hasEntries && !isLoading && (\n                    <div className=\"be-transcript-actions\">\n                        <Tooltip text={<FormattedMessage {...messages.copy} />}>\n                            <PlainButton\n                                className=\"be-transcript-copy\"\n                                data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.COPY}\n                                getDOMRef={this.copyBtnRef}\n                                onClick={this.copyTranscript}\n                                type=\"button\"\n                            >\n                                <IconCopy color={bdlGray50} />\n                            </PlainButton>\n                        </Tooltip>\n                        {hasManyEntries && (\n                            <Tooltip text={<FormattedMessage {...expandCollapseMessage} />}>\n                                <PlainButton\n                                    className=\"be-transcript-expand\"\n                                    data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EXPAND}\n                                    onClick={this.toggleExpandCollapse}\n                                    type=\"button\"\n                                >\n                                    {isCollapsed ? (\n                                        <IconExpand color={bdlGray50} />\n                                    ) : (\n                                        <IconCollapse color={bdlGray50} />\n                                    )}\n                                </PlainButton>\n                            </Tooltip>\n                        )}\n                        {isEditable && (\n                            <Tooltip text={<FormattedMessage {...messages.editLabel} />}>\n                                <PlainButton\n                                    className={editBtnClassName}\n                                    data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EDIT}\n                                    onClick={this.toggleIsEditing}\n                                    type=\"button\"\n                                >\n                                    <IconEdit />\n                                </PlainButton>\n                            </Tooltip>\n                        )}\n                    </div>\n                )}\n                {isEditing ? (\n                    <div className=\"be-transcript-edit-message\">\n                        <FormattedMessage {...messages.transcriptEdit} />\n                    </div>\n                ) : null}\n                {hasEntries ? (\n                    <div className={contentClassName}>{entries.map(this.transcriptMapper)}</div>\n                ) : (\n                    <FormattedMessage {...messages.skillNoInfoFoundError} />\n                )}\n            </LoadingIndicatorWrapper>\n        );\n    }\n}\n\nexport default Transcript;\n","/**\n * @flow\n * @file Utility for copying and downloading\n * @author Box\n */\n\n/**\n * Function to download string as txt file\n *\n * @private\n * @param {String} string - string to download\n * @param {String} name - file name to use\n * @return {void}\n */\nfunction download(string: string, name: string) {\n    const blob = new Blob([string], { type: 'text/plain;charset=utf-8' });\n\n    // IE11\n    if (window.navigator.msSaveBlob) {\n        window.navigator.msSaveBlob(blob, name);\n        return;\n    }\n\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n\n    a.style.display = 'none';\n    a.href = url;\n    a.download = name;\n    if (document.body) {\n        document.body.appendChild(a);\n    }\n\n    a.click();\n\n    setTimeout(() => {\n        if (document.body) {\n            document.body.removeChild(a);\n        }\n\n        URL.revokeObjectURL(url);\n    }, 100);\n}\n\n/**\n * Function to copy string to the clipboard\n *\n * @private\n * @param {String} string - string to copy\n * @return {void}\n */\nfunction copy(string: string) {\n    const textarea = document.createElement('textarea');\n    const { body } = document;\n\n    textarea.value = string;\n    textarea.style.display = 'hidden';\n\n    if (body) {\n        body.appendChild(textarea);\n        textarea.select();\n        document.execCommand('copy');\n        body.removeChild(textarea);\n    }\n}\n\nexport { download, copy };\n","/**\n * @flow\n * @file Utilities for keywords skill\n * @author Box\n */\n\nimport type { Pill } from './flowTypes';\nimport type { SkillCardEntry } from '../../../../common/types/skills';\n\n/**\n * Converts skill card entries into pills\n *\n * @private\n * @param {Array<Object>} props - keyword entries\n * @return {Array<Object>} pills\n */\nconst getPills = (keywords: Array<SkillCardEntry> = []): Array<Pill> =>\n    keywords.map((keyword: SkillCardEntry, index: number): Pill => ({\n        displayText: ((keyword.text: any): string),\n        value: index,\n    }));\n\nexport default getPills;\n","/**\n * @flow\n * @file Editable Skill Keywords card component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PillSelector from '../../../../components/pill-selector-dropdown/PillSelector';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport Button from '../../../../components/button/Button';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport getPills from './keywordUtils';\nimport type { Pill, Pills } from './flowTypes';\nimport type { SkillCardEntry } from '../../../../common/types/skills';\nimport './EditableKeywords.scss';\n\ntype Props = {\n    keywords: Array<SkillCardEntry>,\n    onAdd: Function,\n    onCancel: Function,\n    onDelete: Function,\n    onSave: Function,\n};\n\ntype State = {\n    isInCompositionMode: boolean,\n    keyword: string,\n    pills: Pills,\n};\n\nclass EditableKeywords extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    /**\n     * [constructor]\n     *\n     * @public\n     * @return {EditableKeywords}\n     */\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            pills: getPills(props.keywords),\n            keyword: '',\n            isInCompositionMode: false,\n        };\n    }\n\n    /**\n     * Called when keywords gets new properties.\n     * Should reset to original state.\n     *\n     * @private\n     * @param {Object} nextProps - component props\n     * @return {void}\n     */\n    componentDidUpdate({ keywords: prevKeywords }: Props): void {\n        const { keywords } = this.props;\n\n        if (prevKeywords !== keywords) {\n            this.setState({ pills: getPills(keywords), keyword: '' });\n        }\n    }\n\n    /**\n     * Called when keywords gets new properties.\n     * Should reset to original state.\n     *\n     * @private\n     * @param {Object} option - pill\n     * @param {number} index - pill index\n     * @return {void}\n     */\n    onRemove = (option: Pill, index: number): void => {\n        // eslint-disable-line\n        const { onDelete, keywords }: Props = this.props;\n        onDelete(keywords[index]);\n    };\n\n    /**\n     * When pressing enter in the pill input box\n     *\n     * @private\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onKeyDown = ({ key }: SyntheticKeyboardEvent<HTMLInputElement>): void => {\n        if (key === 'Enter' && !this.state.isInCompositionMode) {\n            this.onBlur();\n        }\n    };\n\n    /**\n     * Called when pill selector is blurred.\n     * Adds a new pill if needed.\n     *\n     * @private\n     * @return {void}\n     */\n    onBlur = () => {\n        const { onAdd }: Props = this.props;\n        const { keyword } = this.state;\n\n        if (keyword) {\n            onAdd({\n                type: 'text',\n                text: keyword,\n            });\n        }\n    };\n\n    /**\n     * Enables composition mode.\n     *\n     * @private\n     * @return {void}\n     */\n    onCompositionStart = () => {\n        this.setState({ isInCompositionMode: true });\n    };\n\n    /**\n     * Disables composition mode.\n     *\n     * @private\n     * @return {void}\n     */\n    onCompositionEnd = () => {\n        this.setState({ isInCompositionMode: false });\n    };\n\n    /**\n     * Called when pill selector gets new input value.\n     *\n     * @private\n     * @return {void}\n     */\n    onInput = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        const currentTarget = (event.currentTarget: HTMLInputElement);\n        this.setState({\n            keyword: currentTarget.value,\n        });\n    };\n\n    /**\n     * Renders the keywords\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { onSave, onCancel }: Props = this.props;\n        const { pills, keyword }: State = this.state;\n        return (\n            <span className=\"bdl-EditableKeywords\">\n                <PillSelector\n                    onBlur={this.onBlur}\n                    onCompositionEnd={this.onCompositionEnd}\n                    onCompositionStart={this.onCompositionStart}\n                    onInput={this.onInput}\n                    onKeyDown={this.onKeyDown}\n                    onPaste={this.onInput}\n                    onRemove={this.onRemove}\n                    selectedOptions={pills}\n                    value={keyword}\n                />\n                <div className=\"be-keywords-buttons\">\n                    <Button data-resin-target={SKILLS_TARGETS.KEYWORDS.EDIT_CANCEL} onClick={onCancel} type=\"button\">\n                        <FormattedMessage {...messages.cancel} />\n                    </Button>\n                    <PrimaryButton data-resin-target={SKILLS_TARGETS.KEYWORDS.EDIT_SAVE} onClick={onSave} type=\"button\">\n                        <FormattedMessage {...messages.save} />\n                    </PrimaryButton>\n                </div>\n            </span>\n        );\n    }\n}\n\nexport default EditableKeywords;\n","// @flow\nimport React from 'react';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\n\nimport Button from '../button';\nimport type { Option } from '../pill-selector-dropdown/flowTypes';\n\ntype Props = {\n    buttonProps?: Object,\n    onSelect?: Function,\n    options: Array<Option>,\n    selectedOptions?: Array<Option>,\n};\n\nconst PillCloud = ({ options, onSelect, selectedOptions = [], buttonProps = {} }: Props) => (\n    <div className=\"bdl-PillCloud pill-cloud-container\">\n        {options &&\n            options.map(option => (\n                <Button\n                    key={option.value}\n                    className={classNames('bdl-Pill', 'bdl-PillCloud-button', 'pill', 'pill-cloud-button', {\n                        'is-selected': selectedOptions.find(op => isEqual(op, option)),\n                    })}\n                    onClick={onSelect ? () => onSelect(option) : undefined}\n                    data-resin-target={option.value}\n                    {...buttonProps}\n                >\n                    {option.displayText}\n                </Button>\n            ))}\n    </div>\n);\n\nexport default PillCloud;\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconTrackNext = ({ className = '', color = '#999', height = 14, title, width = 14 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-track-next ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 14 14\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            d=\"M7.72 7.85a1 1 0 0 0 0-1.41l-5-4.81A1 1 0 0 0 2 1.35a1 1 0 0 0-1 1V12a1 1 0 0 0 .28.69 1 1 0 0 0 1.41 0l5-4.81zM13 2v10a1 1 0 0 1-1 1 1 1 0 0 1-1-1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconTrackNext;\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconTrackPrevious = ({ className = '', color = '#999', height = 14, title, width = 14 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-track-previous ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 14 14\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            d=\"M6.31 7.88l5 4.81a1 1 0 0 0 1.41 0A1 1 0 0 0 13 12V2.35a1 1 0 0 0-1-1 1 1 0 0 0-.69.28l-5 4.81a1 1 0 0 0 0 1.41zM2 1a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1 1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconTrackPrevious;\n","/**\n * @flow\n * @file Timeline line component\n * @author Box\n */\n\nimport React from 'react';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport './Timeslice.scss';\n\ntype Props = {\n    duration: number,\n    end?: number,\n    index: number,\n    interactionTarget: string,\n    onClick: Function,\n    start: number,\n};\n\nconst LENGTH_TEXT_ITEMLINE = 290; // match with css\nconst MIN_WIDTH = 6; // Need at least some width to be clickable\n\nconst Timeslice = ({ start, end, duration, onClick, index, interactionTarget }: Props) => {\n    if (typeof start !== 'number' || !duration || start >= duration) {\n        return null;\n    }\n\n    const barLength = LENGTH_TEXT_ITEMLINE;\n    let startLeft = Math.round((start * barLength) / duration);\n    const minEnding = startLeft + MIN_WIDTH; // Need at least some width to be clickable\n    const ending = typeof end === 'number' ? Math.max(minEnding, (end * barLength) / duration) : minEnding;\n    const endLeft = Math.round(Math.min(barLength, ending));\n    let width = endLeft - startLeft;\n\n    // If width is too small re-adjust the left position\n    // to get to at least 6px wide for clickability\n    if (width < MIN_WIDTH) {\n        startLeft -= MIN_WIDTH - width;\n        width = MIN_WIDTH;\n    }\n\n    return (\n        <PlainButton\n            className=\"be-timeline-time\"\n            data-resin-target={interactionTarget}\n            onClick={() => onClick(index)}\n            style={{\n                left: `${startLeft}px`,\n                width: `${width}px`,\n            }}\n            type=\"button\"\n        />\n    );\n};\n\nexport default Timeslice;\n","/**\n * @flow\n * @file Timeline component\n * @author Box\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconTrackNext from '../../../../icons/general/IconTrackNext';\nimport IconTrackPrevious from '../../../../icons/general/IconTrackPrevious';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport Timeslice from './Timeslice';\nimport { isValidStartTime } from '../transcript/timeSliceUtils';\nimport type { SkillCardEntryTimeSlice, SkillCardEntryType } from '../../../../common/types/skills';\n\nimport './Timeline.scss';\n\ntype Props = {\n    duration?: number,\n    getViewer?: Function,\n    interactionTarget: string,\n    text?: string,\n    timeslices?: SkillCardEntryTimeSlice[],\n    type?: SkillCardEntryType,\n    url?: string,\n};\n\nconst Timeline = ({ text = '', duration = 0, timeslices = [], getViewer, interactionTarget }: Props) => {\n    let timeSliceIndex = -1;\n\n    const playSegment = (index: number, incr: number = 0) => {\n        const newIndex = incr > 0 ? Math.min(timeslices.length - 1, index + incr) : Math.max(0, index + incr);\n        const viewer = getViewer ? getViewer() : null;\n        const timeslice = timeslices[newIndex];\n        const validTime = isValidStartTime(timeslice);\n\n        if (validTime && viewer && typeof viewer.play === 'function') {\n            viewer.play(timeslice.start);\n            timeSliceIndex = newIndex;\n        }\n    };\n\n    return (\n        <div className=\"be-timeline\">\n            {text && <div className=\"be-timeline-label\">{text}</div>}\n            <div className=\"be-timeline-line-wrapper\">\n                <div className=\"be-timeline-line\" />\n                {timeslices.map(\n                    ({ start, end }: SkillCardEntryTimeSlice, index) => (\n                        /* eslint-disable react/no-array-index-key */\n                        <Timeslice\n                            key={index}\n                            duration={duration}\n                            end={end}\n                            index={index}\n                            interactionTarget={interactionTarget}\n                            onClick={playSegment}\n                            start={start}\n                        />\n                    ),\n                    /* eslint-enable react/no-array-index-key */\n                )}\n            </div>\n            <div className=\"be-timeline-btns\">\n                <PlainButton\n                    data-resin-target={SKILLS_TARGETS.TIMELINE.PREVIOUS}\n                    onClick={() => playSegment(timeSliceIndex, -1)}\n                    type=\"button\"\n                >\n                    <IconTrackPrevious title={<FormattedMessage {...messages.previousSegment} />} />\n                </PlainButton>\n                <PlainButton\n                    data-resin-target={SKILLS_TARGETS.TIMELINE.NEXT}\n                    onClick={() => playSegment(timeSliceIndex, 1)}\n                    type=\"button\"\n                >\n                    <IconTrackNext title={<FormattedMessage {...messages.nextSegment} />} />\n                </PlainButton>\n            </div>\n        </div>\n    );\n};\n\nexport default Timeline;\n","/**\n * @flow\n * @file Read Only Keywords Card component\n * @author Box\n */\n\nimport * as React from 'react';\nimport PillCloud from '../../../../components/pill-cloud/PillCloud';\nimport { SKILLS_TARGETS, INTERACTION_TARGET } from '../../../common/interactionTargets';\nimport Timeline from '../timeline';\nimport getPills from './keywordUtils';\nimport type { Pill, Pills } from './flowTypes';\nimport type { SkillCardEntry } from '../../../../common/types/skills';\nimport './ReadOnlyKeywords.scss';\n\ntype Props = {\n    duration?: number,\n    getViewer?: Function,\n    keywords: Array<SkillCardEntry>,\n};\n\ntype State = {\n    selectedIndex: number,\n};\n\nclass ReadOnlyselecteds extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State = {\n        selectedIndex: -1,\n    };\n\n    /**\n     * Shows the time line by selecting the keyword\n     *\n     * @private\n     * @param {Object} pill - keyword\n     * @return {void}\n     */\n    onSelect = (pill: Pill) => {\n        const { selectedIndex }: State = this.state;\n        const newIndex: number = ((pill.value: any): number);\n        this.setState({\n            selectedIndex: selectedIndex === newIndex ? -1 : newIndex,\n        });\n    };\n\n    /**\n     * Renders the keywords\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { keywords, getViewer, duration }: Props = this.props;\n        const { selectedIndex }: State = this.state;\n        const options: Pills = getPills(keywords);\n        const selected = keywords[selectedIndex];\n        const pillCloudProps = selected ? { selectedOptions: [options[selectedIndex]] } : {};\n\n        return (\n            <>\n                <PillCloud\n                    onSelect={this.onSelect}\n                    options={options}\n                    {...pillCloudProps}\n                    buttonProps={{\n                        [INTERACTION_TARGET]: SKILLS_TARGETS.KEYWORDS.SELECT,\n                    }}\n                />\n                {!!selected && Array.isArray(selected.appears) && selected.appears.length > 0 && (\n                    <Timeline\n                        duration={duration}\n                        getViewer={getViewer}\n                        interactionTarget={SKILLS_TARGETS.KEYWORDS.TIMELINE}\n                        text={selected.text}\n                        timeslices={selected.appears}\n                    />\n                )}\n            </>\n        );\n    }\n}\n\nexport default ReadOnlyselecteds;\n","/**\n * @flow\n * @file File Keywords SkillCard component\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconEdit from '../../../../icons/general/IconEdit';\nimport LoadingIndicatorWrapper from '../../../../components/loading-indicator/LoadingIndicatorWrapper';\nimport InlineError from '../../../../components/inline-error/InlineError';\nimport Tooltip from '../../../../components/tooltip/Tooltip';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport EditableKeywords from './EditableKeywords';\nimport ReadOnlyKeywords from './ReadOnlyKeywords';\nimport type { SkillCardEntry, SkillCard } from '../../../../common/types/skills';\n\nimport './Keywords.scss';\n\ntype Props = {\n    card: SkillCard,\n    getViewer?: Function,\n    hasError: boolean,\n    isEditable: boolean,\n    onSkillChange: Function,\n    transcript?: SkillCard,\n};\n\ntype State = {\n    adds: Array<SkillCardEntry>,\n    hasError: boolean,\n    isEditing: boolean,\n    isLoading: boolean,\n    keywords: Array<SkillCardEntry>,\n    removes: Array<SkillCardEntry>,\n};\n\nclass Keywords extends PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    /**\n     * [constructor]\n     *\n     * @public\n     * @return {Keywords}\n     */\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            keywords: props.card.entries,\n            adds: [],\n            removes: [],\n            isEditing: props.hasError,\n            hasError: props.hasError,\n            isLoading: false,\n        };\n    }\n\n    /**\n     * Helper to reset the state\n     *\n     * @private\n     * @param {Object} props - component props\n     * @return {void}\n     */\n    resetState(props: Props): void {\n        this.setState({\n            keywords: props.card.entries,\n            adds: [],\n            removes: [],\n            isEditing: false,\n            hasError: false,\n            isLoading: false,\n        });\n    }\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditing: !prevState.isEditing,\n        }));\n    };\n\n    /**\n     * Adds a new keyword.\n     * Iterates over the transcript to find locations\n     *\n     * @private\n     * @return {void}\n     */\n    onAdd = (keyword: SkillCardEntry): void => {\n        const { transcript }: Props = this.props;\n        const { adds } = this.state;\n        const locations = [];\n        const regex = new RegExp(`\\\\b${((keyword.text: any): string)}\\\\b`, 'i');\n\n        if (transcript && Array.isArray(transcript.entries)) {\n            transcript.entries.forEach(({ text, appears }: SkillCardEntry): void => {\n                if (text && regex.test(text) && Array.isArray(appears) && appears.length > 0) {\n                    locations.push(appears[0]);\n                }\n            });\n        }\n\n        keyword.appears = locations;\n        adds.push(keyword);\n        this.setState({ adds: adds.slice(0) });\n    };\n\n    /**\n     * Deletes a keyword\n     *\n     * @private\n     * @return {void}\n     */\n    onDelete = (keyword: SkillCardEntry): void => {\n        const { adds, removes } = this.state;\n        const addedIndex = adds.findIndex(added => added === keyword);\n        if (addedIndex > -1) {\n            adds.splice(addedIndex, 1);\n            this.setState({ adds: adds.slice(0) });\n        } else {\n            removes.push(keyword);\n            this.setState({ removes: removes.slice(0) });\n        }\n    };\n\n    /**\n     * Saves the new card data\n     *\n     * @private\n     * @return {void}\n     */\n    onSave = (): void => {\n        const { onSkillChange }: Props = this.props;\n        const { removes, adds }: State = this.state;\n        this.toggleIsEditing();\n        if (removes.length > 0 || adds.length > 0) {\n            this.setState({ isLoading: true });\n            onSkillChange(removes, adds);\n        }\n    };\n\n    /**\n     * Cancels editing\n     *\n     * @private\n     * @return {void}\n     */\n    onCancel = (): void => {\n        this.resetState(this.props);\n    };\n\n    /**\n     * Renders the keywords\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { card, getViewer, isEditable }: Props = this.props;\n        const { duration }: SkillCard = card;\n        const { isEditing, isLoading, hasError, keywords, removes, adds }: State = this.state;\n        const hasKeywords = keywords.length > 0;\n        const entries = keywords.filter((face: SkillCardEntry) => !removes.includes(face)).concat(adds);\n        const editClassName = classNames('be-keyword-edit', {\n            'be-keyword-is-editing': isEditing,\n        });\n\n        return (\n            <LoadingIndicatorWrapper className=\"be-keywords\" isLoading={isLoading}>\n                {hasKeywords && isEditable && !isLoading && (\n                    <Tooltip text={<FormattedMessage {...messages.editLabel} />}>\n                        <PlainButton\n                            className={editClassName}\n                            data-resin-target={SKILLS_TARGETS.KEYWORDS.EDIT}\n                            onClick={this.toggleIsEditing}\n                            type=\"button\"\n                        >\n                            <IconEdit />\n                        </PlainButton>\n                    </Tooltip>\n                )}\n                {hasError && (\n                    <InlineError title={<FormattedMessage {...messages.sidebarSkillsErrorTitle} />}>\n                        <FormattedMessage {...messages.sidebarSkillsErrorContent} />\n                    </InlineError>\n                )}\n                {isEditing && (\n                    <EditableKeywords\n                        keywords={entries}\n                        onAdd={this.onAdd}\n                        onCancel={this.onCancel}\n                        onDelete={this.onDelete}\n                        onSave={this.onSave}\n                    />\n                )}\n                {!isEditing && hasKeywords && (\n                    <ReadOnlyKeywords duration={duration} getViewer={getViewer} keywords={entries} />\n                )}\n                {!isEditing && !hasKeywords && <FormattedMessage {...messages.skillNoInfoFoundError} />}\n            </LoadingIndicatorWrapper>\n        );\n    }\n}\n\nexport default Keywords;\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconMinus = ({ className = '', color = '#000000', height = 16, title, width = 16 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-minus ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 16 16\"\n        width={width}\n    >\n        <path d=\"M2 5h8v2H2z\" fill={color} fillRule=\"evenodd\" />\n    </AccessibleSVG>\n);\n\nexport default IconMinus;\n","/**\n * @flow\n * @file File Keywords SkillCard component\n * @author Box\n */\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconClose from '../../../../icons/general/IconClose';\nimport IconMinus from '../../../../icons/general/IconMinus';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport { COLOR_999, COLOR_WHITE } from '../../../../constants';\nimport type { SkillCardEntry } from '../../../../common/types/skills';\n\nimport './Face.scss';\n\ntype Props = {\n    face: SkillCardEntry,\n    isEditing: boolean,\n    onDelete: Function,\n    onSelect: Function,\n    selected?: SkillCardEntry,\n};\n\nconst Face = ({ face, selected, isEditing, onDelete, onSelect }: Props) => {\n    const isAnyFaceSelected = !!selected;\n    const isCurrentFaceSelected = face === selected;\n    const isFaceSelected = isAnyFaceSelected && isCurrentFaceSelected && !isEditing;\n    const faceClassName = classNames('be-face-wrapper', {\n        'be-face-unselected': !isEditing && isAnyFaceSelected && !isCurrentFaceSelected,\n    });\n\n    return (\n        <div className={faceClassName}>\n            <PlainButton\n                className=\"be-face\"\n                data-resin-target={SKILLS_TARGETS.FACES.FACE}\n                onClick={() => !isEditing && onSelect(face)}\n                type=\"button\"\n            >\n                <img alt={face.text} src={face.image_url} title={face.text} />\n                {isFaceSelected && <IconMinus color={COLOR_WHITE} />}\n            </PlainButton>\n            {isEditing && (\n                <PlainButton\n                    className=\"be-face-delete\"\n                    data-resin-target={SKILLS_TARGETS.FACES.DELETE}\n                    onClick={() => onDelete(face)}\n                    type=\"button\"\n                >\n                    <IconClose color={COLOR_999} height={16} width={16} />\n                </PlainButton>\n            )}\n        </div>\n    );\n};\n\nexport default Face;\n","/**\n * @flow\n * @file Faces Skill Card component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport LoadingIndicatorWrapper from '../../../../components/loading-indicator/LoadingIndicatorWrapper';\nimport InlineError from '../../../../components/inline-error/InlineError';\nimport Tooltip from '../../../../components/tooltip/Tooltip';\nimport Button from '../../../../components/button/Button';\nimport IconEdit from '../../../../icons/general/IconEdit';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport Face from './Face';\nimport Timeline from '../timeline';\nimport type { SkillCardEntry, SkillCard } from '../../../../common/types/skills';\nimport './Faces.scss';\n\ntype Props = {\n    card: SkillCard,\n    getViewer?: Function,\n    hasError: boolean,\n    isEditable: boolean,\n    onSkillChange: Function,\n};\n\ntype State = {\n    faces: Array<SkillCardEntry>,\n    hasError: boolean,\n    isEditing: boolean,\n    isLoading: boolean,\n    removes: Array<SkillCardEntry>,\n    selected?: SkillCardEntry,\n};\n\nclass Faces extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    /**\n     * [constructor]\n     *\n     * @public\n     * @return {Faces}\n     */\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            faces: props.card.entries,\n            removes: [],\n            isEditing: props.hasError,\n            hasError: props.hasError,\n            isLoading: false,\n        };\n    }\n\n    /**\n     * Helper to reset the state\n     *\n     * @private\n     * @param {Object} props - component props\n     * @return {void}\n     */\n    resetState(props: Props): void {\n        this.setState({\n            faces: props.card.entries,\n            removes: [],\n            isEditing: false,\n            selected: undefined,\n            hasError: false,\n            isLoading: false,\n        });\n    }\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditing: !prevState.isEditing,\n        }));\n    };\n\n    /**\n     * Toggles face selection\n     *\n     * @private\n     * @return {void}\n     */\n    onSelect = (face: SkillCardEntry): void => {\n        const { selected } = this.state;\n        this.setState({\n            selected: selected === face ? undefined : face,\n        });\n    };\n\n    /**\n     * Deletes a face\n     *\n     * @private\n     * @return {void}\n     */\n    onDelete = (face: SkillCardEntry): void => {\n        const { removes } = this.state;\n        removes.push(face);\n        this.setState({ removes: removes.slice(0) });\n    };\n\n    /**\n     * Saves the new card data\n     *\n     * @private\n     * @return {void}\n     */\n    onSave = (): void => {\n        const { onSkillChange }: Props = this.props;\n        const { removes }: State = this.state;\n        this.toggleIsEditing();\n        if (removes.length > 0) {\n            this.setState({ isLoading: true });\n            onSkillChange(removes);\n        }\n    };\n\n    /**\n     * Cancels editing\n     *\n     * @private\n     * @return {void}\n     */\n    onCancel = (): void => {\n        this.resetState(this.props);\n    };\n\n    /**\n     * Renders the faces\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { card, isEditable, getViewer }: Props = this.props;\n        const { selected, faces, removes, isEditing, hasError, isLoading }: State = this.state;\n        const { duration }: SkillCard = card;\n        const hasFaces = faces.length > 0;\n        const entries = faces.filter((face: SkillCardEntry) => !removes.includes(face));\n        const editClassName = classNames('be-face-edit', {\n            'be-faces-is-editing': isEditing,\n        });\n\n        return (\n            <LoadingIndicatorWrapper className=\"be-faces\" isLoading={isLoading}>\n                {hasFaces && isEditable && !isLoading && (\n                    <Tooltip text={<FormattedMessage {...messages.editLabel} />}>\n                        <PlainButton\n                            className={editClassName}\n                            data-resin-target={SKILLS_TARGETS.FACES.EDIT}\n                            onClick={this.toggleIsEditing}\n                            type=\"button\"\n                        >\n                            <IconEdit />\n                        </PlainButton>\n                    </Tooltip>\n                )}\n                {hasError && (\n                    <InlineError title={<FormattedMessage {...messages.sidebarSkillsErrorTitle} />}>\n                        <FormattedMessage {...messages.sidebarSkillsErrorContent} />\n                    </InlineError>\n                )}\n                {hasFaces ? (\n                    entries.map((face: SkillCardEntry, index: number) => (\n                        /* eslint-disable react/no-array-index-key */\n                        <Face\n                            key={index}\n                            face={face}\n                            isEditing={isEditing}\n                            onDelete={this.onDelete}\n                            onSelect={this.onSelect}\n                            selected={selected}\n                        />\n                        /* eslint-enable react/no-array-index-key */\n                    ))\n                ) : (\n                    <FormattedMessage {...messages.skillNoInfoFoundError} />\n                )}\n                {!!selected && !isEditing && Array.isArray(selected.appears) && selected.appears.length > 0 && (\n                    <Timeline\n                        duration={duration}\n                        getViewer={getViewer}\n                        interactionTarget={SKILLS_TARGETS.FACES.TIMELINE}\n                        timeslices={selected.appears}\n                    />\n                )}\n                {isEditing && (\n                    <div className=\"be-faces-buttons\">\n                        <Button\n                            data-resin-target={SKILLS_TARGETS.FACES.EDIT_CANCEL}\n                            onClick={this.onCancel}\n                            type=\"button\"\n                        >\n                            <FormattedMessage {...messages.cancel} />\n                        </Button>\n                        <PrimaryButton\n                            data-resin-target={SKILLS_TARGETS.FACES.EDIT_SAVE}\n                            onClick={this.onSave}\n                            type=\"button\"\n                        >\n                            <FormattedMessage {...messages.save} />\n                        </PrimaryButton>\n                    </div>\n                )}\n            </LoadingIndicatorWrapper>\n        );\n    }\n}\n\nexport default Faces;\n","/**\n * @flow\n * @file Skills card component\n * @author Box\n */\n\nimport React from 'react';\nimport Status from './status';\nimport Transcript from './transcript';\nimport Keywords from './keywords';\nimport Faces from './faces';\nimport { SKILLS_TRANSCRIPT, SKILLS_KEYWORD, SKILLS_TIMELINE, SKILLS_FACE, SKILLS_STATUS } from '../../../constants';\nimport type { SkillCard } from '../../../common/types/skills';\n\ntype Props = {\n    card: SkillCard,\n    cards: Array<SkillCard>,\n    getViewer: Function,\n    hasError: boolean,\n    isEditable: boolean,\n    onSkillChange: Function,\n};\n\nconst SidebarSkillsCard = ({ card, cards, hasError, isEditable, onSkillChange, getViewer }: Props) => {\n    switch (card.skill_card_type) {\n        case SKILLS_KEYWORD:\n            return (\n                <Keywords\n                    card={card}\n                    getViewer={getViewer}\n                    hasError={hasError}\n                    isEditable={isEditable}\n                    onSkillChange={onSkillChange}\n                    transcript={\n                        isEditable\n                            ? cards.find(({ skill_card_type }) => skill_card_type === SKILLS_TRANSCRIPT)\n                            : undefined\n                    }\n                />\n            );\n        case SKILLS_TIMELINE:\n        case SKILLS_FACE:\n            return (\n                <Faces\n                    card={card}\n                    getViewer={getViewer}\n                    hasError={hasError}\n                    isEditable={isEditable}\n                    onSkillChange={onSkillChange}\n                />\n            );\n        case SKILLS_TRANSCRIPT:\n            return (\n                <Transcript\n                    card={card}\n                    getViewer={getViewer}\n                    hasError={hasError}\n                    isEditable={isEditable}\n                    onSkillChange={onSkillChange}\n                />\n            );\n        case SKILLS_STATUS:\n            return <Status card={card} />;\n        default:\n            return null;\n    }\n};\n\nexport default SidebarSkillsCard;\n","/**\n * @flow\n * @file Details sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport uniqueId from 'lodash/uniqueId';\nimport messages from '../../common/messages';\nimport { SKILLS_TARGETS } from '../../common/interactionTargets';\nimport SidebarSection from '../SidebarSection';\nimport { isValidSkillsCard } from './skillUtils';\nimport SidebarSkillsCard from './SidebarSkillsCard';\nimport {\n    SKILLS_TRANSCRIPT,\n    SKILLS_KEYWORD,\n    SKILLS_TIMELINE,\n    SKILLS_FACE,\n    SKILLS_STATUS,\n    SKILLS_ERROR_UNKNOWN,\n} from '../../../constants';\nimport type { SkillCard, SkillCardLocalizableType } from '../../../common/types/skills';\nimport type { NumberBooleanMap, BoxItem } from '../../../common/types/core';\n\ntype Props = {\n    cards: Array<SkillCard>,\n    errors: NumberBooleanMap,\n    file: BoxItem,\n    getViewer: Function,\n    onSkillChange: Function,\n};\n\n/**\n * Get ths skill interaction target based on card type\n *\n * @param {Object} card - skill card\n * @return {string} - interaction target\n */\nconst getCardInteractionTarget = ({ skill_card_type }: SkillCard): string => {\n    switch (skill_card_type) {\n        case SKILLS_KEYWORD:\n            return SKILLS_TARGETS.KEYWORDS.CARD;\n        case SKILLS_FACE:\n        case SKILLS_TIMELINE:\n            return SKILLS_TARGETS.FACES.CARD;\n        case SKILLS_TRANSCRIPT:\n            return SKILLS_TARGETS.TRANSCRIPTS.CARD;\n        default:\n            return '';\n    }\n};\n\n/**\n * Get ths string skill title based on card title\n *\n * @param {Object} card - skill card\n * @return {string} - skill title\n */\nconst getCardTitle = ({ skill_card_type, skill_card_title = {} }: SkillCard): string | React.Node => {\n    const { code, message }: SkillCardLocalizableType = skill_card_title;\n    const defaultKey = `${skill_card_type}Skill`;\n    const defaultMessage = messages[defaultKey] || messages.defaultSkill;\n\n    switch (code) {\n        case 'skills_faces':\n            return <FormattedMessage {...messages.faceSkill} />;\n        case 'skills_transcript':\n            return <FormattedMessage {...messages.transcriptSkill} />;\n        case 'skills_topics':\n            return <FormattedMessage {...messages.topicsSkill} />;\n        case 'skills_status':\n            return <FormattedMessage {...messages.statusSkill} />;\n        case 'skills_error':\n            return <FormattedMessage {...messages.error} />;\n        default:\n            return message || <FormattedMessage {...defaultMessage} />;\n    }\n};\n\nconst SidebarSkills = ({ file, cards, errors, getViewer, onSkillChange }: Props): Array<React.Node> => {\n    const { permissions = {} }: BoxItem = file;\n    const isSkillEditable = !!permissions.can_upload;\n\n    return cards.map((card: SkillCard, index: number) => {\n        if (card.error && !card.status) {\n            card.skill_card_type = SKILLS_STATUS;\n            card.status = {\n                code: SKILLS_ERROR_UNKNOWN,\n            };\n            delete card.error;\n        }\n\n        const { id } = card;\n        const cardId = id || uniqueId('card_');\n        const isValid = isValidSkillsCard(file, card);\n        const interactionTarget = getCardInteractionTarget(card);\n        const title = getCardTitle(card);\n        const hasEntries = Array.isArray(card.entries) ? card.entries.length > 0 : isValid;\n\n        return isValid ? (\n            <SidebarSection key={cardId} interactionTarget={interactionTarget} isOpen={hasEntries} title={title}>\n                <SidebarSkillsCard\n                    card={card}\n                    cards={cards}\n                    getViewer={getViewer}\n                    hasError={!!errors[index]}\n                    isEditable={isSkillEditable}\n                    onSkillChange={(...args) => onSkillChange(index, ...args)}\n                />\n            </SidebarSection>\n        ) : null;\n    });\n};\n\nexport default SidebarSkills;\n","/**\n * @flow\n * @file Skills sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport API from '../../api';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport messages from '../common/messages';\nimport SidebarContent from './SidebarContent';\nimport SidebarSkills from './skills/SidebarSkills';\nimport { EVENT_JS_READY } from '../common/logger/constants';\nimport { mark } from '../../utils/performance';\nimport { withAPIContext } from '../common/api-context';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withLogger } from '../common/logger';\nimport {\n    FIELD_PERMISSIONS_CAN_UPLOAD,\n    SKILLS_TRANSCRIPT,\n    ORIGIN_SKILLS_SIDEBAR,\n    SIDEBAR_VIEW_SKILLS,\n} from '../../constants';\nimport type { WithLoggerProps } from '../../common/types/logging';\nimport type { SkillCardEntry, SkillCard } from '../../common/types/skills';\nimport type { NumberBooleanMap, BoxItem } from '../../common/types/core';\nimport type { JSONPatchOperations } from '../../common/types/api';\nimport './SkillsSidebar.scss';\n\ntype PropsWithoutContext = {\n    elementId: string,\n    file: BoxItem,\n    getPreview: Function,\n    getViewer: Function,\n    hasSidebarInitialized?: boolean,\n    refreshIdentity?: boolean,\n};\n\ntype Props = {\n    api: API,\n} & PropsWithoutContext &\n    WithLoggerProps;\n\ntype State = {\n    cards?: Array<SkillCard>,\n    errors: NumberBooleanMap,\n};\n\nconst MARK_NAME_JS_READY = `${ORIGIN_SKILLS_SIDEBAR}_${EVENT_JS_READY}`;\n\nmark(MARK_NAME_JS_READY);\n\nclass SkillsSidebar extends React.PureComponent<Props, State> {\n    state: State = {\n        errors: {},\n    };\n\n    constructor(props: Props) {\n        super(props);\n        const { logger } = this.props;\n        logger.onReadyMetric({\n            endMarkName: MARK_NAME_JS_READY,\n        });\n    }\n\n    componentDidMount() {\n        const { api, file }: Props = this.props;\n        api.getMetadataAPI(false).getSkills(file, this.fetchSkillsSuccessCallback, noop);\n    }\n\n    componentDidUpdate({ refreshIdentity: prevRefreshIdentity }: Props) {\n        const { api, file, refreshIdentity }: Props = this.props;\n\n        if (refreshIdentity !== prevRefreshIdentity) {\n            api.getMetadataAPI(false).getSkills(file, this.fetchSkillsSuccessCallback, noop);\n        }\n    }\n\n    /**\n     * Handles skills fetch success\n     *\n     * @private\n     * @param {Array<SkillCard>} cards - Skills cards\n     * @return {void}\n     */\n    fetchSkillsSuccessCallback = (cards: Array<SkillCard>) => {\n        this.updatePreviewTranscript(cards);\n        this.setState({ cards });\n    };\n\n    /**\n     * Updates Preview with transcript data\n     *\n     * @private\n     * @param {Array<SkillCard>} cards - Skills cards\n     * @return {void}\n     */\n    updatePreviewTranscript = (cards: Array<SkillCard>): void => {\n        const { getPreview, getViewer } = this.props;\n        const preview = getPreview ? getPreview() : null;\n        const viewer = getViewer ? getViewer() : null;\n        const transcriptCard = cards.find(card => card.skill_card_type === SKILLS_TRANSCRIPT);\n        if (!transcriptCard || !preview) {\n            return;\n        }\n\n        if (!viewer) {\n            preview.addListener('load', ({ viewer: loadedViewer }) => {\n                if (typeof loadedViewer.loadAutoGeneratedCaptions === 'function') {\n                    loadedViewer.loadAutoGeneratedCaptions(transcriptCard);\n                }\n            });\n        } else if (typeof viewer.loadAutoGeneratedCaptions === 'function') {\n            viewer.loadAutoGeneratedCaptions(transcriptCard);\n        }\n    };\n\n    /**\n     * Success handler for save\n     *\n     * @private\n     * @param {Array} updatedCards - updated skill cards\n     * @param {number} index - index of the card being edited\n     * @return {void}\n     */\n    onSaveSuccessHandler = (index: number, updatedCards: Array<SkillCard>): void => {\n        const { errors }: State = this.state;\n        const clone = { ...errors };\n        delete clone[index];\n        this.updatePreviewTranscript(updatedCards);\n        this.setState({ cards: updatedCards, errors: clone });\n    };\n\n    /**\n     * Error handler for save\n     *\n     * @private\n     * @param {number} index - index of the card being edited\n     * @return {void}\n     */\n    onSaveErrorHandler = (index: number): void => {\n        const { errors }: State = this.state;\n        const clone = { ...errors };\n        clone[index] = true;\n        this.setState({ errors: clone });\n    };\n\n    /**\n     * Updates skill metadata\n     *\n     * @private\n     * @param {number} index - index of the card being edited\n     * @param {Array} removes - entries to remove\n     * @param {Array} adds - entries to add\n     * @param {Array} replaces - entries to replace\n     * @return {void}\n     */\n    onSave = (\n        index: number,\n        removes: Array<SkillCardEntry> = [],\n        adds: Array<SkillCardEntry> = [],\n        replaces: Array<{\n            replaced: SkillCardEntry,\n            replacement: SkillCardEntry,\n        }> = [],\n    ): void => {\n        const { api, file }: Props = this.props;\n        const { cards = [] }: State = this.state;\n        const card = cards[index];\n        const path = `/cards/${index}`;\n        const ops: JSONPatchOperations = [];\n        const canEdit = getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n\n        if (!canEdit || !card) {\n            return;\n        }\n\n        if (Array.isArray(replaces)) {\n            replaces.forEach(({ replaced, replacement }) => {\n                const idx = card.entries.findIndex(entry => entry === replaced);\n                if (idx > -1) {\n                    ops.push({\n                        op: 'replace',\n                        path: `${path}/entries/${idx}`,\n                        value: replacement,\n                    });\n                }\n            });\n        }\n\n        if (Array.isArray(removes)) {\n            const deletes = [];\n            removes.forEach(removed => {\n                const idx = card.entries.findIndex(entry => entry === removed);\n                if (idx > -1) {\n                    deletes.push(idx);\n                }\n            });\n            // To maintain metadata index positions, removes should be\n            // done is reverse order with largest index being removed first.\n            // Remove operations are atomic and don't happen in batch.\n            deletes\n                .sort((a, b) => b - a) // number sort in descending order\n                .forEach(idx => {\n                    ops.push({\n                        op: 'remove',\n                        path: `${path}/entries/${idx}`,\n                    });\n                });\n        }\n\n        if (Array.isArray(adds)) {\n            adds.forEach(added => {\n                ops.push({\n                    op: 'add',\n                    path: `${path}/entries/-`,\n                    value: added,\n                });\n            });\n        }\n\n        // If no ops, don't proceed\n        if (ops.length === 0) {\n            return;\n        }\n\n        // Add test ops before any other ops\n        ops.splice(0, 0, {\n            op: 'test',\n            path,\n            value: card,\n        });\n\n        api.getMetadataAPI(false).updateSkills(\n            file,\n            ops,\n            (updatedCards: Array<SkillCard>) => {\n                this.onSaveSuccessHandler(index, updatedCards);\n            },\n            () => {\n                this.onSaveErrorHandler(index);\n            },\n        );\n    };\n\n    render() {\n        const { file, getViewer, elementId }: Props = this.props;\n        const { cards, errors }: State = this.state;\n\n        return (\n            <SidebarContent\n                className=\"bcs-skills\"\n                elementId={elementId}\n                sidebarView={SIDEBAR_VIEW_SKILLS}\n                title={<FormattedMessage {...messages.sidebarSkillsTitle} />}\n            >\n                {cards ? (\n                    <SidebarSkills\n                        cards={cards}\n                        errors={errors}\n                        file={file}\n                        getViewer={getViewer}\n                        onSkillChange={this.onSave}\n                    />\n                ) : (\n                    <LoadingIndicator />\n                )}\n            </SidebarContent>\n        );\n    }\n}\n\nexport { SkillsSidebar as SkillsSidebarComponent };\nexport default flow([withLogger(ORIGIN_SKILLS_SIDEBAR), withErrorBoundary(ORIGIN_SKILLS_SIDEBAR), withAPIContext])(\n    SkillsSidebar,\n);\n"],"sourceRoot":""}