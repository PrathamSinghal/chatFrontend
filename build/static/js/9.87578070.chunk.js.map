{"version":3,"sources":["../../../../src/icons/general/IconEdit.tsx","../node_modules/lodash/_isStrictComparable.js","../node_modules/lodash/_matchesStrictComparable.js","../node_modules/lodash/findIndex.js","../node_modules/lodash/_baseIteratee.js","../node_modules/lodash/_baseMatches.js","../node_modules/lodash/_baseIsMatch.js","../node_modules/lodash/_getMatchData.js","../node_modules/lodash/_baseMatchesProperty.js","../node_modules/lodash/hasIn.js","../node_modules/lodash/_baseHasIn.js","../node_modules/lodash/property.js","../node_modules/lodash/_baseProperty.js","../node_modules/lodash/_basePropertyDeep.js","../../../../src/icons/general/IconAddMetadataEmptyState.tsx","../../../../src/features/metadata-instance-editor/messages.js","../../../../src/features/metadata-instance-editor/EmptyContent.js","../../../../src/icons/general/IconMetadataColored.tsx","../../../../src/icons/general/IconAlertCircle.tsx","../../../../src/components/toggle/Toggle.js","../../../../src/components/radio/RadioButton.tsx","../../../../src/components/radio/RadioGroup.tsx","../../../../src/components/radio/RadioGroupField.tsx","../../../../src/features/metadata-instance-editor/CascadePolicy.js","../../../../src/components/text-input/TextInputField.js","../../../../src/features/metadata-instance-fields/messages.js","../../../../src/features/metadata-instance-fields/TextMetadataField.js","../../../../src/icons/general/IconCheck.tsx","../../../../src/components/select-button/SelectButton.js","../../../../src/components/select-field/SelectFieldDropdown.js","../../../../src/icon/fill/Search16.tsx","../../../../src/components/search-form/SearchForm.js","../../../../src/components/select-field/constants.js","../../../src/common/keyboard-events.js","../../../../src/components/select-field/messages.js","../../../../src/components/select-field/BaseSelectField.js","../../../../src/components/select-field/SingleSelectField.js","../../../../src/features/metadata-instance-fields/EnumMetadataField.js","../../../../src/features/metadata-instance-fields/DateMetadataField.js","../../../../src/features/metadata-instance-fields/constants.js","../../../../src/features/metadata-instance-fields/validateMetadataField.js","../../../../src/features/metadata-instance-fields/FloatMetadataField.js","../../../../src/features/metadata-instance-fields/IntegerMetadataField.js","../../../../src/components/select-field/MultiSelectField.js","../../../../src/features/metadata-instance-fields/MultiSelectMetadataField.js","../../../../src/features/metadata-instance-fields/ReadOnlyMetadataField.js","../../../../src/features/metadata-instance-fields/MetadataField.js","../../../../src/features/metadata-instance-editor/metadataUtil.js","../../../../src/features/metadata-instance-editor/MetadataInstanceEditorContext.js","../../../../src/features/metadata-instance-editor/TemplatedInstance.js","../../../../src/features/metadata-instance-editor/CustomInstanceNewField.js","../../../../src/components/button-group/ButtonGroup.tsx","../../../../src/icons/general/IconMinusThin.tsx","../../../../src/icons/general/IconPlusThin.tsx","../../../../src/features/metadata-instance-fields/CustomMetadataField.js","../../../../src/features/metadata-instance-editor/CustomInstance.js","../../../../src/features/metadata-instance-editor/MetadataInstanceConfirmDialog.js","../../../../src/features/metadata-instance-editor/Footer.js","../../../../src/features/metadata-instance-editor/constants.js","../../../src/common/constants.js","../../../../src/features/metadata-instance-editor/Instance.js","../../../../src/features/metadata-instance-editor/Instances.js","../../../../src/features/metadata-instance-editor/TemplateDropdown.js","../../../../src/elements/content-sidebar/MetadataSidebar.js"],"names":["IconEdit","className","color","bdlGray65","height","title","width","viewBox","d","fill","isObject","require","module","exports","value","key","srcValue","object","undefined","Object","baseFindIndex","baseIteratee","toInteger","nativeMax","Math","max","array","predicate","fromIndex","length","index","baseMatches","baseMatchesProperty","identity","isArray","property","baseIsMatch","getMatchData","matchesStrictComparable","source","matchData","Stack","baseIsEqual","customizer","noCustomizer","data","objValue","stack","result","COMPARE_PARTIAL_FLAG","isStrictComparable","keys","get","hasIn","isKey","toKey","path","baseHasIn","hasPath","baseProperty","basePropertyDeep","baseGet","IconAddMetadataEmptyState","fillRule","fillOpacity","stroke","strokeWidth","rx","x","y","messages","defineMessages","customTitle","customAdd","customRemove","customKey","customKeyPlaceholder","customValue","customValuePlaceholder","customNewField","customNewFieldMessage","customErrorRequired","customErrorDuplicateKey","customErrorInternalKey","invalidInput","metadataEditTooltip","metadataRemoveTemplate","fileMetadataRemoveTemplateConfirm","folderMetadataRemoveTemplateConfirm","fileMetadataRemoveCustomTemplateConfirm","folderMetadataRemoveCustomTemplateConfirm","metadataTemplateSearchPlaceholder","metadataTemplateAdd","metadataTemplatesTitle","metadataTemplatesNoResults","metadataTemplatesFetchFailed","metadataTemplatesNoRemainingTemplates","metadataTemplatesServerHasNoTemplates","metadataSave","metadataCancel","metadataCascadePolicyEnabledInfo","noMetadata","noMetadataAddTemplate","enableCascadePolicy","applyCascadePolicyText","cannotApplyCascadePolicyText","cascadePolicyLearnMore","cascadePolicyModeQuestion","cascadePolicySkipMode","cascadePolicyOverwriteMode","allAttributesAreHidden","noAttributesForTemplate","operationNotImmediate","EmptyContent","canAdd","IconMetadataColored","type","bdlPurpleRain","bdlBoxBlue","IconAlertCircle","transform","cx","cy","r","Toggle","ref","description","isDisabled","isOn","isToggleRightAligned","label","name","onBlur","onChange","onFocus","onMouseEnter","onMouseLeave","rest","classes","classNames","toggleElements","reverse","checked","disabled","role","displayName","onChangeStub","RadioButton","isSelected","hideLabel","RadioGroup","props","event","target","HTMLInputElement","setState","state","this","children","stateValue","onChangeHandler","map","radio","React","CascadePolicy","canEdit","isCascadingEnabled","isCascadingOverwritten","isCustomMetadata","onCascadeToggle","onCascadeModeChange","shouldShowCascadeOptions","readOnlyState","tagName","e","Link","href","IconAlertDefault","invalidMetadataFieldType","metadataFieldNoValue","metadataFieldSelectValue","metadataFieldMultiSelectValue","metadataFieldSetValue","metadataFieldSetDate","injectIntl","dataKey","dataValue","error","intl","onRemove","TextInput","hideOptionalLabel","currentTarget","placeholder","formatMessage","IconCheck","SelectButton","errorTooltipPosition","tooltipTetherClassName","isShown","position","tetherElementClassName","text","theme","SelectFieldDropdown","prevSelectedValues","selectedValues","multiple","scheduleUpdate","innerRef","style","placement","isScrollable","selectFieldID","listboxProps","id","onMouseDown","preventDefault","Search16","AccessibleSVG","vars","clearButtonTitle","searchButtonTitle","searchLabel","SearchFormBase","isEmpty","shouldPreventClearEventPropagation","stopPropagation","searchInput","trim","elements","onSubmit","element","getSearchInput","action","isLoading","method","queryParams","useClearButton","inputProps","omit","formClassNames","hiddenInputs","param","LoadableSearchActions","makeLoadable","onClick","onClearHandler","ClearBadge16","onSubmitHandler","setInputRef","autoComplete","loadingIndicatorProps","SearchFormBaseIntl","SearchForm","CLEAR","ENTER","clearAll","searchPlaceholder","noResults","stopDefaultEvent","BaseSelectField","options","optionIndex","findIndex","displayText","toLowerCase","includes","setActiveItem","searchText","container","selectFieldContainerRef","current","Node","contains","closeDropdown","shouldScrollIntoView","activeItemIndex","setActiveItemID","itemEl","document","getElementById","activeItemID","scrollIntoView","block","selectedItems","selectedItem","onOptionSelect","isOpen","openDropdown","handleChange","blurExceptionClassNames","exceptionClasses","relatedTarget","every","classList","shouldShowClearOption","shouldShowSearchInput","itemCount","nextIndex","prevIndex","handleClearClick","selectOption","lowerCaseKey","option","indexOf","searchInputRef","focus","addEventListener","handleDocumentClick","removeEventListener","selectMultiOption","selectSingleOption","filter","isSubstring","isClearOption","defaultValue","hasDefaultValue","item","getFilteredOptions","newSelectedValues","slice","push","splice","toggleOption","defaultOptionIndex","handleOptionSelect","join","updateSearchText","buttonElProps","buttonProps","buttonText","renderButtonText","handleButtonClick","onKeyDown","handleButtonKeyDown","optionRenderer","separatorIndices","filteredOptions","selectOptions","itemProps","isActive","forEach","separatorIndex","uniqueId","isEscapedWithReference","isRightAligned","dropdownPlacement","PLACEMENT_BOTTOM_END","PLACEMENT_BOTTOM_START","dropdownModifiers","preventOverflow","escapeWithReference","handleBlur","handleKeyDown","modifiers","renderSelectButton","renderSearchInput","renderSelectOptions","SingleSelectField","selectedOptions","fieldType","selectedValue","selectFieldProps","isFieldSelected","optionsWithClearOption","isSelectable","unshift","Label","Array","DatePicker","dateFormat","displayFormat","day","month","year","date","isoDate","convertISOStringToUTCDate","FIELD_TYPE_DATE","FIELD_TYPE_INTEGER","FIELD_TYPE_FLOAT","FIELD_TYPE_STRING","floatRegex","integerRegex","isValidValue","match","floatValidator","integerValidator","FloatMetadataField","IntegerMetadataField","MultiSelectMetadataField","ReadOnlyMetadataField","MetadataField","isHidden","Error","InlineError","obj","hidden","normalizeTemplates","templates","selectedTemplateKey","templateFilters","clonedTemplates","template","templateKey","fields","normalizedFilters","Set","normalizeTemplateFilters","field","has","TemplatedInstance","errors","onFieldChange","onFieldRemove","hasFields","hasVisibleFields","some","showNoFieldsMessage","showHiddenFieldsMessage","MetadataInstanceEditorContext","CustomInstanceNewField","onAdd","properties","prototype","hasOwnProperty","call","startsWith","attr","isCancellable","onCancel","Tooltip","tabIndex","IconInfo","isRequired","onKeyChange","onValueChange","Button","commonMessages","cancel","ButtonGroup","IconMinusThin","IconPlusThin","COLOR_999","isLast","addBtn","removeBtn","CustomInstance","prevState","isAddFieldVisible","isEqual","canAddFields","onAddFieldToggle","MetadataInstanceConfirmDialog","onConfirm","confirmationMessage","cancelButtonRef","btnElement","PrimaryButton","Footer","showSave","PlainButton","TEMPLATE_CUSTOM_PROPERTIES","JSON_PATCH_OP_TEST","getValue","parseFloat","parseInt","Instance","onModification","getState","shouldConfirmRemove","isEditing","isBusy","cascadePolicy","originalData","isDirty","isCascadingPolicyApplicable","onSave","currentData","createJSONPatch","isEnabled","overwrite","cloneDeep","isValid","finalErrors","finalData","setDirty","isFile","message","values","metadataName","hasDataChanged","hasCascadingChanged","editClassName","metadataLabelEditText","toggleIsEditing","fieldKeyToTypeMap","reduce","prev","createFieldKeyToTypeMap","prevHasError","hasError","prevIsDirty","currentElement","collapsibleRef","behavior","isProperties","bdlWatermelonRed","renderDeleteMessage","ops","originalValue","op","animationDuration","Collapsible","RESIN_TAG_TARGET","hasStickyHeader","headerActionItems","renderEditButton","isBordered","getTitle","LoadingIndicatorWrapper","getConfirmationMessage","onConfirmCancel","Form","onValidSubmit","noop","onConfirmRemove","Instances","editors","instance","getAvailableTemplates","allTemplates","usedTemplates","usedTemplate","scope","TemplateDropdown","isDropdownBusy","activeTemplate","defaultTemplateIcon","activeTemplateIcon","hasUnusedTemplates","hasTemplates","hasResults","indicatorOrMessage","renderedTemplates","isTemplateSelected","buttonClassName","getTemplateName","isAlwaysOpen","onSelect","selector","getSelector","shouldScroll","filterText","handleUserInput","userInput","defaultMessage","onDropdownToggle","isDropdownOpen","entryButton","buttonToggleClassName","MenuToggle","prevTemplates","prevUsedTemplates","flyoutClassName","closeOnClick","closeOnClickOutside","constrainToWindowWithPin","onClose","onOpen","shouldDefaultFocus","renderEntryButton","getDropdown","MARK_NAME_JS_READY","ORIGIN_METADATA_SIDEBAR","EVENT_JS_READY","mark","MetadataSidebar","code","newState","onError","status","isValidError","isUserCorrectableError","sidebarMetadataEditingErrorContent","IS_ERROR_DISPLAYED","api","file","editor","getEditor","getMetadataAPI","deleteMetadata","onRemoveSuccessHandler","onApiError","clone","createMetadata","onAddSuccessHandler","oldEditor","updateMetadata","newEditor","replaceEditor","onSaveErrorHandler","sidebarMetadataFetchingErrorContent","sidebarFileFetchingErrorContent","currentFile","currentCanUpload","getProp","FIELD_PERMISSIONS_CAN_UPLOAD","newCanUpload","callback","fetchMetadata","logger","onReadyMetric","endMarkName","fetchFile","find","isFeatureEnabled","getMetadata","fetchMetadataSuccessCallback","fetchMetadataErrorCallback","refreshCache","fileId","getFileAPI","getFile","fetchFileSuccessCallback","fetchFileErrorCallback","FIELD_IS_EXTERNALLY_OWNED","FIELD_PERMISSIONS","elementId","showEditor","showLoadingIndicator","showTemplateDropdown","showEmptyContent","SidebarContent","actions","sidebarView","SIDEBAR_VIEW_METADATA","sidebarMetadataTitle","LoadingIndicator","flow","withLogger","withErrorBoundary","withAPIContext"],"mappings":"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","file":"static/js/9.87578070.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\nimport { bdlGray65 } from '../../styles/variables';\n\nimport { Icon } from '../iconTypes';\n\nconst IconEdit = ({ className = '', color = bdlGray65, height = 14, title, width = 14 }: Icon) => (\n    <AccessibleSVG className={`icon-edit ${className}`} height={height} title={title} viewBox=\"0 0 14 14\" width={width}>\n        <path\n            className=\"fill-color\"\n            d=\"M3.21 7.89l6.47-6.48a2 2 0 0 1 2.88 2.78h-.05L6 10.72 3.21 7.89zM2.24 9l2.83 2.83L1.67 13c-.52.18-.79-.1-.62-.61z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconEdit;\n","var isObject = require('./isObject');\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n","/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;\n","var baseMatches = require('./_baseMatches'),\n    baseMatchesProperty = require('./_baseMatchesProperty'),\n    identity = require('./identity'),\n    isArray = require('./isArray'),\n    property = require('./property');\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n","var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData'),\n    matchesStrictComparable = require('./_matchesStrictComparable');\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n","var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n","var isStrictComparable = require('./_isStrictComparable'),\n    keys = require('./keys');\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n","var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n","var baseHasIn = require('./_baseHasIn'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n","/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;\n","var baseProperty = require('./_baseProperty'),\n    basePropertyDeep = require('./_basePropertyDeep'),\n    isKey = require('./_isKey'),\n    toKey = require('./_toKey');\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n","var baseGet = require('./_baseGet');\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconAddMetadataEmptyState = ({ className = '', color = '#0061D5', title, width = 140 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-add-metadata-empty-state ${className}`}\n        title={title}\n        viewBox=\"0 0 140 105\"\n        width={width}\n    >\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n                d=\"M92 1.134V.492a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-90.5 83.5v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629A1.005 1.005 0 0 1 1.134 86H.49a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm136 5.5v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-29-78v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-80 3.5v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-5.563 8.075v-.402a.313.313 0 0 1 .625 0v.402a.628.628 0 0 1 .23.229h.401c.17 0 .307.144.307.312a.308.308 0 0 1-.307.313h-.402a.628.628 0 0 1-.229.228v.402a.313.313 0 0 1-.625.004v-.406a.628.628 0 0 1-.228-.229h-.402A.313.313 0 0 1 22 24.25c0-.173.134-.313.307-.313h.402a.628.628 0 0 1 .229-.228zm-11.5 79v-.402a.313.313 0 0 1 .626 0v.402a.628.628 0 0 1 .228.228h.402c.17 0 .307.145.307.313a.308.308 0 0 1-.307.313h-.402a.628.628 0 0 1-.229.228v.402a.313.313 0 0 1-.624.004v-.406a.628.628 0 0 1-.23-.228h-.401a.313.313 0 0 1-.307-.313c0-.173.134-.313.307-.313h.402a.628.628 0 0 1 .229-.228z\"\n                fill={color}\n            />\n            <path\n                d=\"M17 54c0-3.866 3.133-7 6.992-7h106.016c3.861 0 6.992 3.142 6.992 7 0 3.866-3.133 7-6.992 7H23.992C20.131 61 17 57.858 17 54zm-6 20c0-3.866 3.133-7 6.992-7h106.016c3.861 0 6.992 3.142 6.992 7 0 3.866-3.133 7-6.992 7H17.992C14.131 81 11 77.858 11 74zM5 94c0-3.866 3.133-7 6.992-7h106.016c3.861 0 6.992 3.142 6.992 7 0 3.866-3.133 7-6.992 7H11.992C8.131 101 5 97.858 5 94z\"\n                fill={color}\n                fillOpacity=\".1\"\n            />\n            <path\n                d=\"M130 61a7 7 0 1 1 0-14 7 7 0 0 1 0 14zm-6 20a7 7 0 1 1 0-14 7 7 0 0 1 0 14zm0-2a5 5 0 1 0 0-10 5 5 0 0 0 0 10zm-6 22a7 7 0 1 1 0-14 7 7 0 0 1 0 14z\"\n                fill={color}\n            />\n            <path\n                d=\"M117.944 95.189l3.215-3.832a.996.996 0 0 1 1.407-.121c.423.355.475.99.126 1.406l-3.861 4.6a.993.993 0 0 1-1.4.128l-3.078-2.583a.993.993 0 0 1-.116-1.403 1 1 0 0 1 1.401-.13l2.306 1.935zm12-40l3.215-3.832a.996.996 0 0 1 1.407-.121c.423.355.475.99.126 1.406l-3.861 4.6a.993.993 0 0 1-1.4.128l-3.078-2.583a.993.993 0 0 1-.116-1.403 1 1 0 0 1 1.401-.13l2.306 1.935z\"\n                fill=\"#FFF\"\n            />\n            <path\n                d=\"M25 38.49c0-.823.668-1.49 1.509-1.49H54.77c.833 0 1.788.605 2.139 1.365l3.207 6.942c.348.754-.036 1.365-.86 1.365H26.491c-.824 0-1.491-.665-1.491-1.49V38.49z\"\n                fill=\"#FFF\"\n                stroke={color}\n                strokeWidth=\"2\"\n            />\n            <path\n                d=\"M27 40.49c0-.823.668-1.49 1.494-1.49h25.164c.825 0 1.751.62 2.07 1.386l2.869 6.9c.318.766-.096 1.386-.933 1.386H28.51A1.498 1.498 0 0 1 27 47.182V40.49z\"\n                fill=\"#22A7F0\"\n                fillOpacity=\".1\"\n            />\n            <rect fill=\"#FFF\" height=\"53.197\" rx=\"1.5\" stroke={color} strokeWidth=\"2\" width=\"80\" x=\"25\" y=\"43\" />\n            <path\n                d=\"M27 82.214c0-.827.657-1.34 1.475-1.185 0 0 3.614 1.268 23.858 1.268 12.585 0 18.165 3.312 25.334 3.312 14.499 0 23.954-4.331 23.954-4.331.762-.31 1.379.115 1.379.936v10.284c0 .827-.68 1.497-1.501 1.497H28.501A1.503 1.503 0 0 1 27 92.498V82.214z\"\n                fill={color}\n                fillOpacity=\".1\"\n            />\n        </g>\n    </AccessibleSVG>\n);\n\nexport default IconAddMetadataEmptyState;\n","import { defineMessages } from 'react-intl';\n\nconst messages = defineMessages({\n    customTitle: {\n        defaultMessage: 'Custom Metadata',\n        description: 'title of the custom metadata card',\n        id: 'boxui.metadataInstanceEditor.customTitle',\n    },\n    customAdd: {\n        defaultMessage: 'Add',\n        description: 'Label for the add button for custom metadata',\n        id: 'boxui.metadataInstanceEditor.customAdd',\n    },\n    customRemove: {\n        defaultMessage: 'Remove',\n        description: 'Label for the remove button for custom metadata',\n        id: 'boxui.metadataInstanceEditor.customRemove',\n    },\n    customKey: {\n        defaultMessage: 'Key',\n        description: 'Label for the key field for custom metadata',\n        id: 'boxui.metadataInstanceEditor.customKey',\n    },\n    customKeyPlaceholder: {\n        defaultMessage: 'e.g. Order Number',\n        description: 'Placeholder for the key field for custom metadata',\n        id: 'boxui.metadataInstanceEditor.customKeyPlaceholder',\n    },\n    customValue: {\n        defaultMessage: 'Value',\n        description: 'Label for the value field for custom metadata',\n        id: 'boxui.metadataInstanceEditor.customValue',\n    },\n    customValuePlaceholder: {\n        defaultMessage: 'e.g. 42',\n        description: 'Placeholder for the value field for custom metadata',\n        id: 'boxui.metadataInstanceEditor.customValuePlaceholder',\n    },\n    customNewField: {\n        defaultMessage: 'New Field',\n        description: 'Title for the new field section for custom metadata',\n        id: 'boxui.metadataInstanceEditor.customNewField',\n    },\n    customNewFieldMessage: {\n        defaultMessage: 'Add a custom metadata field. Other people will be able to see and search for this field.',\n        description: 'Description for the new field section for custom metadata',\n        id: 'boxui.metadataInstanceEditor.customNewFieldMessage',\n    },\n    customErrorRequired: {\n        defaultMessage: 'A key is required.',\n        description: 'Error enforcing required key for custom metadata',\n        id: 'boxui.metadataInstanceEditor.customErrorRequired',\n    },\n    customErrorDuplicateKey: {\n        defaultMessage: 'A field with that key already exists.',\n        description: 'Error enforcing unique key for custom metadata',\n        id: 'boxui.metadataInstanceEditor.customErrorDuplicateKey',\n    },\n    customErrorInternalKey: {\n        defaultMessage: 'Keys cannot begin with a $.',\n        description: 'Error enforcing non internal key for custom metadata',\n        id: 'boxui.metadataInstanceEditor.customErrorInternalKey',\n    },\n    invalidInput: {\n        defaultMessage: 'Invalid Input!',\n        description: 'Error message displayed if the user enters a badly formatted value in metadata text box',\n        id: 'boxui.metadataInstanceEditor.invalidValue',\n    },\n    metadataEditTooltip: {\n        defaultMessage: 'Edit Metadata',\n        description: 'Text that shows in a tooltip above the edit pencil button.',\n        id: 'boxui.metadataInstanceEditor.editTooltip',\n    },\n    metadataRemoveTemplate: {\n        defaultMessage: 'Remove',\n        description: 'Label to remove a template',\n        id: 'boxui.metadataInstanceEditor.removeTemplate',\n    },\n    fileMetadataRemoveTemplateConfirm: {\n        defaultMessage: 'Are you sure you want to delete \"{metadataName}\" and all of its values from this file?',\n        description:\n            'Message for users who may attempt to remove a metadata instance for a file, which is non-recoverable',\n        id: 'boxui.metadataInstanceEditor.fileMetadataRemoveTemplateConfirm',\n    },\n    folderMetadataRemoveTemplateConfirm: {\n        defaultMessage:\n            'Are you sure you want to delete \"{metadataName}\" and all of its values? Any metadata template values already applied to files in this folder will not be deleted.',\n        description:\n            'Message for users who may attempt to remove a metadata instance for a folder, which is non-recoverable',\n        id: 'boxui.metadataInstanceEditor.folderMetadataRemoveTemplateConfirm',\n    },\n    fileMetadataRemoveCustomTemplateConfirm: {\n        defaultMessage: 'Are you sure you want to delete this custom metadata and all of its values from this file?',\n        description:\n            'Message for users who may attempt to remove a custom metadata instance for a file. Also non-recoverable',\n        id: 'boxui.metadataInstanceEditor.fileMetadataRemoveCustomTemplateConfirm',\n    },\n    folderMetadataRemoveCustomTemplateConfirm: {\n        defaultMessage:\n            'Are you sure you want to delete this custom metadata and all of its values? Any metadata template values already applied to files in this folder will not be deleted.',\n        description:\n            'Message for users who may attempt to remove a custom metadata instance for a folder. Also non-recoverable',\n        id: 'boxui.metadataInstanceEditor.folderMetadataRemoveCustomTemplateConfirm',\n    },\n    metadataTemplateSearchPlaceholder: {\n        defaultMessage: 'Search all templates',\n        description: 'Placeholder to search for all templates',\n        id: 'boxui.metadataInstanceEditor.templateSearchPlaceholder',\n    },\n    metadataTemplateAdd: {\n        defaultMessage: 'Add',\n        description: 'Label to add a template',\n        id: 'boxui.metadataInstanceEditor.templateAdd',\n    },\n    metadataTemplatesTitle: {\n        defaultMessage: 'Templates',\n        description: 'Overall title of metadata',\n        id: 'boxui.metadataInstanceEditor.templatesTitle',\n    },\n    metadataTemplatesNoResults: {\n        defaultMessage: 'No Results',\n        description: 'Text to indicate no templates found by searching',\n        id: 'boxui.metadataInstanceEditor.templatesNoResults',\n    },\n    metadataTemplatesFetchFailed: {\n        defaultMessage: 'Sorry! We could not fetch templates. Please contact your administrator',\n        description: 'Text to indicate that we failed to fetch templates',\n        id: 'boxui.metadataInstanceEditor.templatesFetchFailed',\n    },\n    metadataTemplatesNoRemainingTemplates: {\n        defaultMessage: 'All templates have been added',\n        description: 'Text to indicate that all the templates have been added',\n        id: 'boxui.metadataInstanceEditor.templatesNoRemainingTemplates',\n    },\n    metadataTemplatesServerHasNoTemplates: {\n        defaultMessage: 'Zero templates',\n        description: 'Text to indicate that the server has no templates',\n        id: 'boxui.metadataInstanceEditor.templatesServerHasNoTemplates',\n    },\n    metadataSave: {\n        defaultMessage: 'Save',\n        description: 'Label for save button',\n        id: 'boxui.metadataInstanceEditor.metadataSave',\n    },\n    metadataCancel: {\n        defaultMessage: 'Cancel',\n        description: 'Label for cancel button',\n        id: 'boxui.metadataInstanceEditor.metadataCancel',\n    },\n    metadataCascadePolicyEnabledInfo: {\n        defaultMessage:\n            'This template and its values are being cascaded to all items in this folder and its subfolders.',\n        description: 'Informational text shown in metadata modal when cascading is turned on for current folder',\n        id: 'boxui.metadataInstanceEditor.metadataCascadePolicyEnabledInfo',\n    },\n    noMetadata: {\n        defaultMessage: 'No Metadata Applied',\n        description: 'Text to display when no metadata is applied to folder',\n        id: 'boxui.metadataInstanceEditor.noMetadata',\n    },\n    noMetadataAddTemplate: {\n        defaultMessage: \"Click 'Add' in the top right to add metadata to this item\",\n        description: 'Instructions to create metadata for the selected folder',\n        id: 'boxui.metadataInstanceEditor.noMetadataAddTemplate',\n    },\n    enableCascadePolicy: {\n        defaultMessage: 'Enable Cascade Policy',\n        description: 'Label for enable cascade policy toggle switch',\n        id: 'boxui.metadataInstanceEditor.enableCascadePolicy',\n    },\n    applyCascadePolicyText: {\n        defaultMessage:\n            'Apply template and its values to all new and existing items in this folder and its subfolders.',\n        description: 'Informational text below enable cascade policy toggle switch',\n        id: 'boxui.metadataInstanceEditor.applyCascadePolicyText',\n    },\n    cannotApplyCascadePolicyText: {\n        defaultMessage: 'Cascade policy cannot be applied to custom metadata at this time.',\n        description:\n            'Informational text below enable cascade policy toggle switch indicating that cascade policy cannot be applied',\n        id: 'boxui.metadataInstanceEditor.cannotApplyCascadePolicyText',\n    },\n    cascadePolicyLearnMore: {\n        defaultMessage: 'Learn more',\n        description: 'Tooltip text a user can use to learn more about cascading metadata policy',\n        id: 'boxui.metadataInstanceEditor.cascadePolicyLearnMore',\n    },\n    cascadePolicyModeQuestion: {\n        defaultMessage:\n            'In the case of conflicts when applying this template and its values to existing items, what would you like to do? This is a one time action.',\n        description:\n            'Tooltip text that asks the user what they want to do when applying cascading to their metadata policy',\n        id: 'boxui.metadataInstanceEditor.cascadePolicyModeQuestion',\n    },\n    cascadePolicySkipMode: {\n        defaultMessage: 'Skip and keep all existing template values',\n        description: 'Label for radio button that selects skip mode for cascading policy',\n        id: 'boxui.metadataInstanceEditor.cascadePolicySkipMode',\n    },\n    cascadePolicyOverwriteMode: {\n        defaultMessage: 'Overwrite all existing template values',\n        description: 'Label for radio button that selects overwrite mode for cascading policy',\n        id: 'boxui.metadataInstanceEditor.cascadePolicyOverwriteMode',\n    },\n    allAttributesAreHidden: {\n        defaultMessage: 'All attributes in this template have been hidden.',\n        description:\n            'Informational text below collapsible header indicating that all fields for this template are hidden',\n        id: 'boxui.metadataInstanceEditor.allAttributesAreHidden',\n    },\n    noAttributesForTemplate: {\n        defaultMessage: 'There are no attributes in this template.',\n        description:\n            'Informational text below collapsible header indicating that there are no attributes for this template',\n        id: 'boxui.metadataInstanceEditor.noAttributesForTemplate',\n    },\n    operationNotImmediate: {\n        defaultMessage: 'This operation is not immediate and may take some time.',\n        description:\n            'Informational text below cascade policy description and explains to the user that the policy will take some time to take effect.',\n        id: 'boxui.metadataInstanceEditor.operationNotImmediate',\n    },\n});\n\nexport default messages;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport IconAddMetadataEmptyState from '../../icons/general/IconAddMetadataEmptyState';\n\nimport messages from './messages';\nimport './EmptyContent.scss';\n\ntype Props = {\n    canAdd?: boolean,\n};\n\nconst EmptyContent = ({ canAdd }: Props) => (\n    <div className=\"metadata-instance-editor-no-instances\">\n        <IconAddMetadataEmptyState />\n        <p className=\"metadata-instance-editor-no-instances--call-out\">\n            <FormattedMessage {...messages.noMetadata} />\n        </p>\n        {canAdd && (\n            <p className=\"metadata-instance-editor-no-instances--how-add-template\">\n                <FormattedMessage {...messages.noMetadataAddTemplate} />\n            </p>\n        )}\n    </div>\n);\n\nexport default EmptyContent;\n","import * as React from 'react';\n\nimport { bdlBoxBlue, bdlPurpleRain } from '../../styles/variables';\nimport AccessibleSVG from '../accessible-svg';\nimport { Icon } from '../iconTypes';\n\ninterface IconMetadataColoredProps extends Icon {\n    /** A string describing the icon's type */\n    type?: 'cascade' | 'default';\n}\n\nconst IconMetadataColored = ({\n    className = '',\n    color,\n    title,\n    type,\n    width = 16,\n    height = 16,\n}: IconMetadataColoredProps) => {\n    let fill;\n\n    if (color) {\n        fill = color;\n    } else if (type === 'cascade') {\n        fill = bdlPurpleRain;\n    } else if (type === 'default') {\n        fill = bdlBoxBlue;\n    } else {\n        fill = bdlBoxBlue;\n    }\n\n    return (\n        <AccessibleSVG\n            className={`icon-metadata ${className}`}\n            height={height}\n            title={title}\n            viewBox=\"0 0 16 16\"\n            width={width}\n        >\n            <path\n                className=\"fill-color\"\n                d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm-2.515-5.879L6.2 7.263l1.376 2.202a.5.5 0 0 0 .848 0L9.8 7.263l.715 2.858a.5.5 0 0 0 .97-.242l-1-4a.5.5 0 0 0-.909-.144L8 8.257 6.424 5.735a.5.5 0 0 0-.91.144l-1 4a.5.5 0 0 0 .971.242z\"\n                fill={fill}\n                fillRule=\"evenodd\"\n            />\n        </AccessibleSVG>\n    );\n};\n\nexport default IconMetadataColored;\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconAlertCircle = ({ className = '', color = '#FFFFFF', height = 20, title, width = 20 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-alert-circle ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 20 20\"\n        width={width}\n    >\n        <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(1 1)\">\n            <circle className=\"stroke-color\" cx=\"9\" cy=\"9\" r=\"9\" stroke={color} />\n            <rect className=\"fill-color\" fill={color} height=\"6\" rx=\"1\" width=\"2\" x=\"8\" y=\"4\" />\n            <circle className=\"fill-color\" cx=\"9\" cy=\"13\" fill={color} r=\"1\" />\n        </g>\n    </AccessibleSVG>\n);\n\nexport default IconAlertCircle;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport './Toggle.scss';\n\ntype Props = {\n    className?: string,\n    /** Description of the input */\n    description?: React.Node,\n    isDisabled?: boolean, // @TODO: eventually call this `disabled`\n    /** Toggle state */\n    isOn?: boolean, // @TODO: eventually call this `checked`\n    /** If set to true, the toggle will be aligned to the right */\n    isToggleRightAligned?: boolean,\n    /** Label displayed for the input */\n    label: React.Node,\n    /** Name of the input */\n    name?: string,\n    /** blur callback function called with event as the argument */\n    onBlur?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** change callback function called with event as the argument */\n    onChange?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** focus callback function called with event as the argument */\n    onFocus?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** mouse enter callback function called with event as the argument */\n    onMouseEnter?: (e: SyntheticInputEvent<HTMLDivElement>) => any,\n    /** mouse leave callback function called with event as the argument */\n    onMouseLeave?: (e: SyntheticInputEvent<HTMLDivElement>) => any,\n    /** optional value for the toggles checkbox */\n    value?: any,\n};\n\nconst Toggle = React.forwardRef<Props, HTMLInputElement>(\n    (\n        {\n            className = '',\n            description,\n            isDisabled,\n            isOn,\n            isToggleRightAligned = false,\n            label,\n            name,\n            onBlur,\n            onChange,\n            onFocus,\n            onMouseEnter,\n            onMouseLeave,\n            ...rest\n        }: Props,\n        ref,\n    ) => {\n        const classes = classNames('toggle-container', className, {\n            'is-toggle-right-aligned': isToggleRightAligned,\n        });\n\n        const toggleElements = [\n            <div key=\"toggle-simple-switch\" className=\"toggle-simple-switch\" />,\n            <div key=\"toggle-simple-label\" className=\"toggle-simple-label\">\n                {label}\n            </div>,\n        ];\n        if (isToggleRightAligned) {\n            toggleElements.reverse();\n        }\n\n        return (\n            <div className={classes} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n                {/* eslint-disable-next-line jsx-a11y/label-has-for */}\n                <label className=\"toggle-simple\">\n                    <input\n                        checked={isOn}\n                        className=\"toggle-simple-input\"\n                        disabled={isDisabled}\n                        name={name}\n                        onBlur={onBlur}\n                        onChange={onChange}\n                        onFocus={onFocus}\n                        ref={ref}\n                        role=\"switch\"\n                        type=\"checkbox\"\n                        {...rest}\n                    />\n                    {toggleElements}\n                </label>\n                {description ? <div className=\"toggle-simple-description\">{description}</div> : null}\n            </div>\n        );\n    },\n);\nToggle.displayName = 'Toggle';\n\nexport type ToggleProps = Props;\nexport default Toggle;\n","import * as React from 'react';\n\nimport './RadioButton.scss';\n\n// @NOTE: readonly is not a valid attribute for input type radio so\n// this avoids the propType error that \"checked\" is set without \"onChange\"\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst onChangeStub = () => {};\n\nexport interface RadioButtonProps {\n    description?: React.ReactNode;\n    hideLabel?: boolean;\n    isDisabled?: boolean;\n    isSelected?: boolean;\n    label: React.ReactNode;\n    name?: string;\n    value: string;\n}\n\nconst RadioButton = ({\n    isDisabled,\n    isSelected = false,\n    description,\n    hideLabel = false,\n    label,\n    name,\n    value,\n    ...rest\n}: RadioButtonProps) => (\n    <div className=\"radio-container\">\n        {/* eslint-disable-next-line jsx-a11y/label-has-for */}\n        <label className=\"radio-label\">\n            <input\n                checked={isSelected}\n                disabled={isDisabled}\n                name={name}\n                onChange={onChangeStub}\n                type=\"radio\"\n                value={value}\n                {...rest}\n            />\n            <span />\n            <span className={hideLabel ? 'accessibility-hidden' : ''}>{label}</span>\n        </label>\n        {description ? <div className=\"radio-description\">{description}</div> : null}\n    </div>\n);\n\nexport default RadioButton;\n","import * as React from 'react';\n\nexport interface RadioGroupProps {\n    children: Array<React.ReactElement> | React.ReactElement;\n    className: string;\n    name?: string;\n    onChange?: Function;\n    value?: string;\n}\n\nexport interface RadioGroupState {\n    value?: string;\n}\n\nclass RadioGroup extends React.Component<RadioGroupProps, RadioGroupState> {\n    static defaultProps = {\n        className: '',\n    };\n\n    constructor(props: RadioGroupProps) {\n        super(props);\n        this.state = {\n            value: props.value,\n        };\n    }\n\n    // @TODO: think about adding componentDidUpdate or gDSFP\n    // to update the internal state value based on new props value\n    onChangeHandler = (event: React.SyntheticEvent<HTMLElement>) => {\n        const { target } = event;\n        const { onChange } = this.props;\n\n        if (target instanceof HTMLInputElement) {\n            this.setState({\n                value: target.value,\n            });\n        }\n\n        if (onChange) {\n            onChange(event);\n        }\n    };\n\n    render() {\n        const { children, className, name } = this.props;\n        const { value: stateValue } = this.state;\n\n        return (\n            <div className={`radio-group ${className}`} onChange={this.onChangeHandler}>\n                {React.Children.map(children, (radio: React.ReactElement) => {\n                    const { value } = radio.props;\n\n                    return React.cloneElement(radio, {\n                        name,\n                        isSelected: value === stateValue,\n                    });\n                })}\n            </div>\n        );\n    }\n}\n\nexport default RadioGroup;\n","import * as React from 'react';\nimport { FieldProps } from 'formik';\n\nimport RadioGroupPrimitive, { RadioGroupProps } from './RadioGroup';\n\nexport type RadioGroupFieldProps = Partial<FieldProps> & RadioGroupProps;\n\nconst RadioGroupField = ({ field, ...rest }: RadioGroupFieldProps) => {\n    if (!field) {\n        return <RadioGroupPrimitive value=\"\" {...rest} />;\n    }\n    return <RadioGroupPrimitive {...field} {...rest} />;\n};\n\nexport default RadioGroupField;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Toggle from '../../components/toggle';\nimport { RadioButton, RadioGroup } from '../../components/radio';\nimport Link from '../../components/link/Link';\nimport IconAlertDefault from '../../icons/general/IconAlertDefault';\nimport messages from './messages';\nimport './CascadePolicy.scss';\n\nconst COMMUNITY_LINK = 'https://community.box.com/t5/Organizing-and-Tracking-Content/Metadata/ta-p/30765';\n\ntype Props = {\n    canEdit: boolean,\n    isCascadingEnabled: boolean,\n    isCascadingOverwritten: boolean,\n    isCustomMetadata: boolean,\n    onCascadeModeChange: (value: boolean) => void,\n    onCascadeToggle: (value: boolean) => void,\n    shouldShowCascadeOptions: boolean,\n};\n\nconst CascadePolicy = ({\n    canEdit,\n    isCascadingEnabled,\n    isCascadingOverwritten,\n    isCustomMetadata,\n    onCascadeToggle,\n    onCascadeModeChange,\n    shouldShowCascadeOptions,\n}: Props) => {\n    const readOnlyState = isCascadingEnabled ? (\n        <div className=\"metadata-cascade-notice\">\n            <FormattedMessage {...messages.metadataCascadePolicyEnabledInfo} />\n        </div>\n    ) : null;\n\n    return canEdit ? (\n        <>\n            <div className=\"metadata-cascade-editor\">\n                <div className=\"metadata-cascade-enable\">\n                    <div>\n                        <FormattedMessage tagName=\"strong\" {...messages.enableCascadePolicy} />\n                        {!isCustomMetadata && (\n                            <Toggle\n                                className={`metadata-cascade-toggle ${\n                                    isCascadingEnabled ? 'cascade-on' : 'cascade-off'\n                                }`}\n                                isOn={isCascadingEnabled}\n                                label=\"\"\n                                onChange={e => onCascadeToggle(e.target.checked)}\n                            />\n                        )}\n                    </div>\n                    {!isCustomMetadata ? (\n                        <div className=\"cascade-policy-text\">\n                            <FormattedMessage {...messages.applyCascadePolicyText} />\n                            &nbsp;\n                            <Link className=\"cascade-policy-learnmore-link\" href={COMMUNITY_LINK} target=\"_blank\">\n                                <FormattedMessage {...messages.cascadePolicyLearnMore} />\n                            </Link>\n                        </div>\n                    ) : (\n                        <div>\n                            <FormattedMessage {...messages.cannotApplyCascadePolicyText} />\n                        </div>\n                    )}\n                </div>\n            </div>\n            {shouldShowCascadeOptions && (\n                <div className=\"metadata-cascade-editor\">\n                    <div className=\"metadata-cascading-mode\">\n                        <FormattedMessage {...messages.cascadePolicyModeQuestion} />\n\n                        <div className=\"metadata-operation-not-immediate\">\n                            <IconAlertDefault />\n                            <span>\n                                <FormattedMessage {...messages.operationNotImmediate} />\n                            </span>\n                        </div>\n                        <RadioGroup\n                            className=\"metadata-cascading-options\"\n                            onChange={e => onCascadeModeChange(e.target.value === 'overwrite')}\n                            value={isCascadingOverwritten ? 'overwrite' : 'skip'}\n                        >\n                            <RadioButton\n                                label={<FormattedMessage {...messages.cascadePolicySkipMode} />}\n                                value=\"skip\"\n                            />\n                            <RadioButton\n                                label={<FormattedMessage {...messages.cascadePolicyOverwriteMode} />}\n                                value=\"overwrite\"\n                            />\n                        </RadioGroup>\n                    </div>\n                </div>\n            )}\n        </>\n    ) : (\n        readOnlyState\n    );\n};\n\nexport default CascadePolicy;\n","// @flow\n\nimport * as React from 'react';\nimport getProp from 'lodash/get';\nimport type { FieldProps } from 'formik';\n\nimport TextInputPrimitive from './TextInput';\nimport type { TextInputProps } from './TextInput';\n\ntype Props = TextInputProps & FieldProps & { innerRef?: (instance: any) => void };\n\nconst TextInputField = ({ field, form, innerRef, isRequired, ...rest }: Props) => {\n    const { name } = field;\n    const { errors, touched } = form;\n    const isTouched = getProp(touched, name);\n    const error = isTouched ? getProp(errors, name) : null;\n    return <TextInputPrimitive {...field} {...rest} inputRef={innerRef} error={error} hideOptionalLabel={isRequired} />;\n};\n\nexport default TextInputField;\n","import { defineMessages } from 'react-intl';\n\nconst messages = defineMessages({\n    customAdd: {\n        defaultMessage: 'Add',\n        description: 'Label for the add button for custom metadata',\n        id: 'boxui.metadataInstanceFields.customAdd',\n    },\n    customRemove: {\n        defaultMessage: 'Remove',\n        description: 'Label for the remove button for custom metadata',\n        id: 'boxui.metadataInstanceFields.customRemove',\n    },\n    invalidMetadataFieldType: {\n        defaultMessage: 'Invalid metadata field type!',\n        description: \"Error message displayed if the template has an field type we don't recognize\",\n        id: 'boxui.metadataInstanceFields.invalidMetadataFieldType',\n    },\n    metadataFieldNoValue: {\n        defaultMessage: 'No Value',\n        description: 'Text to indicate no value exists',\n        id: 'boxui.metadataInstanceFields.fieldNoValue',\n    },\n    metadataFieldSelectValue: {\n        defaultMessage: 'Select Value',\n        description: 'Text to indicate to select a value from drop down list',\n        id: 'boxui.metadataInstanceFields.fieldSelectValue',\n    },\n    metadataFieldMultiSelectValue: {\n        defaultMessage: 'Select Values',\n        description: 'Text to indicate to select one or more values from dropdown list',\n        id: 'boxui.metadataInstanceFields.fieldMultiSelectValue',\n    },\n    metadataFieldSetValue: {\n        defaultMessage: 'Set Value',\n        description: 'Text to indicate to set a value',\n        id: 'boxui.metadataInstanceFields.fieldSetValue',\n    },\n    metadataFieldSetDate: {\n        defaultMessage: 'Set Date',\n        description: 'Text to indicate to set a date',\n        id: 'boxui.metadataInstanceFields.fieldSetDate',\n    },\n});\n\nexport default messages;\n","// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport TextInput from '../../components/text-input';\n\nimport messages from './messages';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport './TextMetadataField.scss';\n\ntype Props = {\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    error?: React.Node,\n    intl: any,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n    type?: string,\n};\n\nconst TextMetadataField = ({\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    error,\n    intl,\n    onChange,\n    onRemove,\n    type = 'text',\n}: Props) => {\n    let value = '';\n\n    if (typeof dataValue === 'number') {\n        value = dataValue;\n    } else if (dataValue) {\n        value = dataValue;\n    }\n\n    return (\n        <TextInput\n            className=\"bdl-TextMetadataField\"\n            description={description}\n            error={error}\n            hideOptionalLabel\n            label={displayName}\n            name={dataKey}\n            onChange={(event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n                const currentTarget = (event.currentTarget: HTMLInputElement);\n                if (currentTarget.value) {\n                    onChange(dataKey, currentTarget.value);\n                } else {\n                    onRemove(dataKey);\n                }\n            }}\n            placeholder={intl.formatMessage(messages.metadataFieldSetValue)}\n            type={type}\n            value={value}\n        />\n    );\n};\n\nexport { TextMetadataField as TextMetadataFieldBase };\nexport default injectIntl(TextMetadataField);\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconCheck = ({ className = '', color = '#000000', height = 24, title, width = 24 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-check ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 24 24\"\n        width={width}\n    >\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path className=\"fill-color\" d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\" fill={color} />\n    </AccessibleSVG>\n);\n\nexport default IconCheck;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport Tooltip from '../tooltip';\nimport type { Position } from '../tooltip';\nimport './SelectButton.scss';\n\ntype Props = {\n    children?: React.Node,\n    className: string,\n    error?: React.Node,\n    errorTooltipPosition?: Position,\n    isDisabled: boolean,\n    /** A CSS class for the tooltip's tether element component */\n    tooltipTetherClassName?: string,\n};\n\nconst SelectButton = React.forwardRef<Props, HTMLButtonElement>(\n    (\n        {\n            children,\n            className = '',\n            error,\n            errorTooltipPosition = 'middle-right',\n            isDisabled = false,\n            tooltipTetherClassName,\n            ...rest\n        }: Props,\n        ref,\n    ) => (\n        <Tooltip\n            isShown={!!error}\n            position={errorTooltipPosition}\n            tetherElementClassName={tooltipTetherClassName}\n            text={error}\n            theme=\"error\"\n        >\n            <button\n                className={classNames(className, 'select-button', 'bdl-SelectButton', {\n                    'is-invalid': !!error,\n                })}\n                disabled={isDisabled}\n                ref={ref}\n                type=\"button\"\n                {...rest}\n            >\n                {children}\n            </button>\n        </Tooltip>\n    ),\n);\n\nexport default SelectButton;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport type { SelectOptionValueProp } from './props';\nimport type { PopperChildrenProps } from '../popper/props';\n\nexport const OVERLAY_SCROLLABLE_CLASS = 'bdl-SelectField-overlay--scrollable';\n\ntype Props = {\n    children: React.Node,\n    innerRef?: React.Ref<any>,\n    isScrollable?: boolean,\n    multiple?: boolean,\n    selectFieldID: string,\n    selectedValues: Array<SelectOptionValueProp>,\n} & PopperChildrenProps;\n\nclass SelectFieldDropdown extends React.Component<Props> {\n    componentDidUpdate({ selectedValues: prevSelectedValues }) {\n        const { multiple, scheduleUpdate, selectedValues } = this.props;\n        if (multiple && scheduleUpdate && prevSelectedValues !== selectedValues) {\n            scheduleUpdate();\n        }\n    }\n\n    render() {\n        const { children, innerRef, style, placement, isScrollable, multiple, selectFieldID } = this.props;\n\n        const listboxProps = {};\n        if (multiple) {\n            listboxProps['aria-multiselectable'] = true;\n        }\n\n        return (\n            <ul\n                ref={innerRef}\n                style={style}\n                data-placement={placement}\n                className={classNames('bdl-SelectFieldDropdown', 'overlay', {\n                    [OVERLAY_SCROLLABLE_CLASS]: isScrollable,\n                })}\n                id={selectFieldID}\n                role=\"listbox\"\n                // preventDefault on mousedown so blur doesn't happen before click\n                onMouseDown={event => event.preventDefault()}\n                {...listboxProps}\n            >\n                {children}\n            </ul>\n        );\n    }\n}\n\nexport default React.forwardRef<Props, HTMLUListElement>((props: Props, ref) => (\n    <SelectFieldDropdown {...props} innerRef={ref} />\n));\n","/* eslint-disable react/jsx-sort-props */\nimport * as React from 'react';\nimport * as vars from '../../styles/variables';\nimport AccessibleSVG, { SVGProps } from '../../components/accessible-svg/AccessibleSVG';\n\n/**\n * This is an auto-generated component and should not be edited\n * manually in contributor pull requests.\n *\n * If you have problems with this component:\n * - https://github.com/box/box-ui-elements/issues/new?template=Bug_report.md\n *\n * If there are missing features in this component:\n * - https://github.com/box/box-ui-elements/issues/new?template=Feature_request.md\n */\n\nconst Search16 = (props: SVGProps) => (\n    <AccessibleSVG width={16} height={16} viewBox=\"0 0 16 16\" {...props}>\n        <path\n            fill={vars.bdlGray50}\n            fillRule=\"evenodd\"\n            d=\"M6.994 1a5.994 5.994 0 014.906 9.438l2.807 2.807a1 1 0 010 1.415l-.047.047a1 1 0 01-1.415 0L10.438 11.9A5.994 5.994 0 116.994 1zm0 1.998a3.996 3.996 0 100 7.992 3.996 3.996 0 000-7.992z\"\n        />\n    </AccessibleSVG>\n);\n\nexport default Search16;\n","// @flow\nimport * as React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\n\nimport ClearBadge16 from '../../icon/fill/ClearBadge16';\nimport Search16 from '../../icon/fill/Search16';\n\nimport makeLoadable from '../loading-indicator/makeLoadable';\n\nimport './SearchForm.scss';\n\nconst messages = defineMessages({\n    clearButtonTitle: {\n        defaultMessage: 'Clear',\n        description: 'Title for a clear button',\n        id: 'boxui.searchForm.clearButtonTitle',\n    },\n    searchButtonTitle: {\n        defaultMessage: 'Search',\n        description: 'Title for a search button',\n        id: 'boxui.searchForm.searchButtonTitle',\n    },\n    searchLabel: {\n        defaultMessage: 'Search query',\n        description: 'Label for a search input',\n        id: 'boxui.searchForm.searchLabel',\n    },\n});\n\ntype Props = {\n    /** Form submit action */\n    action?: string,\n    className?: string,\n    getSearchInput?: Function,\n    innerRef?: React.Ref<any>,\n    intl: Object,\n    isLoading?: boolean,\n    /** The way to send the form data, get or post */\n    method?: 'get' | 'post',\n    /** Name of the text input */\n    name?: string,\n    /** On change handler for the search input, debounced by 250ms */\n    onChange?: Function,\n    /** On submit handler for the search input */\n    onSubmit?: Function,\n    /** Extra query parameters in addition to the form data */\n    queryParams: { [arg: string]: string },\n    /** Boolean to prevent propogation of search clear action */\n    shouldPreventClearEventPropagation?: boolean,\n    /** If the clear button is shown when input field is not empty */\n    useClearButton?: boolean,\n    /** The value of the input if controlled */\n    value?: string,\n};\n\ntype DefaultProps = {\n    action: string,\n    method: 'get' | 'post',\n    name: string,\n    queryParams: { [arg: string]: string },\n    useClearButton: boolean,\n};\n\ntype IntlProps = {\n    intl: Object,\n};\n\ntype State = {\n    isEmpty: boolean,\n};\n\ntype Config = React.Config<Props, DefaultProps & IntlProps>;\n\nclass SearchFormBase extends React.Component<Props, State> {\n    static defaultProps: DefaultProps = {\n        action: '',\n        method: 'get',\n        name: 'search',\n        queryParams: {},\n        useClearButton: false,\n    };\n\n    state = {\n        isEmpty: true,\n    };\n\n    static getDerivedStateFromProps(props: Props): any {\n        const { value } = props;\n\n        if (value && !!value.trim()) {\n            return {\n                isEmpty: true,\n            };\n        }\n\n        return null;\n    }\n\n    onClearHandler = (event: SyntheticEvent<>) => {\n        const { onChange, shouldPreventClearEventPropagation } = this.props;\n        if (shouldPreventClearEventPropagation) {\n            event.stopPropagation();\n        }\n\n        if (this.searchInput) {\n            this.searchInput.value = '';\n        }\n        this.setState({ isEmpty: true });\n\n        if (onChange) {\n            onChange('');\n        }\n    };\n\n    onChangeHandler = ({ target }) => {\n        const { value } = target;\n        const { onChange } = this.props;\n        this.setState({ isEmpty: !value || !value.trim().length });\n\n        if (onChange) {\n            onChange(value);\n        }\n    };\n\n    onSubmitHandler = event => {\n        const { value } = event.target.elements[0];\n        const { onSubmit } = this.props;\n\n        if (onSubmit) {\n            onSubmit(value, event);\n        }\n    };\n\n    setInputRef = element => {\n        this.searchInput = element;\n\n        if (this.props.getSearchInput) {\n            this.props.getSearchInput(this.searchInput);\n        }\n    };\n\n    searchInput: ?HTMLInputElement;\n\n    render() {\n        const {\n            action,\n            className,\n            innerRef,\n            intl,\n            isLoading,\n            method,\n            name,\n            queryParams,\n            onSubmit,\n            useClearButton,\n            ...rest\n        } = this.props;\n        const { isEmpty } = this.state;\n\n        const inputProps = omit(rest, [\n            'getSearchInput',\n            'onChange',\n            'onSubmit',\n            'required',\n            'shouldPreventClearEventPropagation',\n        ]);\n\n        const { formatMessage } = intl;\n        const classes = classNames(className, 'search-input-container');\n        const formClassNames = classNames('search-form', {\n            'is-empty': isEmpty,\n            'use-clear-button': useClearButton,\n        });\n        const hiddenInputs = Object.keys(queryParams).map((param, index) => (\n            <input key={index} name={param} type=\"hidden\" value={queryParams[param]} />\n        ));\n\n        const SearchActions = () => (\n            <div className=\"action-buttons\">\n                {onSubmit ? (\n                    <button\n                        type=\"submit\"\n                        className=\"action-button search-button\"\n                        title={formatMessage(messages.searchButtonTitle)}\n                    >\n                        <Search16 />\n                    </button>\n                ) : (\n                    <div className=\"action-button search-button\">\n                        <Search16 />\n                    </div>\n                )}\n\n                <button\n                    className=\"action-button clear-button\"\n                    onClick={this.onClearHandler}\n                    title={formatMessage(messages.clearButtonTitle)}\n                    type=\"button\"\n                >\n                    <ClearBadge16 />\n                </button>\n            </div>\n        );\n\n        const LoadableSearchActions = makeLoadable(SearchActions);\n\n        // @NOTE Prevent errors from React about controlled inputs\n        const onChangeStub = () => {};\n\n        return (\n            <div ref={innerRef} className={classes}>\n                <form\n                    action={action}\n                    className={formClassNames}\n                    method={method}\n                    onChange={this.onChangeHandler}\n                    onSubmit={this.onSubmitHandler}\n                    role=\"search\"\n                >\n                    <input\n                        ref={this.setInputRef}\n                        aria-label={formatMessage(messages.searchLabel)}\n                        autoComplete=\"off\"\n                        className=\"search-input\"\n                        name={name}\n                        onChange={onChangeStub}\n                        type=\"search\"\n                        {...inputProps}\n                    />\n                    <LoadableSearchActions\n                        isLoading={isLoading}\n                        loadingIndicatorProps={{\n                            className: 'search-form-loading-indicator',\n                        }}\n                    />\n                    {hiddenInputs}\n                </form>\n            </div>\n        );\n    }\n}\n\nconst SearchFormBaseIntl = injectIntl(SearchFormBase);\nexport { SearchFormBaseIntl };\n\nconst SearchForm = React.forwardRef<Config, HTMLDivElement>((props: Config, ref: React.Ref<any>) => (\n    <SearchFormBaseIntl {...props} innerRef={ref} />\n));\nSearchForm.displayName = 'SearchForm';\n\nexport default SearchForm;\n","// @flow\nconst CLEAR: '__clear__' = '__clear__'; // value of clear option used in select-field components\n\nexport default CLEAR;\n","const ARROW_DOWN = 'ArrowDown';\nconst ARROW_UP = 'ArrowUp';\nconst ESCAPE = 'Escape';\nconst ENTER = 'Enter';\nconst SPACE = ' ';\nconst TAB = 'Tab';\n\nexport { ARROW_DOWN, ARROW_UP, ENTER, ESCAPE, SPACE, TAB };\n","import { defineMessages } from 'react-intl';\n\nconst messages = defineMessages({\n    clearAll: {\n        defaultMessage: 'Clear All',\n        description: 'text shown on the Clear All option in the options list',\n        id: 'boxui.selectField.clearAll',\n    },\n    searchPlaceholder: {\n        defaultMessage: 'Search',\n        description: 'Placeholder text shown in the search input',\n        id: 'boxui.selectField.searchPlaceholder',\n    },\n    noResults: {\n        defaultMessage: 'No Results',\n        description:\n            'Text shown in the select field dropdown when there are no options that match the search field input',\n        id: 'boxui.selectField.noResults',\n    },\n});\n\nexport default messages;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport findIndex from 'lodash/findIndex';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport { scrollIntoView } from '../../utils/dom';\nimport IconCheck from '../../icons/general/IconCheck';\nimport SelectButton from '../select-button';\nimport DatalistItem from '../datalist-item';\nimport PopperComponent from '../popper';\nimport SelectFieldDropdown from './SelectFieldDropdown';\nimport type { Position } from '../tooltip';\nimport type { SelectOptionValueProp, SelectOptionProp } from './props';\nimport { PLACEMENT_BOTTOM_END, PLACEMENT_BOTTOM_START } from '../popper/constants';\nimport SearchForm from '../search-form/SearchForm';\nimport CLEAR from './constants';\nimport { ARROW_DOWN, ARROW_UP, ENTER, ESCAPE, SPACE, TAB } from '../../common/keyboard-events';\n\nimport messages from './messages';\n\nimport './SelectField.scss';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\nfunction toggleOption(options, value) {\n    const index = options.indexOf(value);\n\n    if (index === -1) {\n        options.push(value);\n    } else {\n        options.splice(index, 1);\n    }\n}\n\ntype Props = {\n    /** List of classnames of the relatedTarget that should prevent handleBlur from firing */\n    blurExceptionClassNames?: Array<string>,\n    /** Props to add to the button element */\n    buttonProps?: Object,\n    /** CSS class for the select container */\n    className?: string,\n    /** The fallback option value when other options are all unselected. Default option cannot be selected at the same time as other options. `selectedValues` must not be empty when this option is used. */\n    defaultValue?: SelectOptionValueProp,\n    /** An optional error to show within a tooltip. */\n    error?: React.Node,\n    /** Position of error message tooltip */\n    errorTooltipPosition?: Position,\n    /* Intl object */\n    intl: Object,\n    /** The select button is disabled if true */\n    isDisabled?: boolean,\n    /** Whether to allow the dropdown to overflow its boundaries and remain attached to its reference */\n    isEscapedWithReference?: boolean,\n    /** Whether to align the dropdown to the right */\n    isRightAligned: boolean,\n    /** The select field overlay (dropdown) will have a scrollbar and max-height if true * */\n    isScrollable?: boolean,\n    multiple: boolean,\n    /** Function will be called with an array of all selected options after user selects a new option */\n    onChange: Function,\n    /** Function will be called with the user selected option (even on deselect or when the option was previously selected) */\n    onOptionSelect?: Function,\n    /** Function that allows custom rendering of select field options. When not provided the component will only render the option's displayText by default */\n    optionRenderer: (option: SelectOptionProp) => React.Node,\n    /** List of options (displayText, value) */\n    options: Array<SelectOptionProp>,\n    /** The select button text shown when no options are selected. */\n    placeholder?: string | React.Element<any>,\n    /** The currently selected option values (can be empty) */\n    selectedValues: Array<SelectOptionValueProp>,\n    /** Array of ordered indices indicating where to insert separators (ex. index 2 means insert a separator after option 2) */\n    separatorIndices: Array<number>,\n    /** Boolean to determine whether or not to show the clear option */\n    shouldShowClearOption?: boolean,\n    /** Boolean to determine whether or not to show the search field */\n    shouldShowSearchInput?: boolean,\n    /** The select button text (by default, component will use comma separated list of all selected option displayText) */\n    title?: string | React.Element<any>,\n    /** A CSS class for the tooltip's tether element component */\n    tooltipTetherClassName?: string,\n};\n\ntype State = {\n    activeItemID: ?string,\n    activeItemIndex: number,\n    isOpen: boolean,\n    searchText: string,\n    shouldScrollIntoView: boolean,\n};\n\nfunction defaultOptionRenderer({ displayText }: SelectOptionProp) {\n    return (\n        <span className=\"bdl-SelectField-optionText\" title={displayText}>\n            {displayText}\n        </span>\n    );\n}\n\nclass BaseSelectField extends React.Component<Props, State> {\n    static defaultProps = {\n        buttonProps: {},\n        isDisabled: false,\n        isRightAligned: false,\n        isScrollable: false,\n        multiple: false,\n        optionRenderer: defaultOptionRenderer,\n        options: [],\n        selectedValues: [],\n        separatorIndices: [],\n        shouldShowClearOption: false,\n        shouldShowSearchInput: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.selectFieldID = uniqueId('selectfield');\n\n        this.selectFieldContainerRef = React.createRef();\n\n        this.state = {\n            activeItemID: null,\n            activeItemIndex: -1,\n            isOpen: false,\n            searchText: '',\n            shouldScrollIntoView: false,\n        };\n    }\n\n    componentWillUnmount() {\n        if (this.state.isOpen) {\n            // Clean-up global click handlers\n            document.removeEventListener('click', this.handleDocumentClick);\n        }\n    }\n\n    updateSearchText = (text: string) => {\n        const { options } = this.props;\n        const optionIndex = findIndex(options, element =>\n            element.displayText.toLowerCase().includes(text.toLowerCase()),\n        );\n\n        if (optionIndex >= 0) {\n            this.setActiveItem(optionIndex);\n        }\n\n        this.setState({\n            searchText: text,\n        });\n    };\n\n    handleDocumentClick = (event: MouseEvent) => {\n        const container = this.selectFieldContainerRef.current;\n        const isInside =\n            (container && event.target instanceof Node && container.contains(event.target)) ||\n            container === event.target;\n\n        if (!isInside) {\n            this.closeDropdown();\n        }\n    };\n\n    setActiveItem = (index: number, shouldScrollIntoView?: boolean = true) => {\n        this.setState({ activeItemIndex: index, shouldScrollIntoView });\n        if (index === -1) {\n            this.setActiveItemID(null);\n        }\n    };\n\n    setActiveItemID = (id: ?string) => {\n        const { shouldScrollIntoView } = this.state;\n        const itemEl = id ? document.getElementById(id) : null;\n\n        this.setState({ activeItemID: id, shouldScrollIntoView: false }, () => {\n            if (shouldScrollIntoView) {\n                scrollIntoView(itemEl, { block: 'nearest' });\n            }\n        });\n    };\n\n    selectFieldID: string;\n\n    selectFieldContainerRef: { current: null | HTMLDivElement };\n\n    searchInputRef: HTMLInputElement;\n\n    handleChange = (selectedItems: Array<SelectOptionProp>) => {\n        const { onChange } = this.props;\n\n        if (onChange) {\n            onChange(selectedItems);\n        }\n    };\n\n    handleOptionSelect = (selectedItem: SelectOptionProp) => {\n        const { onOptionSelect } = this.props;\n\n        if (onOptionSelect) {\n            onOptionSelect(selectedItem);\n        }\n    };\n\n    handleButtonClick = () => {\n        if (this.state.isOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    };\n\n    handleClearClick = () => {\n        this.handleChange([]);\n    };\n\n    handleButtonKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const { activeItemIndex } = this.state;\n\n        // If user is interacting with the select dropdown, don't close on space/enter (i.e. prevent click event)\n        if ((event.key === SPACE || event.key === ENTER) && activeItemIndex !== -1) {\n            event.preventDefault();\n        }\n    };\n\n    handleBlur = (event?: SyntheticFocusEvent<>) => {\n        const { isOpen } = this.state;\n        const { blurExceptionClassNames = [] } = this.props;\n\n        const exceptionClasses = ['search-input', 'select-button', ...blurExceptionClassNames];\n\n        if (\n            isOpen &&\n            event &&\n            event.relatedTarget &&\n            exceptionClasses.every(\n                className => event && !(event.relatedTarget: window.HTMLInputElement).classList.contains(className),\n            )\n        ) {\n            this.closeDropdown();\n        }\n    };\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<HTMLDivElement>) => {\n        const { key } = event;\n        const { options, shouldShowClearOption, shouldShowSearchInput } = this.props;\n        const { activeItemIndex, isOpen } = this.state;\n        const itemCount = options.length;\n        switch (key) {\n            case ARROW_DOWN:\n                stopDefaultEvent(event);\n                if (isOpen) {\n                    const nextIndex = activeItemIndex === itemCount - 1 ? -1 : activeItemIndex + 1;\n                    this.setActiveItem(nextIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case ARROW_UP:\n                stopDefaultEvent(event);\n                if (isOpen) {\n                    const prevIndex = activeItemIndex === -1 ? itemCount - 1 : activeItemIndex - 1;\n                    this.setActiveItem(prevIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case ENTER:\n            case SPACE:\n                if (shouldShowSearchInput) {\n                    // Allow space key presses in the search string when search field is active\n                    if (key === SPACE) {\n                        break;\n                    }\n\n                    // Enter presses should be ignored when no item is active\n                    if (key === ENTER && activeItemIndex === -1) {\n                        stopDefaultEvent(event);\n                        break;\n                    }\n                }\n\n                if (activeItemIndex !== -1 && isOpen) {\n                    stopDefaultEvent(event);\n                    const isClearOption = shouldShowClearOption && activeItemIndex === 0;\n                    if (isClearOption) {\n                        this.handleClearClick();\n                    } else {\n                        this.selectOption(activeItemIndex);\n                    }\n                    // Enter always closes dropdown (even for multiselect)\n                    if (key === ENTER) {\n                        this.closeDropdown();\n                    }\n                }\n                break;\n            case ESCAPE:\n                if (isOpen) {\n                    stopDefaultEvent(event);\n                    this.closeDropdown();\n                }\n                break;\n            case TAB:\n                if (isOpen) {\n                    this.closeDropdown();\n                }\n                break;\n            default: {\n                if (!shouldShowSearchInput) {\n                    stopDefaultEvent(event);\n                    const lowerCaseKey = key.toLowerCase();\n                    const optionIndex = findIndex(\n                        options,\n                        option => option.displayText.toLowerCase().indexOf(lowerCaseKey) === 0,\n                    );\n\n                    if (optionIndex >= 0) {\n                        this.setActiveItem(optionIndex);\n                    }\n                }\n            }\n        }\n    };\n\n    openDropdown = () => {\n        const { shouldShowSearchInput } = this.props;\n        if (!this.state.isOpen) {\n            this.setState(\n                { isOpen: true },\n                () => shouldShowSearchInput && this.searchInputRef && this.searchInputRef.focus(),\n            );\n            document.addEventListener('click', this.handleDocumentClick);\n        }\n    };\n\n    closeDropdown = () => {\n        if (this.state.isOpen) {\n            this.setState({\n                activeItemID: null,\n                activeItemIndex: -1,\n                isOpen: false,\n                searchText: '',\n            });\n            document.removeEventListener('click', this.handleDocumentClick);\n        }\n    };\n\n    selectOption = (index: number) => {\n        const { multiple } = this.props;\n\n        if (multiple) {\n            this.selectMultiOption(index);\n        } else {\n            this.selectSingleOption(index);\n            this.closeDropdown(); // Close dropdown for single select fields\n        }\n    };\n\n    getFilteredOptions = (): Array<SelectOptionProp> => {\n        const { options } = this.props;\n        const { searchText } = this.state;\n\n        return options.filter(option => {\n            const isSubstring = option.displayText.toLowerCase().includes(searchText.toLowerCase());\n            const isClearOption = option.value === CLEAR;\n\n            return searchText ? isSubstring && !isClearOption : true;\n        });\n    };\n\n    selectSingleOption(index: number) {\n        const { selectedValues } = this.props;\n        const item = this.getFilteredOptions()[index];\n        // If item not previously selected, fire change handler\n        if (!selectedValues.includes(item.value)) {\n            this.handleChange([item]);\n        }\n        this.handleOptionSelect(item);\n    }\n\n    selectMultiOption = (index: number) => {\n        const { defaultValue, options, selectedValues } = this.props;\n        const hasDefaultValue = defaultValue != null; // Checks if not undefined or null\n        const item = this.getFilteredOptions()[index];\n\n        // If we are already using the default option, just return without firing onChange\n        if (hasDefaultValue && defaultValue === item.value) {\n            this.selectSingleOption(index);\n            return;\n        }\n\n        // Copy the array so we can freely modify it\n        const newSelectedValues = selectedValues.slice(0);\n        toggleOption(newSelectedValues, item.value);\n\n        // Apply constraints if a defaultValue is specified\n        if (hasDefaultValue) {\n            const defaultOptionIndex = findIndex(options, option => option.value === defaultValue);\n\n            if (defaultOptionIndex !== -1) {\n                if (newSelectedValues.length === 0) {\n                    // If nothing is selected, we should select the default option\n                    this.selectSingleOption(defaultOptionIndex);\n                    return;\n                }\n                if (newSelectedValues.length > 1 && newSelectedValues.includes(defaultValue)) {\n                    // Remove the default option from the selected values when more than one thing is selected\n                    newSelectedValues.splice(defaultOptionIndex, 1);\n                }\n            }\n        }\n\n        // Fire onchange event with selected items\n        this.handleChange(options.filter(option => newSelectedValues.includes(option.value)));\n\n        this.handleOptionSelect(item);\n    };\n\n    renderButtonText = () => {\n        const { options, placeholder, selectedValues, title } = this.props;\n        const selectedItemCount = selectedValues.length;\n\n        // When there are no options selected, render placeholder\n        if (selectedItemCount === 0 && placeholder) {\n            return placeholder;\n        }\n\n        // User-specified title when options are selected\n        if (title) {\n            return title;\n        }\n\n        // Auto-generate button title based on selected options\n        const selectedOptions = options.filter(option => selectedValues.includes(option.value));\n        return selectedOptions.map(option => option.displayText).join(', ');\n    };\n\n    renderSearchInput = () => {\n        const { intl } = this.props;\n        const { searchText } = this.state;\n        const getSearchInput = element => {\n            this.searchInputRef = element;\n        };\n\n        return (\n            <SearchForm\n                className=\"select-field-search-container\"\n                getSearchInput={getSearchInput}\n                onChange={this.updateSearchText}\n                placeholder={intl.formatMessage(messages.searchPlaceholder)}\n                value={searchText}\n            />\n        );\n    };\n\n    renderSelectButton = () => {\n        const { activeItemID, isOpen } = this.state;\n        const {\n            buttonProps: buttonElProps,\n            isDisabled,\n            className,\n            error,\n            errorTooltipPosition,\n            tooltipTetherClassName,\n        } = this.props;\n        const buttonText = this.renderButtonText();\n        const buttonProps = {\n            ...buttonElProps,\n            'aria-activedescendant': activeItemID,\n            'aria-autocomplete': 'list',\n            'aria-expanded': isOpen,\n            'aria-owns': this.selectFieldID,\n            className,\n            isDisabled,\n            onClick: this.handleButtonClick,\n            onKeyDown: this.handleButtonKeyDown,\n            // @NOTE: Technically, only text inputs should be combo-boxes but ARIA specs do not cover custom select dropdowns\n            role: 'listbox',\n            title: buttonText,\n        };\n\n        return (\n            // Need to store the select button reference so we can calculate the button width\n            // in order to set it as the min width of the dropdown list\n            <SelectButton\n                {...buttonProps}\n                error={error}\n                errorTooltipPosition={errorTooltipPosition}\n                tooltipTetherClassName={tooltipTetherClassName}\n            >\n                {buttonText}\n            </SelectButton>\n        );\n    };\n\n    renderSelectOptions = () => {\n        const { optionRenderer, selectedValues, separatorIndices, shouldShowClearOption } = this.props;\n        const { activeItemIndex } = this.state;\n\n        const filteredOptions = this.getFilteredOptions();\n\n        if (filteredOptions.length === 0) {\n            return (\n                <DatalistItem className=\"select-option is-disabled\">\n                    <FormattedMessage {...messages.noResults} />\n                </DatalistItem>\n            );\n        }\n\n        const selectOptions = filteredOptions.map<React.Element<typeof DatalistItem | 'li'>>((item, index) => {\n            const { value } = item;\n\n            const isSelected = selectedValues.includes(value);\n\n            const isClearOption = shouldShowClearOption && value === CLEAR;\n\n            const itemProps: Object = {\n                className: classNames('select-option', { 'is-clear-option': isClearOption }),\n                key: index,\n                /* preventDefault on click to prevent wrapping label from re-triggering the select button */\n                onClick: event => {\n                    event.preventDefault();\n                    if (isClearOption) {\n                        this.handleClearClick();\n                    } else {\n                        this.selectOption(index);\n                    }\n                },\n                onMouseEnter: () => {\n                    this.setActiveItem(index, false);\n                },\n                setActiveItemID: this.setActiveItemID,\n            };\n\n            if (index === activeItemIndex) {\n                itemProps.isActive = true;\n            }\n\n            itemProps.isSelected = isSelected;\n\n            // The below actually does have a key, but eslint can't catch that\n            /* eslint-disable react/jsx-key */\n            return (\n                <DatalistItem {...itemProps}>\n                    <div className=\"select-option-check-icon\">\n                        {isSelected ? <IconCheck height={16} width={16} /> : null}\n                    </div>\n                    {optionRenderer(item)}\n                </DatalistItem>\n            );\n            /* eslint-enable react/jsx-key */\n        });\n\n        separatorIndices.forEach((separatorIndex, index) => {\n            selectOptions.splice(separatorIndex + index, 0, <li key={`separator${separatorIndex}`} role=\"separator\" />);\n        });\n\n        return selectOptions;\n    };\n\n    render() {\n        const {\n            className,\n            multiple,\n            isEscapedWithReference,\n            isRightAligned,\n            isScrollable,\n            selectedValues,\n            shouldShowSearchInput,\n        } = this.props;\n        const { isOpen } = this.state;\n\n        // @TODO: Need invariants on specific conditions.\n        // 1) # of options should be non-zero\n        // 2) selectedValues, if defined, should all exist in options\n        // 3) defaultValue, if defined, should exist in options\n        // 4) defaultValue, if defined, should mean selectedValues is never empty\n        // 5) defaultValue, if defined, cannot be selected in addition to other options (must be exclusive)\n\n        const dropdownPlacement = isRightAligned ? PLACEMENT_BOTTOM_END : PLACEMENT_BOTTOM_START;\n        // popper.js modifier to allow dropdown to overflow its boundaries and remain attached to its reference\n        const dropdownModifiers = isEscapedWithReference ? { preventOverflow: { escapeWithReference: true } } : {};\n\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            <div\n                className={classNames(className, 'bdl-SelectField', 'select-container')}\n                onBlur={this.handleBlur}\n                onKeyDown={this.handleKeyDown}\n                ref={this.selectFieldContainerRef}\n            >\n                <PopperComponent placement={dropdownPlacement} isOpen={isOpen} modifiers={dropdownModifiers}>\n                    {this.renderSelectButton()}\n                    <SelectFieldDropdown\n                        isScrollable={isScrollable}\n                        multiple={multiple}\n                        selectedValues={selectedValues}\n                        selectFieldID={this.selectFieldID}\n                    >\n                        {shouldShowSearchInput && this.renderSearchInput()}\n                        {this.renderSelectOptions()}\n                    </SelectFieldDropdown>\n                </PopperComponent>\n            </div>\n        );\n    }\n}\n\nexport { BaseSelectField as BaseSelectFieldBase };\nexport default injectIntl(BaseSelectField);\n","// @flow\nimport * as React from 'react';\nimport omit from 'lodash/omit';\nimport { injectIntl } from 'react-intl';\n\nimport BaseSelectField from './BaseSelectField';\nimport type { SelectOptionValueProp, SelectOptionProp } from './props';\nimport CLEAR from './constants';\nimport messages from './messages';\n\ntype Props = {\n    /** The type of the field */\n    fieldType?: string,\n    /* Intl object */\n    intl: Object,\n    /** The select field is disabled if true */\n    isDisabled?: boolean,\n    /** The select field overlay (dropdown) will have a scrollbar and max-height if true * */\n    isScrollable?: boolean,\n    /** The currently selected option value */\n    onChange: Function,\n    /** List of options (displayText, value) */\n    options: Array<SelectOptionProp>,\n    /** The placeholder text for the field  */\n    placeholder?: string | React.Node,\n    /** Function will be called with the selected option after user selects a new option */\n    selectedValue?: SelectOptionValueProp,\n    /** Will show Clear All option */\n    shouldShowClearOption?: boolean,\n};\n\nclass SingleSelectField extends React.Component<Props> {\n    handleChange = (selectedOptions: Array<SelectOptionProp>) => {\n        const { onChange, fieldType } = this.props;\n\n        // There should only ever be 1 selected item\n        if (onChange && selectedOptions.length === 1) {\n            onChange(selectedOptions[0], fieldType);\n        } else if (selectedOptions.length === 0) {\n            onChange({ value: null });\n        }\n    };\n\n    render() {\n        const { intl, isDisabled, selectedValue, placeholder, shouldShowClearOption, options, ...rest } = this.props;\n\n        // @TODO: Invariant testing\n        // 1) selectedValue is required to be contained in the options\n        // 2) # of options should be non-zero\n\n        // Make sure to omit passed props that could be interpreted incorrectly by the base component\n        const selectFieldProps = omit(rest, ['defaultValue', 'multiple', 'onChange']);\n\n        // If selectedValue is passed in, map it to the multi selected equivalent\n        const isFieldSelected = selectedValue !== null;\n        selectFieldProps.selectedValues = !isFieldSelected ? [] : [selectedValue];\n\n        const optionsWithClearOption = shouldShowClearOption\n            ? [\n                  {\n                      value: CLEAR,\n                      displayText: intl.formatMessage(messages.clearAll),\n                  },\n                  ...options,\n              ]\n            : options;\n\n        return (\n            <BaseSelectField\n                className={!isFieldSelected && placeholder ? 'placeholder' : ''}\n                isDisabled={isDisabled}\n                onChange={this.handleChange}\n                placeholder={placeholder}\n                options={optionsWithClearOption}\n                shouldShowClearOption={shouldShowClearOption}\n                {...selectFieldProps}\n            />\n        );\n    }\n}\n\nexport { SingleSelectField as SingleSelectFieldBase };\nexport default injectIntl(SingleSelectField);\n","// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport Label from '../../components/label/Label';\nimport SingleSelectField from '../../components/select-field/SingleSelectField';\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataTemplateFieldOption } from '../../common/types/metadata';\nimport './EnumMetadataField.scss';\n\ntype Option = {\n    displayText: string,\n    isSelectable: boolean,\n    value: string,\n};\n\ntype Props = {\n    blurExceptionClassNames?: Array<string>,\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    intl: any,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n    options?: Array<MetadataTemplateFieldOption>,\n};\n\nconst EnumMetadataField = ({\n    blurExceptionClassNames,\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    intl,\n    onChange,\n    onRemove,\n    options = [],\n}: Props) => {\n    const selectOptions = options.map(option => ({\n        displayText: option.key,\n        value: option.key,\n        isSelectable: true,\n    }));\n\n    const defaultValue = intl.formatMessage(messages.metadataFieldSelectValue);\n\n    selectOptions.unshift({\n        displayText: defaultValue,\n        value: defaultValue,\n        isSelectable: false,\n    });\n\n    return (\n        <div className=\"bdl-EnumMetadataField\">\n            <Label text={displayName}>\n                {!!description && <i className=\"bdl-EnumMetadataField-desc\">{description}</i>}\n                <SingleSelectField\n                    blurExceptionClassNames={blurExceptionClassNames}\n                    isEscapedWithReference\n                    isScrollable\n                    onChange={(option: Option) => {\n                        if (option.isSelectable) {\n                            onChange(dataKey, option.value);\n                        } else if (onRemove) {\n                            onRemove(dataKey);\n                        }\n                    }}\n                    options={selectOptions}\n                    selectedValue={\n                        // Conditional to make flow happy, dataValue should never be an array\n                        Array.isArray(dataValue) ? dataValue.join(', ') : dataValue || defaultValue\n                    }\n                />\n            </Label>\n        </div>\n    );\n};\n\nexport { EnumMetadataField as EnumMetadataFieldBase };\nexport default injectIntl(EnumMetadataField);\n","// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport DatePicker from '../../components/date-picker';\nimport { convertISOStringToUTCDate } from '../../utils/datetime';\nimport messages from './messages';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport './DateMetadataField.scss';\n\ntype Props = {\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    intl: any,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n};\n\nconst DateMetadataField = ({ dataKey, dataValue, displayName, description, intl, onChange, onRemove }: Props) => (\n    <DatePicker\n        className=\"bdl-DateMetadataField\"\n        dateFormat=\"utcISOString\"\n        description={description}\n        displayFormat={{\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric',\n        }}\n        hideOptionalLabel\n        label={displayName}\n        onChange={(date: Date, isoDate: string) => {\n            if (isoDate) {\n                onChange(dataKey, isoDate);\n            } else {\n                onRemove(dataKey);\n            }\n        }}\n        placeholder={intl.formatMessage(messages.metadataFieldSetDate)}\n        value={typeof dataValue === 'string' ? convertISOStringToUTCDate(dataValue) : undefined}\n    />\n);\n\nexport { DateMetadataField as DateMetadataFieldBase };\nexport default injectIntl(DateMetadataField);\n","// @flow\n\nexport const FIELD_TYPE_DATE: 'date' = 'date';\nexport const FIELD_TYPE_ENUM: 'enum' = 'enum';\nexport const FIELD_TYPE_INTEGER: 'integer' = 'integer';\nexport const FIELD_TYPE_FLOAT: 'float' = 'float';\nexport const FIELD_TYPE_MULTISELECT: 'multiSelect' = 'multiSelect';\nexport const FIELD_TYPE_STRING: 'string' = 'string';\n","// @flow\nimport { FIELD_TYPE_FLOAT, FIELD_TYPE_INTEGER } from './constants';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\n\nconst floatRegex = /^[-+]?[0-9]*\\.?[0-9]*$/;\nconst integerRegex = /^[-+]?[0-9]+$/;\n\nconst floatValidator = (value: string) => !!value.match(floatRegex);\nconst integerValidator = (value: string) => !!value.match(integerRegex);\n\nconst isValidValue = (type: string, value: MetadataFieldValue) => {\n    if (type === FIELD_TYPE_FLOAT && typeof value === 'string') {\n        return floatValidator(value);\n    }\n\n    if (type === FIELD_TYPE_INTEGER && typeof value === 'string') {\n        return integerValidator(value);\n    }\n\n    return true;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { isValidValue };\n","// @flow\nimport * as React from 'react';\n\nimport TextMetadataField from './TextMetadataField';\nimport { isValidValue } from './validateMetadataField';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\n\ntype Props = {\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    error?: React.Node,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n    type: string,\n};\n\nconst FloatMetadataField = ({\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    error,\n    onChange,\n    onRemove,\n    type,\n}: Props) => (\n    <TextMetadataField\n        dataKey={dataKey}\n        dataValue={dataValue}\n        description={description}\n        displayName={displayName}\n        error={error}\n        onChange={(key: string, value: MetadataFieldValue) => {\n            if (isValidValue(type, value)) {\n                onChange(key, value);\n            }\n        }}\n        onRemove={onRemove}\n    />\n);\n\nexport default FloatMetadataField;\n","// @flow\nimport * as React from 'react';\n\nimport TextMetadataField from './TextMetadataField';\nimport { isValidValue } from './validateMetadataField';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\n\ntype Props = {\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    error?: React.Node,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n    type: string,\n};\n\nconst IntegerMetadataField = ({\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    error,\n    onChange,\n    onRemove,\n    type,\n}: Props) => (\n    <TextMetadataField\n        dataKey={dataKey}\n        dataValue={dataValue}\n        description={description}\n        displayName={displayName}\n        error={error}\n        onChange={(key: string, value: MetadataFieldValue) => {\n            if (isValidValue(type, value)) {\n                onChange(key, value);\n            }\n        }}\n        onRemove={onRemove}\n    />\n);\n\nexport default IntegerMetadataField;\n","// @flow\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport type { SelectOptionProp } from './props';\nimport BaseSelectField from './BaseSelectField';\nimport CLEAR from './constants';\nimport messages from './messages';\n\ntype Props = {\n    /* Intl object */\n    intl: Object,\n    /** Function will be called with an array of all selected options after user selects a new option */\n    onChange: Function,\n    /** List of options (displayText, value) */\n    options: Array<SelectOptionProp>,\n    /** Boolean to determine whether or not to show the clear option */\n    shouldShowClearOption?: boolean,\n    /** Will show Search Field  */\n    shouldShowSearchInput?: boolean,\n};\n\nconst optionsWithClearOption = (options: Array<Object>, shouldShowClearOption?: boolean, intl: Object) => {\n    return shouldShowClearOption\n        ? [\n              {\n                  value: CLEAR,\n                  displayText: intl.formatMessage(messages.clearAll),\n              },\n              ...options,\n          ]\n        : options;\n};\n\nconst MultiSelectField = ({ intl, options, shouldShowClearOption, ...rest }: Props) => (\n    <BaseSelectField\n        {...rest}\n        shouldShowClearOption={shouldShowClearOption}\n        options={optionsWithClearOption(options, shouldShowClearOption, intl)}\n        multiple\n    />\n);\n\nexport { MultiSelectField as MultiSelectFieldBase };\nexport default injectIntl(MultiSelectField);\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Label from '../../components/label/Label';\nimport MultiSelect from '../../components/select-field/MultiSelectField';\nimport type { SelectOptionProp } from '../../components/select-field/props';\n\nimport messages from './messages';\n\nimport type { MetadataFieldValue, MetadataTemplateFieldOption } from '../../common/types/metadata';\n\nimport './MultiSelectMetadataField.scss';\n\ntype Props = {\n    blurExceptionClassNames?: Array<string>,\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n    options?: Array<MetadataTemplateFieldOption>,\n};\n\nconst MultiSelectMetadataField = ({\n    blurExceptionClassNames,\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    onChange,\n    onRemove,\n    options = [],\n}: Props) => {\n    const placeholder = <FormattedMessage {...messages.metadataFieldMultiSelectValue} />;\n\n    return (\n        <div className=\"bdl-MultiSelectMetadataField\">\n            <Label text={displayName}>\n                {!!description && <i className=\"bdl-MultiSelectMetadataField-desc\">{description}</i>}\n                <MultiSelect\n                    blurExceptionClassNames={blurExceptionClassNames}\n                    isEscapedWithReference\n                    isScrollable\n                    onChange={(selectedOptions: Array<SelectOptionProp>) => {\n                        if (selectedOptions.length) {\n                            onChange(\n                                dataKey,\n                                selectedOptions.map(({ value }) => value),\n                            );\n                        } else {\n                            onRemove(dataKey);\n                        }\n                    }}\n                    options={options.map(option => ({\n                        displayText: option.key,\n                        value: option.key,\n                    }))}\n                    placeholder={placeholder}\n                    selectedValues={dataValue}\n                />\n            </Label>\n        </div>\n    );\n};\n\nexport { MultiSelectMetadataField as MultiSelectMetadataFieldBase };\nexport default MultiSelectMetadataField;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage, FormattedDate } from 'react-intl';\n\nimport { convertISOStringToUTCDate } from '../../utils/datetime';\n\nimport { FIELD_TYPE_DATE } from './constants';\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataFieldType } from '../../common/types/metadata';\nimport './ReadOnlyMetadataField.scss';\n\ntype Props = {\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    type: MetadataFieldType,\n};\n\nconst ReadOnlyMetadataField = ({ dataValue, description, displayName, type }: Props) => {\n    let value = <FormattedMessage tagName=\"i\" {...messages.metadataFieldNoValue} />;\n\n    if (dataValue || typeof dataValue === 'number') {\n        if (typeof dataValue === 'string' && type === FIELD_TYPE_DATE) {\n            value = (\n                <FormattedDate day=\"numeric\" month=\"long\" value={convertISOStringToUTCDate(dataValue)} year=\"numeric\" />\n            );\n        } else if (Array.isArray(dataValue)) {\n            value = dataValue.join(', ');\n        } else {\n            value = dataValue;\n        }\n    }\n\n    return (\n        <dl className=\"bdl-ReadOnlyMetadataField\">\n            <dt>{displayName}</dt>\n            {!!description && <i className=\"bdl-ReadOnlyMetadataField-desc\">{description}</i>}\n            <dd>{value}</dd>\n        </dl>\n    );\n};\n\nexport default ReadOnlyMetadataField;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport InlineError from '../../components/inline-error/InlineError';\n\nimport TextMetadataField from './TextMetadataField';\nimport EnumMetadataField from './EnumMetadataField';\nimport DateMetadataField from './DateMetadataField';\nimport FloatMetadataField from './FloatMetadataField';\nimport IntegerMetadataField from './IntegerMetadataField';\nimport MultiSelectMetadataField from './MultiSelectMetadataField';\nimport ReadOnlyMetadataField from './ReadOnlyMetadataField';\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataTemplateFieldOption, MetadataFieldType } from '../../common/types/metadata';\n\nimport {\n    FIELD_TYPE_ENUM,\n    FIELD_TYPE_FLOAT,\n    FIELD_TYPE_INTEGER,\n    FIELD_TYPE_STRING,\n    FIELD_TYPE_DATE,\n    FIELD_TYPE_MULTISELECT,\n} from './constants';\n\ntype Props = {\n    blurExceptionClassNames?: Array<string>,\n    canEdit: boolean,\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    error?: React.Node,\n    isHidden?: boolean,\n    onChange?: (key: string, value: MetadataFieldValue) => void,\n    onRemove?: (key: string) => void,\n    options?: Array<MetadataTemplateFieldOption>,\n    type: MetadataFieldType,\n};\n\nconst MetadataField = ({\n    blurExceptionClassNames,\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    error,\n    isHidden,\n    canEdit,\n    onChange,\n    onRemove,\n    options,\n    type,\n}: Props) => {\n    if (isHidden) {\n        return null;\n    }\n\n    if (!canEdit) {\n        return (\n            <ReadOnlyMetadataField\n                dataValue={dataValue}\n                description={description}\n                displayName={displayName}\n                type={type}\n            />\n        );\n    }\n\n    if (!onChange || !onRemove) {\n        throw new Error('Need to have onChange and onRemove');\n    }\n\n    switch (type) {\n        case FIELD_TYPE_STRING:\n            return (\n                <TextMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                />\n            );\n\n        case FIELD_TYPE_FLOAT:\n            return (\n                <FloatMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    error={error}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    type={type}\n                />\n            );\n\n        case FIELD_TYPE_INTEGER:\n            return (\n                <IntegerMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    error={error}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    type={type}\n                />\n            );\n\n        case FIELD_TYPE_ENUM:\n            return (\n                <EnumMetadataField\n                    blurExceptionClassNames={blurExceptionClassNames}\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    options={options}\n                />\n            );\n\n        case FIELD_TYPE_MULTISELECT:\n            return (\n                <MultiSelectMetadataField\n                    blurExceptionClassNames={blurExceptionClassNames}\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    options={options}\n                />\n            );\n\n        case FIELD_TYPE_DATE:\n            return (\n                <DateMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                />\n            );\n\n        default:\n            return (\n                <InlineError title={type}>\n                    <FormattedMessage {...messages.invalidMetadataFieldType} />\n                </InlineError>\n            );\n    }\n};\n\nexport default MetadataField;\n","// @flow\nimport type { MetadataTemplateField, MetadataTemplate } from '../../common/types/metadata';\n\nconst isHidden = (obj: MetadataTemplate | MetadataTemplateField): boolean => {\n    return !!obj.isHidden || !!obj.hidden;\n};\n\n/**\n * Utility function for converting a string or array of strings into a Set object\n * @param templateFilters - Array<string> | string\n * @returns {Set<T>}\n */\nconst normalizeTemplateFilters = (templateFilters: Array<string> | string): Set<string> => {\n    return typeof templateFilters === 'string' ? new Set([templateFilters]) : new Set(templateFilters);\n};\n\n/**\n * Utility function for cloning an array of metadata templates and filtering the templates and fields if necessary\n * @param templates Array<MetadataTemplate>\n * @param selectedTemplateKey - string\n * @param templateFilters - Array<string> | string\n * @returns {Array<T>}\n */\nconst normalizeTemplates = (\n    templates: Array<MetadataTemplate>,\n    selectedTemplateKey?: string,\n    templateFilters?: Array<string> | string,\n): Array<MetadataTemplate> => {\n    if (!selectedTemplateKey) {\n        return [...templates];\n    }\n    const clonedTemplates = templates.filter(template => template.templateKey === selectedTemplateKey);\n    const fields = clonedTemplates[0] ? clonedTemplates[0].fields : null;\n    if (templateFilters && fields) {\n        const normalizedFilters = normalizeTemplateFilters(templateFilters);\n        clonedTemplates[0].fields = fields.filter(field => normalizedFilters.has(field.id));\n    }\n    return clonedTemplates;\n};\n\nexport { isHidden, normalizeTemplates, normalizeTemplateFilters };\n","// @flow\nimport * as React from 'react';\n\nexport default React.createContext<{ blurExceptionClassNames?: Array<string> }>({ blurExceptionClassNames: [] });\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport MetadataField from '../metadata-instance-fields/MetadataField';\nimport messages from './messages';\nimport { isHidden } from './metadataUtil';\nimport type { MetadataFields, MetadataTemplate, MetadataFieldValue } from '../../common/types/metadata';\nimport MetadataInstanceEditorContext from './MetadataInstanceEditorContext';\nimport './TemplatedInstance.scss';\n\ntype Props = {\n    canEdit: boolean,\n    data: MetadataFields,\n    errors: { [string]: React.Node },\n    onFieldChange?: (key: string, value: MetadataFieldValue, type: string) => void,\n    onFieldRemove?: (key: string) => void,\n    template: MetadataTemplate,\n};\n\nconst TemplatedInstance = ({ canEdit, data = {}, errors, onFieldChange, onFieldRemove, template }: Props) => {\n    const { fields = [] } = template;\n    const hasFields = fields.length > 0;\n    const hasVisibleFields = hasFields && fields.some(field => !isHidden(field));\n    const showNoFieldsMessage = !hasFields;\n    const showHiddenFieldsMessage = hasFields && !hasVisibleFields;\n    const { blurExceptionClassNames } = React.useContext(MetadataInstanceEditorContext);\n\n    return (\n        <>\n            {hasVisibleFields &&\n                fields.map(field => (\n                    <MetadataField\n                        key={field.id}\n                        blurExceptionClassNames={blurExceptionClassNames}\n                        canEdit={canEdit}\n                        dataKey={field.key}\n                        dataValue={data[field.key]}\n                        description={field.description}\n                        displayName={field.displayName}\n                        error={errors[field.key]}\n                        isHidden={isHidden(field)} // Checking both isHidden and hidden attributes due to differences in V2 and V3 APIs\n                        onChange={(key: string, value: MetadataFieldValue) => {\n                            if (canEdit && onFieldChange) {\n                                onFieldChange(key, value, field.type);\n                            }\n                        }}\n                        onRemove={(key: string) => {\n                            if (canEdit && onFieldRemove) {\n                                onFieldRemove(key);\n                            }\n                        }}\n                        options={field.options}\n                        type={field.type}\n                    />\n                ))}\n            {showHiddenFieldsMessage && (\n                <div className=\"attributes-hidden-message\">\n                    <FormattedMessage {...messages.allAttributesAreHidden} />\n                </div>\n            )}\n            {showNoFieldsMessage && (\n                <div className=\"no-attributes-message\">\n                    <FormattedMessage {...messages.noAttributesForTemplate} />\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default TemplatedInstance;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport TextInput from '../../components/text-input/TextInput';\nimport Tooltip from '../../components/tooltip/Tooltip';\nimport commonMessages from '../../common/messages';\nimport IconInfo from '../../icons/general/IconInfo';\n\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataFields } from '../../common/types/metadata';\nimport './CustomInstanceNewField.scss';\n\ntype Props = {\n    intl: any,\n    isCancellable: boolean,\n    onAdd: (key: string, value: MetadataFieldValue) => void,\n    onCancel: () => void,\n    properties: MetadataFields,\n};\n\ntype State = {\n    error: React.Node,\n    key: string,\n    value: string,\n};\n\nclass CustomInstanceNewField extends React.PureComponent<Props, State> {\n    state: State = {\n        key: '',\n        value: '',\n        error: '',\n    };\n\n    /**\n     * Common change handler\n     *\n     * @param {Event} event - keyboard event\n     * @param {string} attr - key or value\n     * @return {void}\n     */\n    onChange(event: SyntheticKeyboardEvent<HTMLInputElement>, attr: string) {\n        const currentTarget = (event.currentTarget: HTMLInputElement);\n        this.setState({\n            error: '',\n            [attr]: currentTarget.value,\n        });\n    }\n\n    /**\n     * Change handler for the key\n     *\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onKeyChange = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        this.onChange(event, 'key');\n    };\n\n    /**\n     * Change handler for the value\n     *\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onValueChange = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        this.onChange(event, 'value');\n    };\n\n    /**\n     * Persists the new metadata added or shows an error\n     *\n     * @return {void}\n     */\n    onAdd = () => {\n        const { key, value }: State = this.state;\n        const { onAdd, properties }: Props = this.props;\n        if (Object.prototype.hasOwnProperty.call(properties, key)) {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorDuplicateKey} />,\n            });\n        } else if (key.startsWith('$')) {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorInternalKey} />,\n            });\n        } else if (key) {\n            onAdd(key, value);\n        } else {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorRequired} />,\n            });\n        }\n    };\n\n    render() {\n        const { intl, isCancellable, onCancel }: Props = this.props;\n        const { key, value, error }: State = this.state;\n        return (\n            <div className=\"custom-new-field\">\n                <div className=\"custom-new-field-header\">\n                    <FormattedMessage tagName=\"h5\" {...messages.customNewField} />\n                    <Tooltip text={<FormattedMessage {...messages.customNewFieldMessage} />}>\n                        <div tabIndex=\"-1\">\n                            <IconInfo color=\"#777\" height={18} width={18} />\n                        </div>\n                    </Tooltip>\n                </div>\n                <TextInput\n                    error={error}\n                    isRequired\n                    label={<FormattedMessage {...messages.customKey} />}\n                    onChange={this.onKeyChange}\n                    placeholder={intl.formatMessage(messages.customKeyPlaceholder)}\n                    type=\"text\"\n                    value={key}\n                />\n                <TextInput\n                    hideOptionalLabel\n                    label={<FormattedMessage {...messages.customValue} />}\n                    onChange={this.onValueChange}\n                    placeholder={intl.formatMessage(messages.customValuePlaceholder)}\n                    type=\"text\"\n                    value={value}\n                />\n                <div className=\"custom-new-field-actions\">\n                    {isCancellable && (\n                        <Button data-resin-target=\"metadata-customfieldcancel\" onClick={onCancel} type=\"button\">\n                            <FormattedMessage {...commonMessages.cancel} />\n                        </Button>\n                    )}\n                    <Button data-resin-target=\"metadata-customfieldadd\" onClick={this.onAdd} type=\"button\">\n                        <FormattedMessage {...messages.customAdd} />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { CustomInstanceNewField as CustomInstanceNewFieldBase };\nexport default injectIntl(CustomInstanceNewField);\n","import * as React from 'react';\n\nimport './ButtonGroup.scss';\n\nexport interface ButtonGroupProps {\n    /** A group of buttons */\n    children: React.ReactNode;\n    /** Class name for ButtonGroup */\n    className?: string;\n    /** Boolean describing whether the button is disabled or not */\n    isDisabled?: boolean;\n}\n\nconst ButtonGroup = ({ children, className = '', isDisabled }: ButtonGroupProps) => (\n    <div className={`btn-group ${className} ${isDisabled ? 'is-disabled' : ''}`}>{children}</div>\n);\n\nexport default ButtonGroup;\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconMinusThin = ({ className = '', color = '#222', height = 1, title, width = 9 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-minus-thin ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 9 1\"\n        width={width}\n    >\n        <path className=\"fill-color\" d=\"M0 0h9v1H0z\" fill={color} fillRule=\"evenodd\" />\n    </AccessibleSVG>\n);\n\nexport default IconMinusThin;\n","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconPlusThin = ({ className = '', color = '#222', height = 9, title, width = 9 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-plus-thin ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 9 9\"\n        width={width}\n    >\n        <path className=\"fill-color\" d=\"M5 4V0H4v4H0v1h4v4h1V5h4V4H5z\" fill={color} fillRule=\"evenodd\" />\n    </AccessibleSVG>\n);\n\nexport default IconPlusThin;\n","// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport ButtonGroup from '../../components/button-group/ButtonGroup';\nimport IconMinus from '../../icons/general/IconMinusThin';\nimport IconPlus from '../../icons/general/IconPlusThin';\nimport Field from './MetadataField';\nimport messages from './messages';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport './CustomMetadataField.scss';\n\ntype Props = {\n    canEdit: boolean,\n    dataKey: string,\n    dataValue: MetadataFieldValue,\n    intl: any,\n    isLast: boolean,\n    onAdd: () => void,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n};\n\nconst COLOR_999 = '#999';\n\nconst CustomMetadataField = ({ intl, canEdit, isLast, dataKey, dataValue, onAdd, onChange, onRemove }: Props) => {\n    const addBtn = (\n        <Button\n            aria-label={intl.formatMessage(messages.customAdd)}\n            data-resin-target=\"metadata-customfieldnew\"\n            onClick={onAdd}\n            type=\"button\"\n        >\n            <IconPlus color={COLOR_999} />\n        </Button>\n    );\n\n    const removeBtn = (\n        <Button\n            aria-label={intl.formatMessage(messages.customRemove)}\n            data-resin-target=\"metadata-customfieldremove\"\n            onClick={() => {\n                if (onRemove) {\n                    onRemove(dataKey);\n                }\n            }}\n            type=\"button\"\n        >\n            <IconMinus color={COLOR_999} />\n        </Button>\n    );\n\n    return (\n        <div className=\"bdl-CustomMetadataField\">\n            <Field\n                canEdit={canEdit}\n                dataKey={dataKey}\n                dataValue={dataValue}\n                displayName={dataKey}\n                onChange={onChange}\n                // Custom metadata doesn't allow removing of props if the value is emptied out, leave it as empty string\n                onRemove={(key: string) => onChange(key, '')}\n                type=\"string\"\n            />\n            {canEdit && (\n                <div className=\"bdl-CustomMetadataField-customActions\">\n                    {isLast ? (\n                        <ButtonGroup>\n                            {removeBtn}\n                            {addBtn}\n                        </ButtonGroup>\n                    ) : (\n                        removeBtn\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport { CustomMetadataField as CustomMetadataFieldBase };\nexport default injectIntl(CustomMetadataField);\n","// @flow\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport CustomNewField from './CustomInstanceNewField';\nimport CustomMetadataField from '../metadata-instance-fields/CustomMetadataField';\nimport EmptyContent from './EmptyContent';\nimport { FIELD_TYPE_STRING } from '../metadata-instance-fields/constants';\nimport type { MetadataFieldValue, MetadataFields } from '../../common/types/metadata';\n\ntype Props = {\n    canEdit: boolean,\n    data: MetadataFields,\n    onFieldChange?: (key: string, value: MetadataFieldValue, type: string) => void,\n    onFieldRemove?: (key: string) => void,\n};\n\ntype State = {\n    isAddFieldVisible: boolean,\n    properties: MetadataFields,\n};\n\nclass CustomInstance extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        canEdit: true,\n        data: {},\n    };\n\n    static getDerivedStateFromProps({ data }: Props, { properties }: State): any {\n        if (!isEqual(data, properties)) {\n            return {\n                properties: { ...data },\n            };\n        }\n\n        return null;\n    }\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isAddFieldVisible: false,\n            properties: { ...props.data },\n        };\n    }\n\n    /**\n     * Adds/updates a new metadata key value pair\n     *\n     * @param {string} key - metadata key\n     * @param {string} value - metadata value\n     * @return {void}\n     */\n    onFieldChange = (key: string, value: MetadataFieldValue) => {\n        const { canEdit, onFieldChange }: Props = this.props;\n        if (canEdit && onFieldChange) {\n            onFieldChange(key, value, FIELD_TYPE_STRING);\n        }\n    };\n\n    /**\n     * Adds/updates a new metadata key value pair\n     *\n     * @param {string} key - metadata key\n     * @param {string} value - metadata value\n     * @return {void}\n     */\n    onFieldRemove = (key: string) => {\n        const { canEdit, onFieldRemove }: Props = this.props;\n        if (canEdit && onFieldRemove) {\n            onFieldRemove(key);\n        }\n    };\n\n    /**\n     * Shows the add new field field\n     *\n     * @return {void}\n     */\n    onAddFieldToggle = () => {\n        this.setState(prevState => ({\n            isAddFieldVisible: !prevState.isAddFieldVisible,\n        }));\n    };\n\n    render() {\n        const { canEdit }: Props = this.props;\n        const { isAddFieldVisible, properties }: State = this.state;\n        const fields = Object.keys(properties);\n        const canAddFields = canEdit && (isAddFieldVisible || fields.length === 0);\n\n        return (\n            <>\n                {fields.map((key, index) => (\n                    <CustomMetadataField\n                        key={key}\n                        canEdit={canEdit}\n                        dataKey={key}\n                        dataValue={properties[key]}\n                        isLast={!isAddFieldVisible && index === fields.length - 1}\n                        onAdd={this.onAddFieldToggle}\n                        onChange={this.onFieldChange}\n                        onRemove={this.onFieldRemove}\n                    />\n                ))}\n                {!canAddFields && fields.length === 0 && <EmptyContent />}\n                {canAddFields && (\n                    <CustomNewField\n                        isCancellable={fields.length !== 0}\n                        onAdd={this.onFieldChange}\n                        onCancel={this.onAddFieldToggle}\n                        properties={this.props.data}\n                    />\n                )}\n            </>\n        );\n    }\n}\n\nexport default CustomInstance;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport PrimaryButton from '../../components/primary-button/PrimaryButton';\n\nimport messages from './messages';\n\nimport './MetadataInstanceConfirmDialog.scss';\n\ntype Props = {\n    confirmationMessage: string | React.Node,\n    onCancel: Function,\n    onConfirm: Function,\n};\n\nconst MetadataInstanceConfirmDialog = ({ onCancel, onConfirm, confirmationMessage }: Props) => {\n    const cancelButtonRef = React.useRef<any | null>(null);\n\n    React.useEffect(() => {\n        if (cancelButtonRef.current) {\n            cancelButtonRef.current.btnElement.focus();\n        }\n    }, []);\n\n    return (\n        <div className=\"metadata-instance-confirm-cover\">\n            <div className=\"metadata-instance-confim-container\" role=\"alert\">\n                <p className=\"metadata-instance-confirm-text\">{confirmationMessage}</p>\n                <div className=\"metadata-instance-confirm-buttons\">\n                    <Button\n                        ref={cancelButtonRef}\n                        data-resin-target=\"metadata-confirmcancel\"\n                        onClick={onCancel}\n                        type=\"button\"\n                    >\n                        <FormattedMessage {...messages.metadataCancel} />\n                    </Button>\n                    <PrimaryButton data-resin-target=\"metadata-confirmremove\" onClick={onConfirm} type=\"button\">\n                        <FormattedMessage {...messages.customRemove} />\n                    </PrimaryButton>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MetadataInstanceConfirmDialog;\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport PlainButton from '../../components/plain-button/PlainButton';\nimport PrimaryButton from '../../components/primary-button/PrimaryButton';\n\nimport messages from './messages';\nimport './Footer.scss';\n\ntype Props = {\n    onCancel: () => void,\n    onRemove: () => void,\n    showSave: boolean,\n};\n\nconst Footer = ({ onCancel, onRemove, showSave }: Props) => (\n    <div className=\"metadata-instance-editor-footer\">\n        <div className=\"metadata-instance-editor-footer-delete\">\n            <PlainButton data-resin-target=\"metadata-instanceremove\" onClick={onRemove} type=\"button\">\n                <FormattedMessage {...messages.metadataRemoveTemplate} />\n            </PlainButton>\n        </div>\n        <div className=\"metadata-instance-editor-footer-save-cancel\">\n            <Button data-resin-target=\"metadata-instancecancel\" onClick={onCancel} type=\"button\">\n                <FormattedMessage {...messages.metadataCancel} />\n            </Button>\n            {showSave && (\n                <PrimaryButton data-resin-target=\"metadata-instancesave\">\n                    <FormattedMessage {...messages.metadataSave} />\n                </PrimaryButton>\n            )}\n        </div>\n    </div>\n);\n\nexport default Footer;\n","// @flow\n\nconst TEMPLATE_CUSTOM_PROPERTIES: 'properties' = 'properties';\nexport default TEMPLATE_CUSTOM_PROPERTIES;\n","// @flow\nconst ITEM_TYPE_FILE: 'file' = 'file';\nconst ITEM_TYPE_FOLDER: 'folder' = 'folder';\nconst ITEM_TYPE_WEBLINK: 'web_link' = 'web_link';\n\nconst JSON_PATCH_OP_ADD: 'add' = 'add';\nconst JSON_PATCH_OP_REMOVE: 'remove' = 'remove';\nconst JSON_PATCH_OP_REPLACE: 'replace' = 'replace';\nconst JSON_PATCH_OP_TEST: 'test' = 'test';\n\nconst METADATA_FIELD_TYPE_ENUM: 'enum' = 'enum';\nconst METADATA_FIELD_TYPE_MULTISELECT: 'multiSelect' = 'multiSelect';\n\nexport {\n    ITEM_TYPE_FILE,\n    ITEM_TYPE_FOLDER,\n    ITEM_TYPE_WEBLINK,\n    JSON_PATCH_OP_ADD,\n    JSON_PATCH_OP_REMOVE,\n    JSON_PATCH_OP_REPLACE,\n    JSON_PATCH_OP_TEST,\n    METADATA_FIELD_TYPE_ENUM,\n    METADATA_FIELD_TYPE_MULTISELECT,\n};\n","// @flow\nimport * as React from 'react';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport cloneDeep from 'lodash/cloneDeep';\nimport noop from 'lodash/noop';\n\nimport Collapsible from '../../components/collapsible/Collapsible';\nimport Form from '../../components/form-elements/form/Form';\nimport LoadingIndicatorWrapper from '../../components/loading-indicator/LoadingIndicatorWrapper';\nimport PlainButton from '../../components/plain-button/PlainButton';\nimport Tooltip from '../../components/tooltip';\nimport IconMetadataColored from '../../icons/general/IconMetadataColored';\nimport IconAlertCircle from '../../icons/general/IconAlertCircle';\nimport IconEdit from '../../icons/general/IconEdit';\nimport { bdlWatermelonRed } from '../../styles/variables';\nimport { scrollIntoView } from '../../utils/dom';\n\nimport CascadePolicy from './CascadePolicy';\nimport TemplatedInstance from './TemplatedInstance';\nimport CustomInstance from './CustomInstance';\nimport MetadataInstanceConfirmDialog from './MetadataInstanceConfirmDialog';\nimport Footer from './Footer';\nimport messages from './messages';\nimport { FIELD_TYPE_FLOAT, FIELD_TYPE_INTEGER } from '../metadata-instance-fields/constants';\nimport TEMPLATE_CUSTOM_PROPERTIES from './constants';\nimport {\n    JSON_PATCH_OP_REMOVE,\n    JSON_PATCH_OP_ADD,\n    JSON_PATCH_OP_REPLACE,\n    JSON_PATCH_OP_TEST,\n} from '../../common/constants';\nimport { isValidValue } from '../metadata-instance-fields/validateMetadataField';\nimport { isHidden } from './metadataUtil';\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport type {\n    MetadataFields,\n    MetadataTemplate,\n    MetadataCascadePolicy,\n    MetadataCascadingPolicyData,\n    MetadataTemplateField,\n    MetadataFieldValue,\n} from '../../common/types/metadata';\nimport type { JSONPatchOperations } from '../../common/types/api';\nimport './Instance.scss';\n\ntype Props = {\n    canEdit: boolean,\n    cascadePolicy?: MetadataCascadePolicy, // eslint-disable-line\n    data: MetadataFields,\n    hasError: boolean,\n    id: string,\n    intl: Object,\n    isCascadingPolicyApplicable?: boolean,\n    isDirty: boolean,\n    isOpen: boolean,\n    onModification?: (id: string, isDirty: boolean, type?: string) => void,\n    onRemove?: (id: string) => void,\n    onSave?: (\n        id: string,\n        data: JSONPatchOperations,\n        cascadingPolicy?: MetadataCascadingPolicyData,\n        rawData: Object,\n    ) => void,\n    template: MetadataTemplate,\n};\n\ntype State = {\n    data: Object,\n    errors: { [string]: React.Node },\n    isBusy: boolean,\n    isCascadingEnabled: boolean,\n    isCascadingOverwritten: boolean,\n    isEditing: boolean,\n    shouldConfirmRemove: boolean,\n    shouldShowCascadeOptions: boolean,\n};\n\nconst createFieldKeyToTypeMap = (fields?: Array<MetadataTemplateField> = []) =>\n    fields.reduce((prev, { key, type }) => {\n        prev[key] = type;\n        return prev;\n    }, {});\n\nconst getValue = (data: Object, key: string, type: string) => {\n    const value = data[key];\n\n    switch (type) {\n        case FIELD_TYPE_FLOAT:\n            return parseFloat(value);\n\n        case FIELD_TYPE_INTEGER:\n            return parseInt(value, 10);\n\n        default:\n            return value;\n    }\n};\n\nclass Instance extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        data: {},\n        isDirty: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getState(props);\n        this.fieldKeyToTypeMap = createFieldKeyToTypeMap(props.template.fields);\n    }\n\n    componentDidUpdate({ hasError: prevHasError, isDirty: prevIsDirty }: Props, prevState: State): void {\n        const currentElement = this.collapsibleRef.current;\n        const { hasError, isDirty }: Props = this.props;\n        const { isEditing }: State = prevState;\n\n        if (currentElement && this.state.shouldConfirmRemove) {\n            scrollIntoView(currentElement, {\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n\n        if (hasError && hasError !== prevHasError) {\n            // If hasError is true, which means an error occurred while\n            // doing a network operation and hence hide the busy indicator\n            // Saving also disables isEditing, so need to enable that back.\n            // isDirty remains as it was before.\n            this.setState({ isBusy: false, isEditing: true });\n        } else if (prevIsDirty && !isDirty) {\n            // If the form was dirty and now its not dirty\n            // we know a successful save may have happened.\n            // We don't modify isEditing here because we maintain the\n            // prior state for that. If we came here from a save\n            // success then save already disabled isEditing.\n            if (isEditing) {\n                // We are still editing so don't reset it\n                this.setState({ isBusy: false });\n            } else {\n                // For a successfull save we reset cascading overwrite radio\n                this.setState({ isBusy: false, isCascadingOverwritten: false });\n            }\n        }\n    }\n\n    /**\n     * Undo any changes made\n     *\n     * @return {void}\n     */\n    onCancel = (): void => {\n        const { id, onModification }: Props = this.props;\n        this.setState(this.getState(this.props));\n\n        // Callback to parent to tell that something is dirty\n        if (onModification) {\n            onModification(id, false);\n        }\n    };\n\n    /**\n     * Allows a user to confirm metadata instance removal\n     *\n     * @return {void}\n     */\n    onConfirmRemove = (): void => {\n        this.setState({ shouldConfirmRemove: true });\n    };\n\n    /**\n     * Cancel the remove instance attempt\n     *\n     * @return {void}\n     */\n    onConfirmCancel = (): void => {\n        this.setState({ shouldConfirmRemove: false });\n    };\n\n    /**\n     * Removes an instance\n     *\n     * @return {void}\n     */\n    onRemove = (): void => {\n        if (!this.isEditing()) {\n            return;\n        }\n\n        const { id, onRemove }: Props = this.props;\n        if (onRemove) {\n            onRemove(id);\n            this.setState({ isBusy: true });\n        }\n    };\n\n    /**\n     * Saves instance data\n     *\n     * @return {void}\n     */\n    onSave = (): void => {\n        const {\n            cascadePolicy,\n            data: originalData,\n            id,\n            isDirty,\n            isCascadingPolicyApplicable,\n            onSave,\n        }: Props = this.props;\n        const { data: currentData, errors, isCascadingEnabled, isCascadingOverwritten }: State = this.state;\n\n        if (!this.isEditing() || !isDirty || !onSave || Object.keys(errors).length) {\n            return;\n        }\n\n        this.setState({\n            isBusy: true,\n            isEditing: false,\n            shouldShowCascadeOptions: false,\n        });\n        onSave(\n            id,\n            this.createJSONPatch(currentData, originalData),\n            isCascadingPolicyApplicable\n                ? {\n                      canEdit: cascadePolicy ? cascadePolicy.canEdit : false,\n                      id: cascadePolicy ? cascadePolicy.id : undefined,\n                      isEnabled: isCascadingEnabled,\n                      overwrite: isCascadingOverwritten,\n                  }\n                : undefined,\n            cloneDeep(currentData),\n        );\n    };\n\n    /**\n     * Updates a key value in the instance data\n     *\n     * @param {string} key - key to update\n     * @param {FieldValue} value - value to update\n     * @param {string} type - type of field\n     * @return {void}\n     */\n    onFieldChange = (key: string, value: MetadataFieldValue, type: string): void => {\n        const { data, errors }: State = this.state;\n\n        // Don't do anything if data is the same or not in edit mode\n        if (!this.isEditing() || isEqual(data[key], value)) {\n            return;\n        }\n\n        const isValid = isValidValue(type, value);\n        const finalErrors = { ...errors };\n        const finalData = cloneDeep(data);\n        finalData[key] = value;\n\n        if (isValid) {\n            delete finalErrors[key];\n        } else {\n            finalErrors[key] = <FormattedMessage {...messages.invalidInput} />;\n        }\n\n        this.setState({ data: finalData, errors: finalErrors }, () => {\n            this.setDirty(type);\n        });\n    };\n\n    /**\n     * Removes a key from instance data\n     *\n     * @param {string} key - key to remove\n     * @return {void}\n     */\n    onFieldRemove = (key: string): void => {\n        if (!this.isEditing()) {\n            return;\n        }\n\n        const { data, errors }: State = this.state;\n        const finalData = cloneDeep(data);\n        const finalErrors = { ...errors };\n        delete finalData[key];\n        delete finalErrors[key];\n        this.setState({ data: finalData, errors: finalErrors }, this.setDirty);\n    };\n\n    /**\n     * Toggle cascading policy\n     *\n     * @param {boolean} value - true when turned on\n     * @return {void}\n     */\n    onCascadeToggle = (value: boolean) => {\n        const { isCascadingPolicyApplicable }: Props = this.props;\n        if (!isCascadingPolicyApplicable) {\n            return;\n        }\n\n        this.setState(\n            {\n                isCascadingEnabled: value,\n                shouldShowCascadeOptions: value,\n            },\n            this.setDirty,\n        );\n    };\n\n    /**\n     * Changes the cascade mode.\n     * isCascadingOverwritten is slways false to start off.\n     *\n     * @param {boolean} value - true when overwrite policy is chosen\n     * @return {void}\n     */\n    onCascadeModeChange = (value: boolean): void => {\n        const { isCascadingPolicyApplicable }: Props = this.props;\n        if (!isCascadingPolicyApplicable) {\n            return;\n        }\n\n        this.setState(\n            {\n                isCascadingOverwritten: value,\n            },\n            this.setDirty,\n        );\n    };\n\n    /**\n     * Returns the state from props\n     *\n     * @return {Object} - react state\n     */\n    getState(props: Props): State {\n        return {\n            data: cloneDeep(props.data),\n            errors: {},\n            isBusy: false,\n            isCascadingEnabled: this.isCascadingEnabled(props),\n            isCascadingOverwritten: false,\n            isEditing: false,\n            shouldConfirmRemove: false,\n            shouldShowCascadeOptions: false,\n        };\n    }\n\n    /**\n     * Returns the card title with possible error mark\n     *\n     * @return {Object} - react title element\n     */\n    getTitle(): React.Node {\n        const { cascadePolicy = {}, hasError, isCascadingPolicyApplicable, template }: Props = this.props;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n\n        const type = isCascadingPolicyApplicable && cascadePolicy.id ? 'cascade' : 'default';\n\n        return (\n            <span className=\"metadata-instance-editor-instance-title\">\n                <IconMetadataColored type={type} />\n                <span\n                    className={classNames('metadata-instance-editor-instance-title-text', {\n                        'metadata-instance-editor-instance-has-error': hasError,\n                    })}\n                >\n                    {isProperties ? <FormattedMessage {...messages.customTitle} /> : template.displayName}\n                </span>\n                {hasError && <IconAlertCircle color={bdlWatermelonRed} />}\n            </span>\n        );\n    }\n\n    /**\n     * Render the correct delete message to show based on custom metadata and file/folder metadata\n     */\n    renderDeleteMessage = (isFile: boolean, template: Object) => {\n        let message;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n\n        if (isProperties) {\n            message = isFile ? 'fileMetadataRemoveCustomTemplateConfirm' : 'folderMetadataRemoveCustomTemplateConfirm';\n        } else {\n            message = isFile ? 'fileMetadataRemoveTemplateConfirm' : 'folderMetadataRemoveTemplateConfirm';\n        }\n\n        return (\n            <FormattedMessage\n                {...messages[message]}\n                values={{\n                    metadataName: template.displayName,\n                }}\n            />\n        );\n    };\n\n    /**\n     * Get the delete confirmation message base on the template key\n     */\n    getConfirmationMessage(): React.Node {\n        const { template, isCascadingPolicyApplicable }: Props = this.props;\n        const isFile = !isCascadingPolicyApplicable;\n        return this.renderDeleteMessage(isFile, template);\n    }\n\n    /**\n     * Evaluates if the metadata was changed or cascading policy\n     * altered or enabled.\n     *\n     * @return {void}\n     */\n    setDirty = (type?: string): void => {\n        const { id, isCascadingPolicyApplicable, onModification }: Props = this.props;\n        const { data, isCascadingEnabled, isCascadingOverwritten } = this.state;\n        const hasDataChanged = !isEqual(data, this.props.data);\n        let hasCascadingChanged = false;\n\n        if (isCascadingPolicyApplicable) {\n            // isCascadingOverwritten always starts out as false, so true signifies a change\n            hasCascadingChanged = isCascadingOverwritten || isCascadingEnabled !== this.isCascadingEnabled(this.props);\n        }\n\n        // Callback to parent to tell that something is dirty\n        if (onModification) {\n            onModification(id, hasDataChanged || hasCascadingChanged, type);\n        }\n    };\n\n    collapsibleRef: {\n        current: null | HTMLDivElement,\n    } = React.createRef();\n\n    fieldKeyToTypeMap: Object;\n\n    /**\n     * Determines if cascading policy is enabled based on\n     * whether it has an id or not.\n     *\n     * @param {Object} props - component props\n     * @return {boolean} true if cascading policy is enabled\n     */\n    isCascadingEnabled(props: Props) {\n        if (props.cascadePolicy) {\n            return !!props.cascadePolicy.id;\n        }\n        return false;\n    }\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditing: !prevState.isEditing,\n        }));\n    };\n\n    /**\n     * Creates JSON Patch operations from the passed in\n     * data while comparing it to the original data from props.\n     *\n     * Only diffs at the root level and primitives.\n     *\n     * @param {*} currentData - the latest changes by the user\n     * @param {*} originalData - the original values\n     * @return {Array} - JSON patch operations\n     */\n    createJSONPatch(currentData: Object, originalData: Object): JSONPatchOperations {\n        const ops = [];\n        const data = cloneDeep(currentData); // clone the data for mutation\n\n        // Iterate over the original data and find keys that have changed.\n        // Also remove them from the data object to only leave new keys.\n        Object.keys(originalData).forEach(key => {\n            const type = this.fieldKeyToTypeMap[key];\n            const originalValue = getValue(originalData, key, type);\n            const path = `/${key}`;\n\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                const value = getValue(data, key, type);\n\n                // Only register changed data\n                if (!isEqual(value, originalValue)) {\n                    // Add a test OP for each replaces\n                    ops.push({\n                        op: JSON_PATCH_OP_TEST,\n                        path,\n                        value: originalValue,\n                    });\n                    ops.push({\n                        op: JSON_PATCH_OP_REPLACE,\n                        path,\n                        value,\n                    });\n                }\n            } else {\n                // Key was removed\n                // Add a test OP for removes\n                ops.push({\n                    op: JSON_PATCH_OP_TEST,\n                    path,\n                    value: originalValue,\n                });\n                ops.push({ op: JSON_PATCH_OP_REMOVE, path });\n            }\n            delete data[key];\n        });\n\n        // Iterate over the remaining keys that are new.\n        Object.keys(data).forEach(key => {\n            const type = this.fieldKeyToTypeMap[key];\n            const value = getValue(data, key, type);\n\n            ops.push({\n                op: JSON_PATCH_OP_ADD,\n                path: `/${key}`,\n                value,\n            });\n        });\n\n        return ops;\n    }\n\n    /**\n     * Utility function to determine if instance is editable\n     *\n     * @return {boolean} true if editable\n     */\n    canEdit(): boolean {\n        const { canEdit, onModification, onRemove, onSave }: Props = this.props;\n        return (\n            canEdit &&\n            typeof onRemove === 'function' &&\n            typeof onSave === 'function' &&\n            typeof onModification === 'function'\n        );\n    }\n\n    /**\n     * Utility function to determine if instance is in edit mode\n     *\n     * @return {boolean} true if editing\n     */\n    isEditing(): boolean {\n        const { isEditing }: State = this.state;\n        return this.canEdit() && isEditing;\n    }\n\n    renderEditButton = () => {\n        const { intl, isDirty }: Props = this.props;\n        const { isBusy }: State = this.state;\n        const canEdit = this.canEdit();\n        const isEditing = this.isEditing();\n        const editClassName = classNames('metadata-instance-editor-instance-edit', {\n            'metadata-instance-editor-instance-is-editing': isEditing,\n        });\n\n        if (canEdit && !isDirty && !isBusy) {\n            const metadataLabelEditText = intl.formatMessage(messages.metadataEditTooltip);\n            return (\n                <Tooltip position=\"top-left\" text={metadataLabelEditText}>\n                    <PlainButton\n                        aria-label={metadataLabelEditText}\n                        aria-pressed={isEditing}\n                        className={editClassName}\n                        data-resin-target=\"metadata-instanceedit\"\n                        onClick={this.toggleIsEditing}\n                        type=\"button\"\n                    >\n                        <IconEdit />\n                    </PlainButton>\n                </Tooltip>\n            );\n        }\n        return null;\n    };\n\n    render() {\n        const { cascadePolicy = {}, isDirty, isCascadingPolicyApplicable, isOpen, template }: Props = this.props;\n        const { fields = [] } = template;\n        const {\n            data,\n            errors,\n            isBusy,\n            isCascadingEnabled,\n            shouldConfirmRemove,\n            shouldShowCascadeOptions,\n            isCascadingOverwritten,\n        }: State = this.state;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n        const isEditing = this.isEditing();\n\n        if (!template || isHidden(template)) {\n            return null;\n        }\n\n        // Animate short and tall cards at consistent speeds.\n        const animationDuration = (fields.length + 1) * 50;\n\n        return (\n            <div ref={this.collapsibleRef}>\n                <Collapsible\n                    animationDuration={animationDuration}\n                    buttonProps={{\n                        [RESIN_TAG_TARGET]: 'metadata-card',\n                    }}\n                    hasStickyHeader\n                    headerActionItems={this.renderEditButton()}\n                    isBordered\n                    isOpen={isOpen}\n                    title={this.getTitle()}\n                >\n                    {shouldConfirmRemove && (\n                        <LoadingIndicatorWrapper isLoading={isBusy}>\n                            <MetadataInstanceConfirmDialog\n                                confirmationMessage={this.getConfirmationMessage()}\n                                onCancel={this.onConfirmCancel}\n                                onConfirm={this.onRemove}\n                            />\n                        </LoadingIndicatorWrapper>\n                    )}\n                    {!shouldConfirmRemove && (\n                        <LoadingIndicatorWrapper isLoading={isBusy}>\n                            <Form onValidSubmit={isDirty ? this.onSave : noop}>\n                                <div className=\"metadata-instance-editor-instance\">\n                                    {isCascadingPolicyApplicable && (\n                                        <CascadePolicy\n                                            canEdit={isEditing && !!cascadePolicy.canEdit}\n                                            isCascadingEnabled={isCascadingEnabled}\n                                            isCascadingOverwritten={isCascadingOverwritten}\n                                            isCustomMetadata={isProperties}\n                                            onCascadeModeChange={this.onCascadeModeChange}\n                                            onCascadeToggle={this.onCascadeToggle}\n                                            shouldShowCascadeOptions={shouldShowCascadeOptions}\n                                        />\n                                    )}\n                                    {isProperties ? (\n                                        <CustomInstance\n                                            canEdit={isEditing}\n                                            data={data}\n                                            onFieldChange={this.onFieldChange}\n                                            onFieldRemove={this.onFieldRemove}\n                                        />\n                                    ) : (\n                                        <TemplatedInstance\n                                            canEdit={isEditing}\n                                            data={data}\n                                            errors={errors}\n                                            onFieldChange={this.onFieldChange}\n                                            onFieldRemove={this.onFieldRemove}\n                                            template={template}\n                                        />\n                                    )}\n                                </div>\n                                {isEditing && (\n                                    <Footer\n                                        onCancel={this.onCancel}\n                                        onRemove={this.onConfirmRemove}\n                                        showSave={isDirty}\n                                    />\n                                )}\n                            </Form>\n                        </LoadingIndicatorWrapper>\n                    )}\n                </Collapsible>\n            </div>\n        );\n    }\n}\n\nexport { Instance as InstanceBase };\nexport default injectIntl(Instance);\n","// @flow\nimport * as React from 'react';\n\nimport Instance from './Instance';\nimport type { MetadataEditor, MetadataCascadingPolicyData } from '../../common/types/metadata';\nimport type { JSONPatchOperations } from '../../common/types/api';\n\ntype Props = {\n    editors?: Array<MetadataEditor>,\n    isCascadingPolicyApplicable?: boolean,\n    onModification?: (id: string, isDirty: boolean) => void,\n    onRemove?: (id: string) => void,\n    onSave?: (\n        id: string,\n        data: JSONPatchOperations,\n        cascadingPolicy?: MetadataCascadingPolicyData,\n        rawData: Object,\n    ) => void,\n    selectedTemplateKey?: string,\n};\n\nconst Instances = ({\n    isCascadingPolicyApplicable = false,\n    editors = [],\n    onModification,\n    onRemove,\n    onSave,\n    selectedTemplateKey,\n}: Props) =>\n    editors.map<React.Element<typeof Instance>>(\n        ({ isDirty = false, instance, hasError = false, template }: MetadataEditor) => {\n            const { templateKey } = template;\n            const isOpen = editors.length === 1 || templateKey === selectedTemplateKey;\n            return (\n                <Instance\n                    canEdit={instance.canEdit}\n                    cascadePolicy={instance.cascadePolicy}\n                    data={instance.data}\n                    hasError={hasError}\n                    id={instance.id}\n                    isCascadingPolicyApplicable={isCascadingPolicyApplicable}\n                    isDirty={isDirty}\n                    isOpen={isOpen}\n                    key={`${instance.id}-${templateKey}`}\n                    onModification={onModification}\n                    onSave={onSave}\n                    onRemove={onRemove}\n                    template={template}\n                />\n            );\n        },\n    );\n\nexport default Instances;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport DatalistItem from '../../components/datalist-item';\nimport SelectorDropdown from '../../components/selector-dropdown';\nimport SearchForm from '../../components/search-form/SearchForm';\nimport PlainButton from '../../components/plain-button';\nimport LoadingIndicator from '../../components/loading-indicator';\nimport { Flyout, Overlay } from '../../components/flyout';\n\nimport MenuToggle from '../../components/dropdown-menu/MenuToggle';\nimport messages from './messages';\nimport TEMPLATE_CUSTOM_PROPERTIES from './constants';\nimport type { MetadataTemplate } from '../../common/types/metadata';\nimport './TemplateDropdown.scss';\n\ntype Props = {\n    activeTemplate?: ?MetadataTemplate,\n    activeTemplateIcon?: React.Node,\n    className?: string,\n    defaultTemplateIcon?: React.Node,\n    entryButton?: React.Node,\n    intl: any,\n    isDropdownBusy?: boolean,\n    onAdd: (template: MetadataTemplate) => void,\n    onDropdownToggle?: (isDropdownOpen: boolean) => void,\n    templates: Array<MetadataTemplate>,\n    title?: React.Node,\n    usedTemplates: Array<MetadataTemplate>,\n};\n\ntype State = {\n    filterText: string,\n    isDropdownOpen: boolean,\n    templates: Array<MetadataTemplate>,\n};\n\nconst getAvailableTemplates = (allTemplates: Array<MetadataTemplate>, usedTemplates: Array<MetadataTemplate>) =>\n    allTemplates.filter(\n        (template: MetadataTemplate) =>\n            usedTemplates.findIndex(\n                (usedTemplate: MetadataTemplate) =>\n                    usedTemplate.templateKey === template.templateKey && usedTemplate.scope === template.scope,\n            ) === -1,\n    );\n\nclass TemplateDropdown extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isDropdownOpen: false,\n            filterText: '',\n            templates: getAvailableTemplates(props.templates, props.usedTemplates),\n        };\n    }\n\n    /**\n     * Updates the state\n     *\n     * @param {Object} prevProps - next props\n     * @return {void}\n     */\n    componentDidUpdate({ templates: prevTemplates, usedTemplates: prevUsedTemplates }: Props) {\n        const { templates, usedTemplates } = this.props;\n\n        if (!isEqual(prevTemplates, templates) || !isEqual(prevUsedTemplates, usedTemplates)) {\n            this.setState({\n                templates: getAvailableTemplates(templates, usedTemplates),\n            });\n        }\n    }\n\n    getDropdown = () => {\n        const {\n            isDropdownBusy,\n            onAdd,\n            activeTemplate,\n            defaultTemplateIcon,\n            activeTemplateIcon,\n            templates: allTemplates,\n            title,\n            usedTemplates,\n        }: Props = this.props;\n        const { templates }: State = this.state;\n        const hasUnusedTemplates = getAvailableTemplates(allTemplates, usedTemplates).length > 0;\n        const hasTemplates = allTemplates.length > 0;\n        const hasResults = templates.length > 0;\n\n        let indicatorOrMessage = null;\n\n        if (isDropdownBusy) {\n            indicatorOrMessage = (\n                <LoadingIndicator className=\"metadata-instance-editor-template-message template-dropdown-loading-indicator\" />\n            );\n        } else if (!hasTemplates || !hasUnusedTemplates || !hasResults) {\n            let message = { id: '' };\n\n            if (!hasTemplates) {\n                message = messages.metadataTemplatesServerHasNoTemplates;\n            } else if (!hasUnusedTemplates) {\n                message = messages.metadataTemplatesNoRemainingTemplates;\n            } else if (!hasResults) {\n                message = messages.metadataTemplatesNoResults;\n            }\n\n            indicatorOrMessage = (\n                <i className=\"metadata-instance-editor-template-message\">\n                    <FormattedMessage {...message} />\n                </i>\n            );\n        }\n\n        const renderedTemplates = templates.map(template => {\n            const isTemplateSelected = activeTemplate && activeTemplate.id === template.id;\n\n            const buttonClassName = classNames('metadata-template-dropdown-select-template', {\n                'metadata-template-dropdown-is-selected': isTemplateSelected,\n            });\n\n            return (\n                <DatalistItem key={template.id}>\n                    <PlainButton className={buttonClassName} tabIndex=\"-1\" type=\"button\">\n                        {isTemplateSelected ? activeTemplateIcon : defaultTemplateIcon}\n                        {this.getTemplateName(template)}\n                    </PlainButton>\n                </DatalistItem>\n            );\n        });\n\n        return (\n            <>\n                <SelectorDropdown\n                    className=\"metadata-instance-editor-template-dropdown-menu\"\n                    title={title}\n                    isAlwaysOpen\n                    onSelect={(index: number) => {\n                        onAdd(templates[index]);\n                    }}\n                    selector={this.getSelector()}\n                    shouldScroll\n                >\n                    {indicatorOrMessage ? null : renderedTemplates}\n                </SelectorDropdown>\n                {indicatorOrMessage}\n            </>\n        );\n    };\n\n    /**\n     * Returns the input field for the drop down\n     *\n     * @return {React.Node} - input selector\n     */\n    getSelector = () => {\n        const { intl }: Props = this.props;\n        const { filterText }: State = this.state;\n        return (\n            <SearchForm\n                data-resin-target=\"metadata-templatesearch\"\n                label=\"\"\n                onChange={this.handleUserInput}\n                placeholder={intl.formatMessage(messages.metadataTemplateSearchPlaceholder)}\n                shouldPreventClearEventPropagation\n                type=\"text\"\n                useClearButton\n                value={filterText}\n            />\n        );\n    };\n\n    /**\n     * Returns template display name.\n     * For custom metadata we have it on the client.\n     *\n     * @return {React.Node} - string or formatted name\n     */\n    getTemplateName(template: MetadataTemplate): React.Node {\n        return template.templateKey === TEMPLATE_CUSTOM_PROPERTIES ? (\n            <FormattedMessage className=\"template-display-name\" {...messages.customTitle} />\n        ) : (\n            <div className=\"template-display-name\">{template.displayName}</div>\n        );\n    }\n\n    /**\n     * Updates the filter text and filters the results\n     *\n     * @param {UserInput} userInput - input value returned from onChangeHandler from SearchForm.js\n     * @return {void}\n     */\n    handleUserInput = (userInput: string) => {\n        const { templates: allTemplates, usedTemplates } = this.props;\n        const filterText = userInput;\n        const templates = getAvailableTemplates(allTemplates, usedTemplates);\n\n        this.setState({\n            filterText,\n            templates: templates.filter(template => {\n                const label: string = ((template.templateKey === TEMPLATE_CUSTOM_PROPERTIES\n                    ? messages.customTitle.defaultMessage\n                    : template.displayName): any);\n                return label.toLowerCase().includes(filterText.toLowerCase());\n            }),\n        });\n    };\n\n    onOpen = () => {\n        const { onDropdownToggle, templates, usedTemplates } = this.props;\n\n        if (onDropdownToggle) {\n            onDropdownToggle(true);\n        }\n\n        this.setState({\n            isDropdownOpen: true,\n            filterText: '',\n            templates: getAvailableTemplates(templates, usedTemplates),\n        });\n    };\n\n    onClose = () => {\n        const { onDropdownToggle } = this.props;\n\n        if (onDropdownToggle) {\n            onDropdownToggle(false);\n        }\n\n        this.setState({ isDropdownOpen: false });\n    };\n\n    renderEntryButton = () => {\n        const { entryButton } = this.props;\n        const { isDropdownOpen } = this.state;\n        const buttonToggleClassName = classNames('lnk', {\n            'is-toggled': isDropdownOpen,\n        });\n        if (entryButton) {\n            return entryButton;\n        }\n        return (\n            <PlainButton data-resin-target=\"metadata-templateaddmenu\" className={buttonToggleClassName} type=\"button\">\n                <MenuToggle>\n                    <FormattedMessage {...messages.metadataTemplateAdd} />\n                </MenuToggle>\n            </PlainButton>\n        );\n    };\n\n    render() {\n        const { className } = this.props;\n        const flyoutClassName = classNames('metadata-instance-editor-template-dropdown-flyout', className);\n\n        return (\n            <Flyout\n                className={flyoutClassName}\n                closeOnClick\n                closeOnClickOutside\n                constrainToWindowWithPin\n                onClose={this.onClose}\n                onOpen={this.onOpen}\n                position=\"bottom-left\"\n                shouldDefaultFocus\n            >\n                {this.renderEntryButton()}\n                <Overlay>{this.getDropdown()}</Overlay>\n            </Flyout>\n        );\n    }\n}\n\nexport { TemplateDropdown as TemplateDropdownBase };\nexport default injectIntl(TemplateDropdown);\n","/**\n * @flow\n * @file Metadata sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport type { MessageDescriptor } from 'react-intl';\nimport API from '../../api';\nimport EmptyContent from '../../features/metadata-instance-editor/EmptyContent';\nimport InlineError from '../../components/inline-error/InlineError';\nimport Instances from '../../features/metadata-instance-editor/Instances';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport LoadingIndicatorWrapper from '../../components/loading-indicator/LoadingIndicatorWrapper';\nimport messages from '../common/messages';\nimport SidebarContent from './SidebarContent';\nimport TemplateDropdown from '../../features/metadata-instance-editor/TemplateDropdown';\nimport { normalizeTemplates } from '../../features/metadata-instance-editor/metadataUtil';\nimport { EVENT_JS_READY } from '../common/logger/constants';\nimport { isUserCorrectableError } from '../../utils/error';\nimport { mark } from '../../utils/performance';\nimport { withAPIContext } from '../common/api-context';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withLogger } from '../common/logger';\nimport {\n    FIELD_IS_EXTERNALLY_OWNED,\n    FIELD_PERMISSIONS,\n    FIELD_PERMISSIONS_CAN_UPLOAD,\n    IS_ERROR_DISPLAYED,\n    ORIGIN_METADATA_SIDEBAR,\n    SIDEBAR_VIEW_METADATA,\n} from '../../constants';\nimport type { WithLoggerProps } from '../../common/types/logging';\nimport type { ElementsXhrError, ErrorContextProps, JSONPatchOperations } from '../../common/types/api';\nimport type { MetadataEditor, MetadataTemplate } from '../../common/types/metadata';\nimport type { BoxItem } from '../../common/types/core';\nimport './MetadataSidebar.scss';\n\ntype ExternalProps = {\n    isFeatureEnabled: boolean,\n    selectedTemplateKey?: string,\n    templateFilters?: Array<string> | string,\n};\n\ntype PropsWithoutContext = {\n    elementId: string,\n    fileId: string,\n    hasSidebarInitialized?: boolean,\n} & ExternalProps;\n\ntype Props = {\n    api: API,\n} & PropsWithoutContext &\n    ErrorContextProps &\n    WithLoggerProps;\n\ntype State = {\n    editors?: Array<MetadataEditor>,\n    error?: MessageDescriptor,\n    file?: BoxItem,\n    isLoading: boolean,\n    templates?: Array<MetadataTemplate>,\n};\n\nconst MARK_NAME_JS_READY = `${ORIGIN_METADATA_SIDEBAR}_${EVENT_JS_READY}`;\n\nmark(MARK_NAME_JS_READY);\n\nclass MetadataSidebar extends React.PureComponent<Props, State> {\n    state = { isLoading: false };\n\n    static defaultProps = {\n        isFeatureEnabled: true,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        const { logger } = this.props;\n        logger.onReadyMetric({\n            endMarkName: MARK_NAME_JS_READY,\n        });\n    }\n\n    componentDidMount() {\n        this.fetchFile();\n    }\n\n    /**\n     * Common error callback\n     *\n     * @param {Error} error - API error\n     * @param {string} code - error code\n     * @param {Object} [newState] - optional state to set\n     * @return {void}\n     */\n    onApiError = (error: ElementsXhrError, code: string, newState: Object = {}) => {\n        const { onError }: Props = this.props;\n        const { status } = error;\n        const isValidError = isUserCorrectableError(status);\n        this.setState({\n            error: messages.sidebarMetadataEditingErrorContent,\n            isLoading: false,\n            ...newState,\n        });\n        onError(error, code, {\n            error,\n            [IS_ERROR_DISPLAYED]: isValidError,\n        });\n    };\n\n    /**\n     * Checks upload permission\n     *\n     * @return {boolean} - true if metadata can be edited\n     */\n    canEdit(): boolean {\n        const { file }: State = this.state;\n        return getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n    }\n\n    /**\n     * Finds the editor we are editing\n     *\n     * @param {number} id - instance id\n     * @return {Object} editor instance\n     */\n    getEditor(id: string): ?MetadataEditor {\n        const { editors = [] }: State = this.state;\n        return editors.find(({ instance }) => instance.id === id);\n    }\n\n    /**\n     * Instance remove success handler\n     *\n     * @param {Object} editor - the editor to remove\n     * @return {void}\n     */\n    onRemoveSuccessHandler(editor: MetadataEditor): void {\n        const { editors = [] }: State = this.state;\n        const clone = editors.slice(0);\n        clone.splice(editors.indexOf(editor), 1);\n        this.setState({ editors: clone });\n    }\n\n    /**\n     * Instance remove handler\n     *\n     * @param {string} id - instance id\n     * @return {void}\n     */\n    onRemove = (id: string): void => {\n        const { api }: Props = this.props;\n        const { file }: State = this.state;\n        const editor = this.getEditor(id);\n\n        if (!editor || !file) {\n            return;\n        }\n\n        api.getMetadataAPI(false).deleteMetadata(\n            file,\n            editor.template,\n            () => this.onRemoveSuccessHandler(editor),\n            this.onApiError,\n        );\n    };\n\n    /**\n     * Instance add success handler\n     *\n     * @param {Object} editor - instance editor\n     * @return {void}\n     */\n    onAddSuccessHandler = (editor: MetadataEditor): void => {\n        const { editors = [] }: State = this.state;\n        const clone = editors.slice(0);\n        clone.push(editor);\n        this.setState({ editors: clone, isLoading: false });\n    };\n\n    /**\n     * Instance add handler\n     *\n     * @param {Object} template - instance template\n     * @return {void}\n     */\n    onAdd = (template: MetadataTemplate) => {\n        const { api }: Props = this.props;\n        const { file }: State = this.state;\n\n        if (!file) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        api.getMetadataAPI(false).createMetadata(file, template, this.onAddSuccessHandler, this.onApiError);\n    };\n\n    /**\n     * Instance save success handler\n     *\n     * @param {Object} oldEditor - prior editor\n     * @param {Object} newEditor - updated editor\n     * @return {void}\n     */\n    replaceEditor(oldEditor: MetadataEditor, newEditor: MetadataEditor): void {\n        const { editors = [] }: State = this.state;\n        const clone = editors.slice(0);\n        clone.splice(editors.indexOf(oldEditor), 1, newEditor);\n        this.setState({ editors: clone });\n    }\n\n    /**\n     * Instance save error handler\n     *\n     * @param {Object} oldEditor - prior editor\n     * @param {Object} error - api error\n     * @param {string} code - error code\n     * @return {void}\n     */\n    onSaveErrorHandler(oldEditor: MetadataEditor, error: ElementsXhrError, code: string): void {\n        const clone: MetadataEditor = { ...oldEditor, hasError: true }; // shallow clone suffices for hasError setting\n        this.replaceEditor(oldEditor, clone);\n        this.onApiError(error, code);\n    }\n\n    /**\n     * Instance save handler\n     *\n     * @param {string} id - instance id\n     * @param {Array} ops - json patch ops\n     * @return {void}\n     */\n    onSave = (id: string, ops: JSONPatchOperations): void => {\n        const { api }: Props = this.props;\n        const { file }: State = this.state;\n        const oldEditor = this.getEditor(id);\n\n        if (!oldEditor || !file) {\n            return;\n        }\n\n        api.getMetadataAPI(false).updateMetadata(\n            file,\n            oldEditor.template,\n            ops,\n            (newEditor: MetadataEditor) => {\n                this.replaceEditor(oldEditor, newEditor);\n            },\n            (error: ElementsXhrError, code: string) => {\n                this.onSaveErrorHandler(oldEditor, error, code);\n            },\n        );\n    };\n\n    /**\n     * Instance dirty handler\n     *\n     * @param {string} id - instance id\n     * @param {boolean} isDirty - instance dirty state\n     * @return {void}\n     */\n    onModification = (id: string, isDirty: boolean) => {\n        const oldEditor = this.getEditor(id);\n        if (!oldEditor) {\n            return;\n        }\n        const newEditor = { ...oldEditor, isDirty }; // shallow clone suffices for isDirty setting\n        this.replaceEditor(oldEditor, newEditor);\n    };\n\n    /**\n     * Handles a failed metadata fetch\n     *\n     * @private\n     * @param {Error} e - API error\n     * @param {string} code - error code\n     * @return {void}\n     */\n    fetchMetadataErrorCallback = (e: ElementsXhrError, code: string) => {\n        this.onApiError(e, code, {\n            editors: undefined,\n            error: messages.sidebarMetadataFetchingErrorContent,\n            templates: undefined,\n        });\n    };\n\n    /**\n     * Handles a successful metadata fetch\n     *\n     * @param {Object} metadata - instances and templates\n     * @return {void}\n     */\n    fetchMetadataSuccessCallback = ({\n        editors,\n        templates,\n    }: {\n        editors: Array<MetadataEditor>,\n        templates: Array<MetadataTemplate>,\n    }) => {\n        const { selectedTemplateKey, templateFilters } = this.props;\n        this.setState({\n            editors: editors.slice(0), // cloned for potential editing\n            error: undefined,\n            isLoading: false,\n            templates: normalizeTemplates(templates, selectedTemplateKey, templateFilters),\n        });\n    };\n\n    /**\n     * Fetches the metadata editors\n     *\n     * @return {void}\n     */\n    fetchMetadata(): void {\n        const { api, isFeatureEnabled }: Props = this.props;\n        const { file }: State = this.state;\n\n        if (!file) {\n            return;\n        }\n\n        api.getMetadataAPI(false).getMetadata(\n            file,\n            this.fetchMetadataSuccessCallback,\n            this.fetchMetadataErrorCallback,\n            isFeatureEnabled,\n            { refreshCache: true },\n        );\n    }\n\n    /**\n     * Handles a failed file fetch\n     *\n     * @private\n     * @param {Error} e - API error\n     * @param {string} code - error code\n     * @return {void}\n     */\n    fetchFileErrorCallback = (e: ElementsXhrError, code: string) => {\n        this.onApiError(e, code, { error: messages.sidebarFileFetchingErrorContent, file: undefined });\n    };\n\n    /**\n     * Handles a successful file fetch.\n     * Can be called multiple times when refreshing caches.\n     * On file load we should fetch metadata, but we shouldn't need to fetch\n     * if the file permissions haven't changed from a prior file fetch.\n     * Metadata editors mostly care about upload permission.\n     *\n     * @param {Object} file - the Box file\n     * @return {void}\n     */\n    fetchFileSuccessCallback = (file: BoxItem) => {\n        const { file: currentFile }: State = this.state;\n        const currentCanUpload = getProp(currentFile, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n        const newCanUpload = getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n        const shouldFetchMetadata = !currentFile || currentCanUpload !== newCanUpload;\n        const callback = shouldFetchMetadata ? this.fetchMetadata : noop;\n        this.setState({ file }, callback);\n    };\n\n    /**\n     * Fetches a file with the fields needed for metadata sidebar\n     *\n     * @return {void}\n     */\n    fetchFile(): void {\n        const { api, fileId }: Props = this.props;\n        api.getFileAPI().getFile(fileId, this.fetchFileSuccessCallback, this.fetchFileErrorCallback, {\n            fields: [FIELD_IS_EXTERNALLY_OWNED, FIELD_PERMISSIONS],\n            refreshCache: true, // see implications in file success callback\n        });\n    }\n\n    refresh(): void {\n        this.fetchMetadata();\n    }\n\n    render() {\n        const { editors, file, error, isLoading, templates }: State = this.state;\n        const { elementId, selectedTemplateKey }: Props = this.props;\n        const showEditor = !!file && !!templates && !!editors;\n        const showLoadingIndicator = !error && !showEditor;\n        const canEdit = this.canEdit();\n        const showTemplateDropdown = showEditor && canEdit;\n        const showEmptyContent = showEditor && ((editors: any): Array<MetadataEditor>).length === 0;\n\n        return (\n            <SidebarContent\n                actions={\n                    showTemplateDropdown ? (\n                        <TemplateDropdown\n                            hasTemplates={templates && templates.length !== 0}\n                            isDropdownBusy={false}\n                            onAdd={this.onAdd}\n                            // $FlowFixMe checked via showTemplateDropdown & showEditor\n                            templates={templates}\n                            // $FlowFixMe checked via showTemplateDropdown & showEditor\n                            usedTemplates={editors.map(editor => editor.template)}\n                        />\n                    ) : null\n                }\n                className=\"bcs-metadata\"\n                elementId={elementId}\n                sidebarView={SIDEBAR_VIEW_METADATA}\n                title={<FormattedMessage {...messages.sidebarMetadataTitle} />}\n            >\n                {error && (\n                    <InlineError title={<FormattedMessage {...messages.error} />}>\n                        <FormattedMessage {...error} />\n                    </InlineError>\n                )}\n                {showLoadingIndicator && <LoadingIndicator />}\n                {showEditor && (\n                    <LoadingIndicatorWrapper className=\"metadata-instance-editor\" isLoading={isLoading}>\n                        {showEmptyContent ? (\n                            <EmptyContent canAdd={canEdit} />\n                        ) : (\n                            <Instances\n                                editors={editors}\n                                onModification={this.onModification}\n                                onRemove={this.onRemove}\n                                onSave={this.onSave}\n                                selectedTemplateKey={selectedTemplateKey}\n                            />\n                        )}\n                    </LoadingIndicatorWrapper>\n                )}\n            </SidebarContent>\n        );\n    }\n}\n\nexport type MetadataSidebarProps = ExternalProps;\nexport { MetadataSidebar as MetadataSidebarComponent };\nexport default flow([withLogger(ORIGIN_METADATA_SIDEBAR), withErrorBoundary(ORIGIN_METADATA_SIDEBAR), withAPIContext])(\n    MetadataSidebar,\n);\n"],"sourceRoot":""}